name: Run-Orchestrator-polkadot

on:
  workflow_dispatch:
    inputs:
      artifacts-run-id:
        required: false
        type: string
        description: 'Run-id to use the artifacts to spawn the network'

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

permissions: {}
env:
  AHM_BASE_PATH: "/tmp/ahm"

jobs:
  run_orchestrator_polkadot:
    runs-on: parity-large-persistent
    container:
      image: docker.io/paritytech/ci-unified:bullseye-1.88.0-2025-06-27-v202506301118
    timeout-minutes: 2880 # 2 days

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - uses: extractions/setup-just@v2

      - uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: set_run_id
        id: set_run_id
        shell: bash
        env:
          ARTIFACTS_RUN_ID: ${{ inputs.artifacts-run-id }}
        run: |
          if [[ $ARTIFACTS_RUN_ID != "" ]]; then
            echo "RUN_ID_SET=true" >> $GITHUB_OUTPUT
          fi;


      - name: download_polkadot_binaries
        shell: bash
        if: ${{ steps.set_run_id.outputs.RUN_ID_SET == 'true' }}
        run: |
          # polkadot polkadot-execute-worker polkadot-prepare-worker
          for bin in  polkadot-parachain; do
            echo "downloading $bin";
            curl -L -o /tmp/$bin https://github.com/paritytech/polkadot-sdk/releases/download/polkadot-stable2503-1/$bin;
            chmod 755 /tmp/$bin;
          done
          ls -ltr /tmp

      - name: download_doppelganger_binaries
        shell: bash
        if: ${{ steps.set_run_id.outputs.RUN_ID_SET == 'true' }}
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh release download -R paritytech/doppelganger-wrapper -p doppelganger -p doppelganger-parachain
          ls -ltr
          mv doppelganger /tmp
          mv doppelganger-parachain /tmp
          chmod 755 /tmp/doppelganger*
          ls -ltr /tmp

      - name: download_artifacts
        id: download_artifacts
        shell: bash
        if: ${{ steps.set_run_id.outputs.RUN_ID_SET == 'true' }}
        env:
          ARTIFACTS_RUN_ID: ${{ inputs.artifacts-run-id }}
          GH_TOKEN: ${{ github.token }}
        run: |
          if [[ $ARTIFACTS_RUN_ID != "" ]]; then
            echo "downloading artifacts from https://github.com/paritytech/ahm-dryrun/actions/runs/${ARTIFACTS_RUN_ID}"
            gh run download $ARTIFACTS_RUN_ID
            ls -ltr
            ARTIFACTS_DIR=$(ls -t |head -1)
            echo "ARTIFACTS_DIR=$ARTIFACTS_DIR" >> $GITHUB_OUTPUT
          else
            echo "No artifact run id provided, skipping step"
          fi

      - name: run_orchestrator
        shell: bash
        env:
          ARTIFACTS_RUN_ID: ${{ inputs.artifacts-run-id }}
          GH_TOKEN: ${{ github.token }}
        run: |
          if [[ $ARTIFACTS_RUN_ID != "" ]]; then
            echo "::group::install_zombie-cli"
            cargo install zombie-cli -f
            echo "::endgroup::"

            echo "::group::npm"
            npm install
            npm run build
            echo "::endgroup::"

            ls -l ${{ steps.download_artifacts.outputs.ARTIFACTS_DIR }}
            cat ${{ steps.download_artifacts.outputs.ARTIFACTS_DIR }}/config.toml

            echo "::group::exports"
            # export path
            export PATH=/tmp:$PATH
            export AHM_STEP=1
            export AHM_BASE_PATH="$(pwd)/${{ steps.download_artifacts.outputs.ARTIFACTS_DIR }}"
            export RUST_LOG=zombie=debug
            echo "::warning::PATH: $PATH"
            echo "::endgroup::"

            echo "::group::zombie-cli"
            cd ${{ steps.download_artifacts.outputs.ARTIFACTS_DIR }}
            nohup zombie-cli spawn -p native -d /tmp/spawn config.toml > nohup.out 2> nohup.err &
            ZOMBIE_FILE="/tmp/spawn/zombie.json"
            until [ -f "$ZOMBIE_FILE" ]; do
              echo "ZOMBIE_FILE: $ZOMBIE_FILE not present yet"
              sleep 2
            done
            echo "'zombie.json' file present, network spawned... sleeping a few seconds"
            echo "::endgroup::"

            echo "::group::zombie-cli-output"
            cat nohup.out
            echo "::endgroup::"

            sleep 12

            echo "::group::alice-output"
            cat /tmp/spawn/alice/alice.log
            echo "::endgroup::"


            npm run polkadot-migration
          else
            just run-orchestrator-polkadot
          fi

      - name: upload_artifacts
        uses: actions/upload-artifact@v4
        if: ${{ ! cancelled() }}
        with:
          name: polkadot-ahm-${{ github.sha }}
          path: |
            ${{ env.AHM_BASE_PATH }}/*
            /tmp/spawn/**/*.log
