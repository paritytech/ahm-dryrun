name: PET Common

on:
  workflow_call:
    inputs:
      network:
        required: true
        type: string
      run-id:
        description: "optional run-id to download the artifacts"
        required: false
        type: string

env:
  ZOMBIE_BITE_BASE_PATH: "/tmp/ci"
  AHM_BINS: "/tmp"
  RUSTFLAGS: "-A warnings"

jobs:
  run_pet_tests:
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - uses: extractions/setup-just@v2

      - name: Fetch cache
        uses: Swatinem/rust-cache@98c8021b550208e191a6a3145459bfc9fb29c4c0 # v2.8.0
        with:
          shared-key: "ahm-cache"
          cache-on-failure: true # cache allways

      - uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: install_zombie_bite
        shell: bash
        run: |
          just install-zombie-bite

      - name: download_doppelganger_binaries
        uses: ./.github/actions/download-doppelganger-binaries
        with:
          destination-path: ${{ env.AHM_BINS }}

      - name: create_base_dir
        shell: bash
        run: |
          mkdir $ZOMBIE_BITE_BASE_PATH

      - name: download_post_migration_db
        uses: ./.github/actions/download-artifact
        env:
          RUN_ID: ${{ inputs.run-id }}
          GH_TOKEN: ${{ github.token }}
          NETWORK: ${{ inputs.network }}
        with:
          gh-token: ${{ env.GH_TOKEN }}
          destination-path: ${{ env.ZOMBIE_BITE_BASE_PATH }}
          run-id: ${{ env.RUN_ID }}
          name-pattern: "${{ env.NETWORK }}-post-migration-db-*"

      - name: install_pet_deps
        shell: bash
        run: |
          npm install -g yarn
          yarn install

      - name: run_zombie_bite_post
        shell: bash
        run: |
          export PATH=${AHM_BINS}:$PATH

          # remove previous nohup.out
          rm nohup.out || true
          nohup just zb spawn $ZOMBIE_BITE_BASE_PATH post > nohup.out 2>&1 &

      - name: wait_for_network
        uses: ./.github/actions/wait-zb-network-ready

      - name: get_current_block_number
        shell: bash
        run: |
          COL_PORT=$(jq -r .collator_port ${ZOMBIE_BITE_BASE_PATH}/ports.json)
          echo "::group::get-current-block-number"
          echo "Getting current block from http://localhost:${COL_PORT}"
          # Get current block number using JSON-RPC
          BLOCK_NUMBER=$(curl -s -H "Content-Type: application/json" -d '{"id":1,"jsonrpc":"2.0","method":"chain_getHeader","params":[]}' http://localhost:${COL_PORT} | jq -r '.result.number')
          if [ -z "$BLOCK_NUMBER" ] || [ "$BLOCK_NUMBER" = "null" ]; then
            echo "Failed to get block number from endpoint"
            exit 1
          fi
          # Convert from hex to decimal
          BLOCK_NUMBER_DECIMAL=$((BLOCK_NUMBER))
          echo "Current block number: $BLOCK_NUMBER_DECIMAL"
          echo "ASSETHUB_BLOCK_NUMBER=$BLOCK_NUMBER_DECIMAL" >> $GITHUB_ENV
          echo "::endgroup::"

      - name: run_polkadot_ecosystem_tests
        shell: bash
        env:
          ASSETHUB_BLOCK_NUMBER: ${{ env.ASSETHUB_BLOCK_NUMBER }}
          NETWORK: ${{ inputs.network }}
        run: |
          COL_PORT=$(jq -r .collator_port ${ZOMBIE_BITE_BASE_PATH}/ports.json)
          echo "::group::run-polkadot-ecosystem-tests"
          
          # Set up environment variables for the just command
          #export ASSETHUB${NETWORK^^}_ENDPOINT="ws://localhost:${COL_PORT}"
          #export ASSETHUB${NETWORK^^}_BLOCK_NUMBER=$ASSETHUB_BLOCK_NUMBER
          
          # Sleep before running tests - running them immediately after the network has been spun up
          # can lead to missing data in the `chopsticks` node, and false negatives.
          echo "Sleeping for 90 seconds before running tests..."
          sleep 90
          
          # Run E2E tests using the just command
          just e2e-tests ${{ inputs.network }}
          echo "::endgroup::"
