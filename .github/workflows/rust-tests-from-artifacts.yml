name: Rust Tests from Artifacts

on:
  push:
    branches: [kiz-rust-test]
  workflow_dispatch:
    inputs:
      run-id:
        description: "Run ID of the AHM Flow workflow that has the snapshot artifacts"
        required: true
        type: string
      network:
        description: "Network (polkadot or kusama)"
        required: true
        type: choice
        options:
          - polkadot
          - kusama

env:
  ARTIFACT_DIR: ${{ github.workspace }}/migration-test-artifacts
  RUSTFLAGS: "-A warnings"

jobs:
  rust-tests-from-artifacts:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup Just
        uses: extractions/setup-just@v2

      - name: Create artifact directory
        run: mkdir -p ${{ env.ARTIFACT_DIR }}

      - name: Setup Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Fetch Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: "ahm-cache"
          cache-on-failure: true

      - name: Find and download artifacts
        env:
          GH_TOKEN: ${{ github.token }}
          RUN_ID: ${{ inputs.run-id }}
          NETWORK: ${{ inputs.network }}
        run: |
          echo "::group::Finding artifacts from run $RUN_ID"

          # Get all artifacts from the run
          artifacts=$(gh api \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            /repos/${{ github.repository }}/actions/runs/$RUN_ID/artifacts \
            --jq '.artifacts[] | select(.name | contains("'$NETWORK'-try-runtime-snaps")) | {id: .id, name: .name}')

          # Extract artifact IDs
          pre_artifact=$(echo "$artifacts" | jq -r 'select(.name | contains("-pre-")) | .name')
          post_artifact=$(echo "$artifacts" | jq -r 'select(.name | contains("-post-")) | .name')

          if [ -z "$pre_artifact" ] || [ -z "$post_artifact" ]; then
            echo "ERROR: Could not find required artifacts for network $NETWORK in run $RUN_ID"
            echo "Found artifacts:"
            gh api /repos/${{ github.repository }}/actions/runs/$RUN_ID/artifacts --jq '.artifacts[].name'
            exit 1
          fi

          echo "Found pre-migration artifact: $pre_artifact"
          echo "Found post-migration artifact: $post_artifact"
          echo "::endgroup::"

          # Download artifacts
          echo "::group::Downloading artifacts"
          cd ${{ env.ARTIFACT_DIR }}

          gh run download $RUN_ID -n "$pre_artifact"
          gh run download $RUN_ID -n "$post_artifact"

          echo "Downloaded files:"
          ls -la
          echo "::endgroup::"

      - name: Organize snapshot files
        working-directory: ${{ env.ARTIFACT_DIR }}
        env:
          NETWORK: ${{ inputs.network }}
        run: |
          echo "::group::Organizing snapshot files"

          # Check what we have
          echo "Current directory structure:"
          find . -name "*.snap" -type f

          # Move and rename files to expected locations
          # The files should be directly in the artifact directory after download
          if [ -f "$NETWORK-rc-pre.snap" ]; then
            mv "$NETWORK-rc-pre.snap" rc-pre.snap
          else
            echo "ERROR: Could not find $NETWORK-rc-pre.snap"
            exit 1
          fi

          if [ -f "$NETWORK-ah-pre.snap" ]; then
            mv "$NETWORK-ah-pre.snap" ah-pre.snap
          else
            echo "ERROR: Could not find $NETWORK-ah-pre.snap"
            exit 1
          fi

          if [ -f "$NETWORK-rc-post.snap" ]; then
            mv "$NETWORK-rc-post.snap" rc-post.snap
          else
            echo "ERROR: Could not find $NETWORK-rc-post.snap"
            exit 1
          fi

          if [ -f "$NETWORK-ah-post.snap" ]; then
            mv "$NETWORK-ah-post.snap" ah-post.snap
          else
            echo "ERROR: Could not find $NETWORK-ah-post.snap"
            exit 1
          fi

          echo "Renamed files:"
          ls -la *.snap
          echo "::endgroup::"

      - name: Run Rust tests
        env:
          NETWORK: ${{ inputs.network }}
        run: |
          echo "::group::Running Rust tests"

          # The rust-test recipe expects absolute paths
          export ARTIFACT_DIR_ABS=$(realpath ${{ env.ARTIFACT_DIR }})

          # Run the rust tests
          just ahm rust-test $NETWORK $ARTIFACT_DIR_ABS

          echo "::endgroup::"
