name: Zombie Bite Common

on:
  workflow_call:
    inputs:
      network:
        required: true
        type: string
      sudo-key:
        required: false
        type: string
      runner:
        required: false
        type: string
        default: parity-large-persistent
      args:
        required: false
        type: string
        default: ""

env:
  ZOMBIE_BITE_BASE_PATH: "/tmp/ci"
  AHM_BINS: "/tmp"

jobs:
  run_zombie_bite:
    runs-on: ${{ inputs.runner }}
    container:
      image: docker.io/paritytech/ci-unified:bullseye-1.88.0-2025-06-27-v202507221446
    timeout-minutes: 720

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - uses: extractions/setup-just@v2

      - name: download_doppelganger_binaries
        uses: ./.github/actions/download-doppelganger-binaries
        with:
          destination-path: ${{ env.AHM_BINS }}

      - name: install_zombie_bite
        shell: bash
        run: |
          just install-zombie-bite

      - name: install_try_runtime_cli
        shell: bash
        run: |
          just install-try-runtime

      - name: build_runtimes
        shell: bash
        env:
          RUSTFLAGS: "-A warnings"
          NETWORK: ${{ inputs.network }}
        run: |
          just build $NETWORK

      - name: create_base_dir
        shell: bash
        run: |
          mkdir $ZOMBIE_BITE_BASE_PATH

      - name: zombie_bite_step_bite
        id: zombie_bite_step_bite
        shell: bash
        env:
          NETWORK: ${{ inputs.network }}
          SUDO: ${{ inputs.sudo-key }}
        run: |
          export PATH=${AHM_BINS}:$PATH

          if [[ $SUDO != "" ]]; then
            export ZOMBIE_SUDO=$SUDO
          else
            echo "no sudo key provided, using default '//Alice'"
          fi

          echo $(pwd)
          RC_OVERRIDE="./runtime_wasm/${NETWORK}_runtime.compact.compressed.wasm"
          AH_OVERRIDE="./runtime_wasm/asset_hub_${NETWORK}_runtime.compact.compressed.wasm"
          ls $RC_OVERRIDE
          ls $AH_OVERRIDE

          # read .env to use the variable defined there (e.g ZOMBIE_BITE_ALICE_PORT/ZOMBIE_BITE_AH_PORT)
          set -a
          source .env
          set +a

          echo "::group::find-rc-block-bite"
          RC_BITE_BLOCK=$(just find-rc-block-bite $NETWORK)
          echo "Found RC block to bite: $RC_BITE_BLOCK"
          echo "::endgroup::"

          zombie-bite bite -r $NETWORK --rc-override $RC_OVERRIDE --ah-override $AH_OVERRIDE -d $ZOMBIE_BITE_BASE_PATH # --rc-bite-block $RC_BITE_BLOCK

        continue-on-error: true

      - name: zombie_bite_upload_step
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.network }}-pre-migration-db-${{ github.sha }}${{ inputs.args }}
          path: |
            ${{ env.ZOMBIE_BITE_BASE_PATH }}/bite
            ${{ env.ZOMBIE_BITE_BASE_PATH }}/ports.json
            ${{ env.ZOMBIE_BITE_BASE_PATH }}/ready.json

      - name: checkpoint_bite
        shell: bash
        run: |
          echo "::group::debug"
          ls /tmp/*
          ls ${{ env.ZOMBIE_BITE_BASE_PATH }}/bite
          ls ${{ env.ZOMBIE_BITE_BASE_PATH }}/bite-debug
          echo "::endgroup::"

      - uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: npm
        shell: bash
        run: |
          npm install
          npm run build

      - name: zombie_bite_step_spawn_and_run_migration
        id: zombie_bite_step_spawn_and_run_migration
        shell: bash
        env:
          NETWORK: ${{ inputs.network }}
        run: |
          export PATH=${AHM_BINS}:$PATH

          echo "::group::zombie-bite-spawn"
          nohup zombie-bite spawn -d $ZOMBIE_BITE_BASE_PATH > nohup.out 2>&1 &
          ZOMBIE_FILE="${ZOMBIE_BITE_BASE_PATH}/spawn/zombie.json"
          COUNT=0
          until [ -f "$ZOMBIE_FILE" ]; do
            echo "ZOMBIE_FILE: $ZOMBIE_FILE not present yet"
            COUNT=$((COUNT +1))
             if [[ $COUNT -gt 150 ]];then
              echo "SPAWN_FAIL=1" >> $GITHUB_OUTPUT
              exit 1;
             fi;
            sleep 2
          done
          echo "'zombie.json' file present, network spawned... sleeping a few seconds"
          echo "::endgroup::"

          echo "::group::zombie-bite-output"
          cat nohup.out
          echo "::endgroup::"

          echo "sleeping 1 min to bootstrap"
          sleep 60


          ALICE_PORT=$(jq -r .alice_port ${ZOMBIE_BITE_BASE_PATH}/ports.json)
          COL_PORT=$(jq -r .collator_port ${ZOMBIE_BITE_BASE_PATH}/ports.json)

          # try-runtime snap pre
          echo "::group::run-try-runtime"
          try-runtime create-snapshot --uri "ws://localhost:$ALICE_PORT" "${ZOMBIE_BITE_BASE_PATH}/rc-pre.snap"
          try-runtime create-snapshot --uri "ws://localhost:$COL_PORT" "${ZOMBIE_BITE_BASE_PATH}/ah-pre.snap"
          echo "::endgroup::"

          echo "::group::run-migration"
          node dist/zombie-bite-scripts/migration_shedule_migration.js $ALICE_PORT
          node dist/zombie-bite-scripts/migration_finished_monitor.js $ZOMBIE_BITE_BASE_PATH $ALICE_PORT $COL_PORT

          echo "::endgroup::"

          # try-runtime snap post
          echo "::group::run-try-runtime"
          try-runtime create-snapshot --uri "ws://localhost:$ALICE_PORT" "${ZOMBIE_BITE_BASE_PATH}/rc-post.snap"
          try-runtime create-snapshot --uri "ws://localhost:$COL_PORT" "${ZOMBIE_BITE_BASE_PATH}/ah-post.snap"
          echo "::endgroup::"

          echo "::group::zombie-bite-stop"
          STOP_FILE="${ZOMBIE_BITE_BASE_PATH}/stop.txt"
          echo "creating file ${STOP_FILE}"

          # signal stop network
          touch ${STOP_FILE}

          # wait until finishing packaging by checking the stop.txt existence
          COUNT=0
          until [ ! -f "$STOP_FILE" ]; do
            echo "STOP_FILE: $STOP_FILE still present"
            COUNT=$((COUNT +1))
             if [[ $COUNT -gt 600 ]];then
              echo "STOP_FAIL=1" >> $GITHUB_OUTPUT
              exit 1;
             fi;
            sleep 2
          done
          echo "'stop.txt' file not present, teardown network completed..."

          echo "::endgroup::"

          echo "::group::zombie-bite-output-post"
          cat nohup.out
          echo "::endgroup::"
        continue-on-error: true

      - name: checkpoint_spawn
        shell: bash
        run: |
          echo "::group::debug"
          ls ${{ env.ZOMBIE_BITE_BASE_PATH }}/spawn
          ls ${{ env.ZOMBIE_BITE_BASE_PATH }}/spawn-debug
          ls ${{ env.ZOMBIE_BITE_BASE_PATH }}
          echo "::endgroup::"

      - name: zombie_bite_upload_step
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.network }}-try-runtime-snaps-${{ github.sha }}${{ inputs.args }}
          path: |
            ${{ env.ZOMBIE_BITE_BASE_PATH }}/rc-pre.snap
            ${{ env.ZOMBIE_BITE_BASE_PATH }}/ah-pre.snap
            ${{ env.ZOMBIE_BITE_BASE_PATH }}/rc-post.snap
            ${{ env.ZOMBIE_BITE_BASE_PATH }}/ah-post.snap

      - name: zombie_bite_upload_step_logs
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.network }}-post-migration-logs-${{ github.sha }}${{ inputs.args }}
          path: |
            ${{ env.ZOMBIE_BITE_BASE_PATH }}/spawn-debug/collator/collator.log
            ${{ env.ZOMBIE_BITE_BASE_PATH }}/spawn-debug/alice/alice.log
            ${{ env.ZOMBIE_BITE_BASE_PATH }}/spawn-debug/bob/bob.log

      - name: try_runtime_upload_step
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.network }}-post-migration-db-${{ github.sha }}${{ inputs.args }}
          path: |
            ${{ env.ZOMBIE_BITE_BASE_PATH }}/spawn
            ${{ env.ZOMBIE_BITE_BASE_PATH }}/ports.json
            ${{ env.ZOMBIE_BITE_BASE_PATH }}/ready.json
            ${{ env.ZOMBIE_BITE_BASE_PATH }}/migration_done.json

      - name: run_zombie_bite_post
        shell: bash
        run: |
          export PATH=${AHM_BINS}:$PATH
          # remove previous nohup.out
          rm nohup.out || true
          nohup just zb spawn $ZOMBIE_BITE_BASE_PATH post > nohup.out 2>&1 &

      - name: wait_for_network
        uses: ./.github/actions/wait-zb-network-ready

      - name: run_migration_comparison_tests
        shell: bash
        env:
          NETWORK: ${{ inputs.network }}
        run: |
          export PATH=${AHM_BINS}:$PATH

          echo "::group::run-compare-state-tests"
          just compare-state ${{ env.ZOMBIE_BITE_BASE_PATH }} ${{ inputs.network }}
          echo "::endgroup::"

      #
      # TODO: post migration setup
      #

      # - name: run_post_test
      #   shell: bash
      #   env:
      #     RUSTFLAGS: "-A warnings"
      #   run: |
      #     # export path
      #     export PATH=${AHM_BINS}:$PATH

      #     echo "::group::zombie-bite-spawn"
      #     nohup zombie-bite spawn -d $ZOMBIE_BITE_BASE_PATH -s post > nohup-post.out 2>&1 &
      #     ZOMBIE_FILE="$ZOMBIE_BITE_BASE_PATH/spawn/zombie.json"
      #     until [ -f "$ZOMBIE_FILE" ]; do
      #       echo "ZOMBIE_FILE: $ZOMBIE_FILE not present yet"
      #       sleep 2
      #     done
      #     echo "'zombie.json' file present, network spawned... sleeping a few seconds"
      #     echo "::endgroup::"

      #     echo "::group::zombie-bite-output"
      #     cat nohup-post.out
      #     echo "::endgroup::"

      #     echo "sleeping 1 min to bootstrap"
      #     sleep 60

      #     echo "::group::run-post-migration-test"
      #     echo "::endgroup::"

      # - name: zombie_bite_upload_step
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: ${{ inputs.network }}-zb-step-spawn-${{ github.sha }}
      #     path: |
      #       $ZOMBIE_BITE_BASE_PATH/post
