name: Zombie Bite Common

on:
  workflow_call:
    inputs:
      network:
        required: true
        type: string
      sudo-key:
        required: false
        type: string
      runner:
        required: false
        type: string
        default: parity-large-persistent
      rc_runtime_override_url:
        required: false
        type: string
        default: ""
      ah_runtime_override_url:
        required: false
        type: string
        default: ""
      doppelganger_version:
        description: "Tag of the release to use"
        required: false
        type: string
        default: "latest"
      pre_db_run_id:
        description: "start the process from a pre-db"
        required: false
        type: string
        default: ""
      post_db_url:
        description: "Url for download a post-db and start from there"
        required: false
        type: string
        default: ""
      ah_extra_args:
        description: "Override ZOMBIE_BITE_AH_EXTRA_ARGS"
        type: string
        required: false
        default: ""
      rc_extra_args:
        description: "Override ZOMBIE_BITE_RC_EXTRA_ARGS"
        type: string
        required: false
        default: ""


env:
  ZOMBIE_BITE_BASE_PATH: "/tmp/ci"
  AHM_BINS: "/tmp"

jobs:
  run_zombie_bite:
    runs-on: ${{ inputs.runner }}
    container:
      image: ${{ fromJSON(contains(inputs.runner, 'parity') && '"docker.io/paritytech/ci-unified:bullseye-1.88.0-2025-06-27-v202507221446"' || 'null' )}}
      options: ${{ fromJSON(contains(inputs.runner, 'parity') && '"--privileged"' || '"--name pahm"' )}}
    timeout-minutes: ${{ inputs.network == 'kusama' && 180 || 720  }}

    steps:
      - name: Free Disk Space (Ubuntu)
        if: ${{ runner.environment == 'github-hosted' }}
        uses: jlumbroso/free-disk-space@54081f138730dfa15788a46383842cd2f914a1be # v1.3.1
        with:
          tool-cache: false

      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - uses: extractions/setup-just@v2

      - name: Fetch cache
        uses: Swatinem/rust-cache@98c8021b550208e191a6a3145459bfc9fb29c4c0 # v2.8.0
        with:
          shared-key: "ahm-cache"
          cache-on-failure: true # cache allways

      - name: download_doppelganger_binaries
        uses: ./.github/actions/download-doppelganger-binaries
        with:
          destination-path: ${{ env.AHM_BINS }}
          tag-version: ${{ inputs.doppelganger_version }}

      - name: install_deps_if_ubuntu
        if: ${{ contains(inputs.runner, 'ubuntu') }}
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get install protobuf-compiler

      - name: install_zombie_bite
        shell: bash
        run: |
          just install-zombie-bite

      - name: install_pdu
        shell: bash
        run: |
          just install-pdu

      - name: install_try_runtime_cli
        shell: bash
        run: |
          curl -L -o $AHM_BINS/try-runtime https://github.com/paritytech/try-runtime-cli/releases/download/v0.8.0/try-runtime-x86_64-unknown-linux-musl;
          chmod 755 $AHM_BINS/try-runtime;

      - name: build_runtimes
        shell: bash
        # only runs if we don't have a pre-db or post-db
        if: ${{ inputs.pre_db_run_id == '' && inputs.post_db_url == '' }}
        env:
          RUSTFLAGS: "-A warnings"
          NETWORK: ${{ inputs.network }}
          RC_OVERRIDE_URL: ${{ inputs.rc_runtime_override_url }}
          AH_OVERRIDE_URL: ${{ inputs.ah_runtime_override_url }}
        run: |
          if [[ $RC_OVERRIDE_URL == "" || $AH_OVERRIDE_URL == "" ]];then
            just build $NETWORK
          else
            echo "Both RC/AH custom runtime url provided, skipping build step."
          fi;

      - name: create_base_dir
        shell: bash
        run: |
          mkdir $ZOMBIE_BITE_BASE_PATH

      - uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: npm
        shell: bash
        run: |
          npm install
          npm run build

      - name: zombie_bite_step_bite
        id: zombie_bite_step_bite
        # only runs if we don't have a pre-db or post-db
        if: ${{ inputs.pre_db_run_id == '' && inputs.post_db_url == '' }}
        shell: bash
        timeout-minutes: 45
        env:
          NETWORK: ${{ inputs.network }}
          SUDO: ${{ inputs.sudo-key }}
          RC_OVERRIDE_URL: ${{ inputs.rc_runtime_override_url }}
          AH_OVERRIDE_URL: ${{ inputs.ah_runtime_override_url }}
          AH_EXTRA_ARGS_OVERRIDE: ${{ inputs.ah_extra_args }}
          RC_EXTRA_ARGS_OVERRIDE: ${{ inputs.rc_extra_args }}
        run: |
          export PATH=${AHM_BINS}:$PATH

          if [[ $SUDO != "" ]]; then
            export ZOMBIE_SUDO=$SUDO
          else
            echo "no sudo key provided, using default '//Alice'"
          fi

          echo $(pwd)
          RC_OVERRIDE="./runtime_wasm/${NETWORK}_runtime.compact.compressed.wasm"
          AH_OVERRIDE="./runtime_wasm/asset_hub_${NETWORK}_runtime.compact.compressed.wasm"

          echo "::group::custom-overrides"

          if [[ $RC_OVERRIDE_URL != "" ]];then
            RC_OVERRIDE="/tmp/${NETWORK}_custom_runtime.compact.compressed.wasm"
            curl $RC_OVERRIDE_URL -o $RC_OVERRIDE
            echo "runtime downloaded from ${RC_OVERRIDE_URL}"
          else
            echo "No custom runtime for RC"
          fi;

          if [[ $AH_OVERRIDE_URL != "" ]];then
            AH_OVERRIDE="/tmp/${NETWORK}_ah_custom_runtime.compact.compressed.wasm"
            curl $AH_OVERRIDE_URL -o $AH_OVERRIDE
            echo "runtime downloaded from ${AH_OVERRIDE_URL}"
          else
            echo "No custom runtime for AH"
          fi;
          echo "::endgroup::"

          ls $RC_OVERRIDE
          ls $AH_OVERRIDE

          # read .env to use the variable defined there (e.g ZOMBIE_BITE_ALICE_PORT/ZOMBIE_BITE_AH_PORT)
          set -a
          source .env
          set +a

          if [[ $AH_EXTRA_ARGS_OVERRIDE != "" ]];then
            export ZOMBIE_BITE_AH_EXTRA_ARGS=${AH_EXTRA_ARGS_OVERRIDE}
          fi;

          if [[ $RC_EXTRA_ARGS_OVERRIDE != "" ]];then
            export ZOMBIE_BITE_RC_EXTRA_ARGS=${RC_EXTRA_ARGS_OVERRIDE}
          fi;

          export RUST_LOG_RC=$ZOMBIE_BITE_RUST_LOG
          export RUST_LOG_COL=$ZOMBIE_BITE_RUST_LOG_COL

          echo "RUST_LOG_RC: $RUST_LOG_RC"
          echo "RUST_LOG_COL: $RUST_LOG_COL"
          echo "ZOMBIE_BITE_RC_EXTRA_ARGS: ${ZOMBIE_BITE_RC_EXTRA_ARGS}"
          echo "ZOMBIE_BITE_AH_EXTRA_ARGS: ${ZOMBIE_BITE_AH_EXTRA_ARGS}"

          # TODO: add ones we support this in zombie-bite
          # --rc-bite-block $RC_BITE_BLOCK
          zombie-bite bite -r $NETWORK --rc-override $RC_OVERRIDE --ah-override $AH_OVERRIDE -d $ZOMBIE_BITE_BASE_PATH

        continue-on-error: true

      - name: zombie_bite_upload_step
        # only runs if we don't have a pre-db or post-db
        if: ${{ inputs.pre_db_run_id == '' && inputs.post_db_url == '' }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.network }}-pre-migration-db-${{ github.sha }}
          path: |
            ${{ env.ZOMBIE_BITE_BASE_PATH }}/bite
            ${{ env.ZOMBIE_BITE_BASE_PATH }}/ports.json
            ${{ env.ZOMBIE_BITE_BASE_PATH }}/ready.json

      - name: download_pre_migration_db
        # only runs if we have a pre-db
        if: ${{ inputs.pre_db_run_id != '' }}
        uses: ./.github/actions/download-artifact
        env:
          RUN_ID: ${{ inputs.pre_db_run_id }}
          GH_TOKEN: ${{ github.token }}
          NETWORK: ${{ inputs.network }}
        with:
          gh-token: ${{ env.GH_TOKEN }}
          destination-path: ${{ env.ZOMBIE_BITE_BASE_PATH }}
          run-id: ${{ env.RUN_ID }}
          name-pattern: "${{ env.NETWORK }}-pre-migration-db-*,${{env.NETWORK}}-zb-step-bite-*"

      - name: checkpoint_bite
        # only runs if we don't have a post-db
        if: ${{ inputs.post_db_url == '' }}
        shell: bash
        env:
          RUN_ID: ${{ inputs.pre_db_run_id }}
          RUNNER: ${{ inputs.runner }}
        run: |
          echo "::group::debug"
          ls ${{ env.ZOMBIE_BITE_BASE_PATH }}/bite
          if [[ $RUN_ID == "" ]];then
            ls ${{ env.ZOMBIE_BITE_BASE_PATH }}/bite-debug
          fi;
          if [[ $RUNNER =~ "parity" ]];then
            ls /tmp/*
          fi;
          echo "::endgroup::"

      - name: run_zombie_bite_spawn
        # only runs if we don't have a post-db
        if: ${{ inputs.post_db_url == '' }}
        shell: bash
        run: |
          export PATH=${AHM_BINS}:$PATH
          # remove previous nohup.out
          rm nohup.out || true
          nohup zombie-bite spawn -d $ZOMBIE_BITE_BASE_PATH > $ZOMBIE_BITE_BASE_PATH/nohup.out 2>&1 &

      - name: wait_for_network
        # only runs if we don't have a post-db
        if: ${{ inputs.post_db_url == '' }}
        id: wait_for_network
        uses: ./.github/actions/wait-zb-network-ready
        with:
          log-file: ${{ env.ZOMBIE_BITE_BASE_PATH }}/nohup.out
        continue-on-error: true

      - name: wait_for_nodes
        # only runs if we don't have a post-db
        if: ${{ inputs.post_db_url == '' }}
        id: wait_for_nodes
        shell: bash
        env:
          NETWORK: ${{ inputs.network }}
          TS_LOG_CONSOLE: true
          TS_LOG_LEVEL: debug
        run: |
          # Wait for nodes to come online
          just zb wait-for-nodes $ZOMBIE_BITE_BASE_PATH
        continue-on-error: true

      - name: upload_logs_on_failure
        if: steps.wait_for_nodes.outcome == 'failure' || steps.wait_for_network.outcome == 'failure'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.network }}-spawn-failure-logs-${{ github.sha }}
          path: |
            ${{ env.ZOMBIE_BITE_BASE_PATH }}/spawn/collator/collator.log
            ${{ env.ZOMBIE_BITE_BASE_PATH }}/spawn/alice/alice.log
            ${{ env.ZOMBIE_BITE_BASE_PATH }}/spawn/bob/bob.log
            ${{ env.ZOMBIE_BITE_BASE_PATH }}/nohup.out

      - name: early_exit_if_spawn_fail
        if: steps.wait_for_nodes.outcome == 'failure'
        shell: bash
        run: exit 1

      - name: run_migration
        # only runs if we don't have a post-db
        if: ${{ inputs.post_db_url == '' }}
        id: zombie_bite_step_spawn_and_run_migration
        shell: bash
        env:
          NETWORK: ${{ inputs.network }}
          PRE_DB_RUN_ID: ${{ inputs.pre_db_run_id }}
          TS_LOG_CONSOLE: true
          TS_LOG_LEVEL: debug
        run: |
          export PATH=${AHM_BINS}:$PATH

          ALICE_PORT=$(jq -r .alice_port ${ZOMBIE_BITE_BASE_PATH}/ports.json)
          COL_PORT=$(jq -r .collator_port ${ZOMBIE_BITE_BASE_PATH}/ports.json)

          echo "::group::run-migration"
          # Start migration snapshot monitoring (polls for completion and takes all 4 snapshots)
          echo "Starting migration snapshot monitoring in background..."
          nohup node dist/zombie-bite-scripts/migration_snapshot.js $ZOMBIE_BITE_BASE_PATH $NETWORK monitOnly 2>&1 | tee -a migration_snapshot.log &
          SNAPSHOT_PID=$!

          # Schedule the migration
          node dist/zombie-bite-scripts/migration_shedule_migration.js $ALICE_PORT

          # Wait for snapshot process to complete (polls for MigrationDone, scans blocks, takes snapshots)
          echo "Waiting for migration to complete and snapshots to finish..."
          wait $SNAPSHOT_PID || echo "Snapshot process already completed"

          echo "::endgroup::"

          echo "::group::zombie-bite-stop"
          STOP_FILE="${ZOMBIE_BITE_BASE_PATH}/stop.txt"
          echo "creating file ${STOP_FILE}"

          # signal stop network
          touch ${STOP_FILE}

          # wait until finishing packaging by checking the stop.txt existence
          COUNT=0
          until [ ! -f "$STOP_FILE" ]; do
            echo "STOP_FILE: $STOP_FILE still present"
            COUNT=$((COUNT +1))
             if [[ $COUNT -gt 600 ]];then
              echo "STOP_FAIL=1" >> $GITHUB_OUTPUT
              exit 1;
             fi;
            sleep 2
          done
          echo "'stop.txt' file not present, teardown network completed..."

          echo "::endgroup::"

          echo "::group::zombie-bite-output-post"
          cat migration_snapshot.log
          echo "::endgroup::"
        continue-on-error: true

      - name: checkpoint_spawn
        # only runs if we don't have a post-db
        if: ${{ inputs.post_db_url == '' }}
        shell: bash
        run: |
          echo "::group::debug"
          ls ${{ env.ZOMBIE_BITE_BASE_PATH }}/spawn
          ls ${{ env.ZOMBIE_BITE_BASE_PATH }}/spawn-debug
          ls ${{ env.ZOMBIE_BITE_BASE_PATH }}
          echo "::endgroup::"

      - name: zombie_bite_upload_step_logs
        # only runs if we don't have a post-db
        if: ${{ inputs.post_db_url == '' }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.network }}-post-migration-logs-${{ github.sha }}
          path: |
            ${{ env.ZOMBIE_BITE_BASE_PATH }}/spawn-debug/collator/collator.log
            ${{ env.ZOMBIE_BITE_BASE_PATH }}/spawn-debug/alice/alice.log
            ${{ env.ZOMBIE_BITE_BASE_PATH }}/spawn-debug/bob/bob.log

      - name: zombie_bite_upload_step
        # only runs if we don't have a post-db
        if: ${{ inputs.post_db_url == '' }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.network }}-post-migration-db-${{ github.sha }}
          path: |
            ${{ env.ZOMBIE_BITE_BASE_PATH }}/spawn
            ${{ env.ZOMBIE_BITE_BASE_PATH }}/ports.json
            ${{ env.ZOMBIE_BITE_BASE_PATH }}/ready.json
            ${{ env.ZOMBIE_BITE_BASE_PATH }}/migration_done.json

      - name: download_post_migration_db
        # only runs if we have a post-db
        if: ${{ inputs.post_db_url != '' }}
        uses: ./.github/actions/download-post-migration-db
        env:
          ARTIFACT_URL: ${{ inputs.post_db_url }}
          GH_TOKEN: ${{ github.token }}
        with:
          destination-path: ${{ env.ZOMBIE_BITE_BASE_PATH }}
          artifact-url: ${{ env.ARTIFACT_URL }}

      - name: run_zombie_bite_post
        shell: bash
        run: |
          export PATH=${AHM_BINS}:$PATH
          # remove previous nohup.out
          rm nohup.out || true
          nohup just zb spawn $ZOMBIE_BITE_BASE_PATH post > $ZOMBIE_BITE_BASE_PATH/nohup.out 2>&1 &

      - name: wait_for_network
        id: wait_for_network_post
        uses: ./.github/actions/wait-zb-network-ready
        with:
          log-file: ${{ env.ZOMBIE_BITE_BASE_PATH }}/nohup.out
        continue-on-error: true

      - name: upload_on_fail
        if: steps.wait_for_network_post.outcome == 'failure'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.network }}-spawn-post-failure-logs-${{ github.sha }}
          path: |
            ${{ env.ZOMBIE_BITE_BASE_PATH }}/nohup.out

      - name: take_try_runtime_snaps
        shell: bash
        env:
          NETWORK: ${{ inputs.network }}
          TS_LOG_CONSOLE: true
          TS_LOG_LEVEL: debug
        run: |
          export PATH=${AHM_BINS}:$PATH
          node dist/zombie-bite-scripts/migration_snapshot.js $ZOMBIE_BITE_BASE_PATH $NETWORK
        continue-on-error: true

      - name: try_runtime_upload_step_snapshots
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.network }}-try-runtime-snaps-${{ github.sha }}
          path: |
            ${{ env.ZOMBIE_BITE_BASE_PATH }}/${{ inputs.network }}-rc-pre.snap
            ${{ env.ZOMBIE_BITE_BASE_PATH }}/${{ inputs.network }}-ah-pre.snap
            ${{ env.ZOMBIE_BITE_BASE_PATH }}/${{ inputs.network }}-rc-post.snap
            ${{ env.ZOMBIE_BITE_BASE_PATH }}/${{ inputs.network }}-ah-post.snap
            ${{ env.ZOMBIE_BITE_BASE_PATH }}/migration_snapshot_info.json
            ${{ env.ZOMBIE_BITE_BASE_PATH }}/migration_snapshot_done.txt
            ${{ env.ZOMBIE_BITE_BASE_PATH }}/migration_snapshot.log

      - name: pdu_run
        id: pdu_run
        shell: bash
        env:
          NETWORK: ${{ inputs.network }}
        run: |
          ALICE_PORT=$(jq -r .alice_port ${ZOMBIE_BITE_BASE_PATH}/ports.json)
          COL_PORT=$(jq -r .collator_port ${ZOMBIE_BITE_BASE_PATH}/ports.json)

          echo "::group::pdu-pre-rc"
          pdu info --snap ${{ env.ZOMBIE_BITE_BASE_PATH }}/${{ inputs.network }}-rc-pre.snap --rpc ws://localhost:${ALICE_PORT}
          echo "::endgroup::"

          echo "::group::pdu-pre-ah"
          pdu info --snap ${{ env.ZOMBIE_BITE_BASE_PATH }}/${{ inputs.network }}-ah-pre.snap --rpc ws://localhost:${COL_PORT}
          echo "::endgroup::"

          echo "::group::pdu-post-rc"
          pdu info --snap ${{ env.ZOMBIE_BITE_BASE_PATH }}/${{ inputs.network }}-rc-post.snap --rpc ws://localhost:${ALICE_PORT}
          echo "::endgroup::"

          echo "::group::pdu-post-ah"
          pdu info --snap ${{ env.ZOMBIE_BITE_BASE_PATH }}/${{ inputs.network }}-ah-post.snap --rpc ws://localhost:${COL_PORT}
          echo "::endgroup::"
        continue-on-error: true

      - name: try_runtime_rust_test
        id: try_runtime_rust_test
        shell: bash
        env:
          NETWORK: ${{ inputs.network }}
        run: |
          export PATH=${AHM_BINS}:$PATH
          just ahm rust-test $NETWORK $ZOMBIE_BITE_BASE_PATH
        continue-on-error: true

      - name: ts_comparison_tests
        id: ts_comparison_tests
        shell: bash
        env:
          NETWORK: ${{ inputs.network }}
        run: |
          export PATH=${AHM_BINS}:$PATH

          echo "::group::run-compare-state-tests"
          just compare-state ${{ env.ZOMBIE_BITE_BASE_PATH }} ${{ inputs.network }}
          echo "::endgroup::"
        continue-on-error: true

      # PET
      - name: install_pet_deps
        shell: bash
        run: |
          npm install -g yarn
          yarn install

      - name: get_current_block_number
        shell: bash
        run: |
          COL_PORT=$(jq -r .collator_port ${ZOMBIE_BITE_BASE_PATH}/ports.json)
          echo "::group::get-current-block-number"
          echo "Getting current block from http://localhost:${COL_PORT}"
          # Get current block number using JSON-RPC
          BLOCK_NUMBER=$(curl -s -H "Content-Type: application/json" -d '{"id":1,"jsonrpc":"2.0","method":"chain_getHeader","params":[]}' http://localhost:${COL_PORT} | jq -r '.result.number')

          if [ -z "$BLOCK_NUMBER" ] || [ "$BLOCK_NUMBER" = "null" ]; then
            echo "Failed to get block number from endpoint"
            exit 1
          fi

          # Convert from hex to decimal
          BLOCK_NUMBER_DECIMAL=$((BLOCK_NUMBER))
          echo "Current block number: $BLOCK_NUMBER_DECIMAL"
          echo "ASSETHUB_BLOCK_NUMBER=$BLOCK_NUMBER_DECIMAL" >> $GITHUB_ENV
          echo "::endgroup::"

      - name: run_polkadot_ecosystem_tests
        id: run_polkadot_ecosystem_tests
        timeout-minutes: 60
        shell: bash
        env:
          ASSETHUB_BLOCK_NUMBER: ${{ env.ASSETHUB_BLOCK_NUMBER }}
          NETWORK: ${{ inputs.network }}
        run: |
          COL_PORT=$(jq -r .collator_port ${ZOMBIE_BITE_BASE_PATH}/ports.json)
          echo "::group::run-polkadot-ecosystem-tests"

          # Set up environment variables for the just command
          export ASSETHUB${NETWORK^^}_ENDPOINT="ws://localhost:${COL_PORT}"
          export ASSETHUB${NETWORK^^}_BLOCK_NUMBER=$ASSETHUB_BLOCK_NUMBER

          # Sleep before running tests - running them immediately after the network has been spun up
          # can lead to missing data in the `chopsticks` node, and false negatives.
          echo "Sleeping for 90 seconds before running tests..."
          sleep 90

          # Run E2E tests using the just command
          just e2e-tests ${{ inputs.network }}

          echo "::endgroup::"
        continue-on-error: true

      - name: workflow_summary
        if: always()
        shell: bash
        env:
          NETWORK: ${{ inputs.network }}
          AH_EXTRA_ARGS_OVERRIDE: ${{ inputs.ah_extra_args }}
          RC_EXTRA_ARGS_OVERRIDE: ${{ inputs.rc_extra_args }}
        run: |
          echo "## 🧟 Zombie Bite Summary for ${{ inputs.network }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Test Suite | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|------------|--------|" >> $GITHUB_STEP_SUMMARY

          # Migration status
          if [[ "${{ steps.zombie_bite_step_spawn_and_run_migration.outcome }}" == "success" ]]; then
            echo "| 🔄 Migration | ✅ Success |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| 🔄 Migration | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
          fi

          # Rust tests status
          if [[ "${{ steps.try_runtime_rust_test.outcome }}" == "success" ]]; then
            echo "| 🦀 Rust Tests | ✅ Success |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| 🦀 Rust Tests | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
          fi

          # TS comparison tests status
          if [[ "${{ steps.ts_comparison_tests.outcome }}" == "success" ]]; then
            echo "| 📊 TS Comparison | ✅ Success |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| 📊 TS Comparison | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
          fi

          # PET tests status
          if [[ "${{ steps.run_polkadot_ecosystem_tests.outcome }}" == "success" ]]; then
            echo "| 🧪 PET Tests | ✅ Success |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| 🧪 PET Tests | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Network:** ${{ inputs.network }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Run:** ${{ github.run_id }}" >> $GITHUB_STEP_SUMMARY

          # Migration stats (AH side)
          if [[ "${{ steps.zombie_bite_step_spawn_and_run_migration.outcome }}" == "success" ]]; then
            # read env
            set -a
            source .env
            set +a

            if [[ $AH_EXTRA_ARGS_OVERRIDE != "" ]];then
              export ZOMBIE_BITE_AH_EXTRA_ARGS=$AH_EXTRA_ARGS_OVERRIDE
            fi;

            if [[ $RC_EXTRA_ARGS_OVERRIDE != "" ]];then
              export ZOMBIE_BITE_RC_EXTRA_ARGS=$RC_EXTRA_ARGS_OVERRIDE
            else
              export ZOMBIE_BITE_RC_EXTRA_ARGS=""
            fi;

            COL_PORT=$(jq -r .collator_port ${ZOMBIE_BITE_BASE_PATH}/ports.json)
            ENDPOINT="http://localhost:${COL_PORT}"

            # ahMigrator MigrationStartBlock -> 0x05c2e33bcfb87e4551d7473580732778b81f4b5a48505b6253fef1a49a0fd981
            START_BLOCK_ENCODED=$(curl -s -H "Content-Type: application/json" -d '{"id":1,"jsonrpc":"2.0","method":"state_getStorage","params":["0x05c2e33bcfb87e4551d7473580732778b81f4b5a48505b6253fef1a49a0fd981"]}' $ENDPOINT | jq -r .result)
            # ahMigrator MigrationEndBlock -> 0x05c2e33bcfb87e4551d747358073277895d4b7aef7ef7b293e9e54e565c2e2d6
            END_BLOCK_ENCODED=$(curl -s -H "Content-Type: application/json" -d '{"id":1,"jsonrpc":"2.0","method":"state_getStorage","params":["0x05c2e33bcfb87e4551d747358073277895d4b7aef7ef7b293e9e54e565c2e2d6"]}' $ENDPOINT | jq -r .result)

            # decode
            START_BLOCK=$(echo $((0x$(echo $START_BLOCK_ENCODED | cut -c 3- | tac -rs .. | tr -d '\n'))))
            END_BLOCK=$(echo $((0x$(echo $END_BLOCK_ENCODED | cut -c 3- | tac -rs .. | tr -d '\n'))))

            # get block hash
            START_BLOCK_HASH=$(curl -s -H "Content-Type: application/json" -d '{"id":1,"jsonrpc":"2.0","method":"chain_getBlockHash","params":['$START_BLOCK']}' $ENDPOINT | jq -r .result)
            END_BLOCK_HASH=$(curl -s -H "Content-Type: application/json" -d '{"id":1,"jsonrpc":"2.0","method":"chain_getBlockHash","params":['$END_BLOCK']}' $ENDPOINT | jq -r .result)

            # extract ts from the blocks
            TS_NOW_WELL_KNOW_KEY="0xf0c365c3cf59d671eb72da0e7a4113c49f1f0515f462cdcf84e0f1d6045dfcbb"
            TS_START_BLOCK_ENCODED=$(curl -s -H "Content-Type: application/json" -d '{"id":1,"jsonrpc":"2.0","method":"state_getStorage","params":["'$TS_NOW_WELL_KNOW_KEY'","'$START_BLOCK_HASH'"]}' $ENDPOINT | jq -r '.result')
            TS_END_BLOCK_ENCODED=$(curl -s -H "Content-Type: application/json" -d '{"id":1,"jsonrpc":"2.0","method":"state_getStorage","params":["'$TS_NOW_WELL_KNOW_KEY'","'$END_BLOCK_HASH'"]}' $ENDPOINT | jq -r '.result')

            # decode
            TS_START_BLOCK=$(echo $((0x$(echo $TS_START_BLOCK_ENCODED | cut -c 3- | tac -rs .. | tr -d '\n'))))
            TS_END_BLOCK=$(echo $((0x$(echo $TS_END_BLOCK_ENCODED | cut -c 3- | tac -rs .. | tr -d '\n'))))

            TOTAL_BLOCKS=$((END_BLOCK-START_BLOCK))
            TOTAL_TIME_MS=$((TS_END_BLOCK-TS_START_BLOCK))
            BLOCK_MS=$((TOTAL_TIME_MS/TOTAL_BLOCKS))
            echo "📋 **AH migration stats**:" >> $GITHUB_STEP_SUMMARY
            echo " ⚙️ **AH Args**: $ZOMBIE_BITE_AH_EXTRA_ARGS" >> $GITHUB_STEP_SUMMARY
            echo " ⚙️ **RC Args**: $ZOMBIE_BITE_RC_EXTRA_ARGS" >> $GITHUB_STEP_SUMMARY
            echo " 🧱 **AH Blocks**: [$START_BLOCK..$END_BLOCK ] $TOTAL_BLOCKS blocks" >> $GITHUB_STEP_SUMMARY
            echo " ⏱  **AH Total time (ms)**: [$TS_START_BLOCK..$TS_END_BLOCK ] ${TOTAL_TIME_MS} ms" >> $GITHUB_STEP_SUMMARY
            echo " 📌 **AH average time per block **: ${BLOCK_MS} ms/b" >> $GITHUB_STEP_SUMMARY
          fi
