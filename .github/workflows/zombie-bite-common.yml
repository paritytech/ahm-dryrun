name: Zombie Bite Common

on:
  workflow_call:
    inputs:
      network:
        required: true
        type: string
      sudo-key:
        required: false
        type: string
      runner:
        required: false
        type: string
        default: parity-large-persistent
      args:
        required: false
        type: string
        default: ""
      rc_runtime_override_url:
        required: false
        type: string
        default: ""

env:
  ZOMBIE_BITE_BASE_PATH: "/tmp/ci"
  AHM_BINS: "/tmp"

jobs:
  run_zombie_bite:
    runs-on: ${{ inputs.runner }}
    container:
      image: docker.io/paritytech/ci-unified:bullseye-1.88.0-2025-06-27-v202507221446
    timeout-minutes: ${{ inputs.runner == 'kusama' && 180 || 720  }}

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - uses: extractions/setup-just@v2

      - name: Fetch cache
        uses: Swatinem/rust-cache@98c8021b550208e191a6a3145459bfc9fb29c4c0 # v2.8.0
        with:
          shared-key: "ahm-cache"
          cache-on-failure: true # cache allways

      - name: download_doppelganger_binaries
        uses: ./.github/actions/download-doppelganger-binaries
        with:
          destination-path: ${{ env.AHM_BINS }}

      - name: install_zombie_bite
        shell: bash
        run: |
          just install-zombie-bite

      - name: install_try_runtime_cli
        shell: bash
        run: |
          just install-try-runtime

      - name: build_runtimes
        shell: bash
        env:
          RUSTFLAGS: "-A warnings"
          NETWORK: ${{ inputs.network }}
        run: |
          just build $NETWORK

      - name: create_base_dir
        shell: bash
        run: |
          mkdir $ZOMBIE_BITE_BASE_PATH

      - uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: npm
        shell: bash
        run: |
          npm install
          npm run build

      - name: zombie_bite_step_bite
        id: zombie_bite_step_bite
        shell: bash
        env:
          NETWORK: ${{ inputs.network }}
          SUDO: ${{ inputs.sudo-key }}
          RC_OVERRIDE_URL: ${{ inputs.rc_runtime_override_url }}
        run: |
          export PATH=${AHM_BINS}:$PATH

          if [[ $SUDO != "" ]]; then
            export ZOMBIE_SUDO=$SUDO
          else
            echo "no sudo key provided, using default '//Alice'"
          fi

          echo $(pwd)
          RC_OVERRIDE="./runtime_wasm/${NETWORK}_runtime.compact.compressed.wasm"
          AH_OVERRIDE="./runtime_wasm/asset_hub_${NETWORK}_runtime.compact.compressed.wasm"

          if [[ $RC_OVERRIDE != "" ]];then
            RC_OVERRIDE="/tmp/${NETWORK}_custom_runtime.compact.compressed.wasm"
            curl $RC_OVERRIDE_URL -o "/tmp/${NETWORK}_custom_runtime.compact.compressed.wasm"
            echo "runtime downloaded from ${RC_OVERRIDE_URL}"
          fi;

          ls $RC_OVERRIDE
          ls $AH_OVERRIDE

          # read .env to use the variable defined there (e.g ZOMBIE_BITE_ALICE_PORT/ZOMBIE_BITE_AH_PORT)
          set -a
          source .env
          set +a

          echo "::group::find-rc-block-bite"
          RC_BITE_BLOCK=$(just find-rc-block-bite $NETWORK)
          echo "Found RC block to bite: $RC_BITE_BLOCK"
          echo "::endgroup::"

          # TODO: add ones we support this in zombie-bite
          # --rc-bite-block $RC_BITE_BLOCK
          zombie-bite bite -r $NETWORK --rc-override $RC_OVERRIDE --ah-override $AH_OVERRIDE -d $ZOMBIE_BITE_BASE_PATH


        continue-on-error: true

      - name: zombie_bite_upload_step
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.network }}-pre-migration-db-${{ github.sha }}${{ inputs.args }}
          path: |
            ${{ env.ZOMBIE_BITE_BASE_PATH }}/bite
            ${{ env.ZOMBIE_BITE_BASE_PATH }}/ports.json
            ${{ env.ZOMBIE_BITE_BASE_PATH }}/ready.json

      - name: checkpoint_bite
        shell: bash
        run: |
          echo "::group::debug"
          ls /tmp/*
          ls ${{ env.ZOMBIE_BITE_BASE_PATH }}/bite
          ls ${{ env.ZOMBIE_BITE_BASE_PATH }}/bite-debug
          echo "::endgroup::"


      - name: run_zombie_bite_spawn
        shell: bash
        run: |
          export PATH=${AHM_BINS}:$PATH
          # remove previous nohup.out
          rm nohup.out || true
          nohup zombie-bite spawn -d $ZOMBIE_BITE_BASE_PATH > nohup.out 2>&1 &

      - name: wait_for_network
        uses: ./.github/actions/wait-zb-network-ready

      - name: try_runtime_pre
        shell: bash
        env:
          NETWORK: ${{ inputs.network }}
          TS_LOG_CONSOLE: true
          TS_LOG_LEVEL: debug
        run: |
          export PATH=${AHM_BINS}:$PATH

          ALICE_PORT=$(jq -r .alice_port ${ZOMBIE_BITE_BASE_PATH}/ports.json)
          COL_PORT=$(jq -r .collator_port ${ZOMBIE_BITE_BASE_PATH}/ports.json)

          # Wait for nodes to come online
          echo "::group::wait-for-nodes"
          just zb wait-for-nodes $ZOMBIE_BITE_BASE_PATH
          echo "::endgroup::"

          # try-runtime snap pre
          echo "::group::run-try-runtime"
          just zb snapshot $NETWORK $ZOMBIE_BITE_BASE_PATH pre
          echo "::endgroup::"
        continue-on-error: true

      - name: try_runtime_upload_step_pre
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.network }}-try-runtime-snaps-pre-${{ github.sha }}${{ inputs.args }}
          path: |
            ${{ env.ZOMBIE_BITE_BASE_PATH }}/${{ inputs.network }}-rc-pre.snap
            ${{ env.ZOMBIE_BITE_BASE_PATH }}/${{ inputs.network }}-ah-pre.snap

      - name: run_migration
        id: zombie_bite_step_spawn_and_run_migration
        shell: bash
        env:
          NETWORK: ${{ inputs.network }}
          TS_LOG_CONSOLE: true
          TS_LOG_LEVEL: debug
        run: |
          export PATH=${AHM_BINS}:$PATH

          ALICE_PORT=$(jq -r .alice_port ${ZOMBIE_BITE_BASE_PATH}/ports.json)
          COL_PORT=$(jq -r .collator_port ${ZOMBIE_BITE_BASE_PATH}/ports.json)

          # Wait for nodes to come online
          echo "::group::wait-for-nodes"
          just zb wait-for-nodes $ZOMBIE_BITE_BASE_PATH
          echo "::endgroup::"

          echo "::group::run-migration"
          node dist/zombie-bite-scripts/migration_shedule_migration.js $ALICE_PORT
          node dist/zombie-bite-scripts/migration_finished_monitor.js $ZOMBIE_BITE_BASE_PATH $ALICE_PORT $COL_PORT

          echo "::endgroup::"

          # try-runtime snap post
          echo "::group::run-try-runtime"
          just zb snapshot $NETWORK $ZOMBIE_BITE_BASE_PATH post
          echo "::endgroup::"

          echo "::group::zombie-bite-stop"
          STOP_FILE="${ZOMBIE_BITE_BASE_PATH}/stop.txt"
          echo "creating file ${STOP_FILE}"

          # signal stop network
          touch ${STOP_FILE}

          # wait until finishing packaging by checking the stop.txt existence
          COUNT=0
          until [ ! -f "$STOP_FILE" ]; do
            echo "STOP_FILE: $STOP_FILE still present"
            COUNT=$((COUNT +1))
             if [[ $COUNT -gt 600 ]];then
              echo "STOP_FAIL=1" >> $GITHUB_OUTPUT
              exit 1;
             fi;
            sleep 2
          done
          echo "'stop.txt' file not present, teardown network completed..."

          echo "::endgroup::"

          echo "::group::zombie-bite-output-post"
          cat nohup.out
          echo "::endgroup::"
        continue-on-error: true

      - name: checkpoint_spawn
        shell: bash
        run: |
          echo "::group::debug"
          ls ${{ env.ZOMBIE_BITE_BASE_PATH }}/spawn
          ls ${{ env.ZOMBIE_BITE_BASE_PATH }}/spawn-debug
          ls ${{ env.ZOMBIE_BITE_BASE_PATH }}
          echo "::endgroup::"

      - name: try_runtime_upload_step_post
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.network }}-try-runtime-snaps-post-${{ github.sha }}${{ inputs.args }}
          path: |
            ${{ env.ZOMBIE_BITE_BASE_PATH }}/${{ inputs.network }}-rc-post.snap
            ${{ env.ZOMBIE_BITE_BASE_PATH }}/${{ inputs.network }}-ah-post.snap

      - name: zombie_bite_upload_step_logs
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.network }}-post-migration-logs-${{ github.sha }}${{ inputs.args }}
          path: |
            ${{ env.ZOMBIE_BITE_BASE_PATH }}/spawn-debug/collator/collator.log
            ${{ env.ZOMBIE_BITE_BASE_PATH }}/spawn-debug/alice/alice.log
            ${{ env.ZOMBIE_BITE_BASE_PATH }}/spawn-debug/bob/bob.log

      - name: zombie_bite_upload_step
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.network }}-post-migration-db-${{ github.sha }}${{ inputs.args }}
          path: |
            ${{ env.ZOMBIE_BITE_BASE_PATH }}/spawn
            ${{ env.ZOMBIE_BITE_BASE_PATH }}/ports.json
            ${{ env.ZOMBIE_BITE_BASE_PATH }}/ready.json
            ${{ env.ZOMBIE_BITE_BASE_PATH }}/migration_done.json

      - name: try_runtime_rust_test
        id: try_runtime_rust_test
        shell: bash
        env:
          NETWORK: ${{ inputs.network }}
        run: |
          export PATH=${AHM_BINS}:$PATH
          just ahm rust-test $NETWORK $ZOMBIE_BITE_BASE_PATH
        continue-on-error: true

      - name: run_zombie_bite_post
        shell: bash
        run: |
          export PATH=${AHM_BINS}:$PATH
          # remove previous nohup.out
          rm nohup.out || true
          nohup just zb spawn $ZOMBIE_BITE_BASE_PATH post > nohup.out 2>&1 &

      - name: wait_for_network
        uses: ./.github/actions/wait-zb-network-ready

      - name: ts_comparison_tests
        id: ts_comparison_tests
        shell: bash
        env:
          NETWORK: ${{ inputs.network }}
        run: |
          export PATH=${AHM_BINS}:$PATH

          echo "::group::run-compare-state-tests"
          just compare-state ${{ env.ZOMBIE_BITE_BASE_PATH }} ${{ inputs.network }}
          echo "::endgroup::"
        continue-on-error: true

      # PET
      - name: install_pet_deps
        shell: bash
        run: |
          npm install -g yarn
          yarn install

      - name: get_current_block_number
        shell: bash
        run: |
          COL_PORT=$(jq -r .collator_port ${ZOMBIE_BITE_BASE_PATH}/ports.json)
          echo "::group::get-current-block-number"
          echo "Getting current block from http://127.0.0.1:${COL_PORT}"
          # Get current block number using JSON-RPC
          BLOCK_NUMBER=$(curl -s -H "Content-Type: application/json" -d '{"id":1,"jsonrpc":"2.0","method":"chain_getHeader","params":[]}' http://127.0.0.1:${COL_PORT} | jq -r '.result.number')

          if [ -z "$BLOCK_NUMBER" ] || [ "$BLOCK_NUMBER" = "null" ]; then
            echo "Failed to get block number from endpoint"
            exit 1
          fi

          # Convert from hex to decimal
          BLOCK_NUMBER_DECIMAL=$((BLOCK_NUMBER))
          echo "Current block number: $BLOCK_NUMBER_DECIMAL"
          echo "ASSETHUB_BLOCK_NUMBER=$BLOCK_NUMBER_DECIMAL" >> $GITHUB_ENV
          echo "::endgroup::"

      - name: run_polkadot_ecosystem_tests
        id: run_polkadot_ecosystem_tests
        timeout-minutes: 60
        shell: bash
        env:
          ASSETHUB_BLOCK_NUMBER: ${{ env.ASSETHUB_BLOCK_NUMBER }}
          NETWORK: ${{ inputs.network }}
        run: |
          COL_PORT=$(jq -r .collator_port ${ZOMBIE_BITE_BASE_PATH}/ports.json)
          echo "::group::run-polkadot-ecosystem-tests"
          cd polkadot-ecosystem-tests

          # Install dependencies
          yarn install

          # export endpoint
          export ASSETHUB${NETWORK}_ENDPOINT="ws://127.0.0.1:${COL_PORT}"
          export ASSETHUB${NETWORK}_BLOCK_NUMBER=ASSETHUB_BLOCK_NUMBER

          # Run the assetHubKusama tests
          echo "Running tests with:"
          echo "  ASSETHUB${NETWORK}_ENDPOINT=$ASSETHUB${NETWORK}_ENDPOINT"
          echo "  ASSETHUB${NETWORK}_BLOCK_NUMBER=$ASSETHUB${NETWORK}_BLOCK_NUMBER"

          yarn test assetHubKusama
          echo "::endgroup::"
        continue-on-error: true

      - name: workflow_summary
        if: always()
        shell: bash
        env:
          NETWORK: ${{ inputs.network }}
        run: |
          echo "## 🧟 Zombie Bite Summary for ${{ inputs.network }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Test Suite | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|------------|--------|" >> $GITHUB_STEP_SUMMARY

          # Migration status
          if [[ "${{ steps.zombie_bite_step_spawn_and_run_migration.outcome }}" == "success" ]]; then
            echo "| 🔄 Migration | ✅ Success |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| 🔄 Migration | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
          fi

          # Rust tests status
          if [[ "${{ steps.try_runtime_rust_test.outcome }}" == "success" ]]; then
            echo "| 🦀 Rust Tests | ✅ Success |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| 🦀 Rust Tests | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
          fi

          # TS comparison tests status
          if [[ "${{ steps.ts_comparison_tests.outcome }}" == "success" ]]; then
            echo "| 📊 TS Comparison | ✅ Success |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| 📊 TS Comparison | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
          fi

          # PET tests status
          if [[ "${{ steps.run_polkadot_ecosystem_tests.outcome }}" == "success" ]]; then
            echo "| 🧪 PET Tests | ✅ Success |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| 🧪 PET Tests | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Network:** ${{ inputs.network }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Run:** ${{ github.run_id }}" >> $GITHUB_STEP_SUMMARY

