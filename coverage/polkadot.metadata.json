{
  "V14": {
    "types": {
      "types": [
        {
          "id": 0,
          "type": {
            "path": [
              "sp_core",
              "crypto",
              "AccountId32"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 1,
                    "typeName": "[u8; 32]"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 1,
          "type": {
            "def": {
              "array": {
                "len": 32,
                "type": 2
              }
            }
          }
        },
        {
          "id": 2,
          "type": {
            "def": {
              "primitive": "u8"
            }
          }
        },
        {
          "id": 3,
          "type": {
            "path": [
              "frame_system",
              "AccountInfo"
            ],
            "params": [
              {
                "name": "Nonce",
                "type": 4
              },
              {
                "name": "AccountData",
                "type": 5
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "nonce",
                    "type": 4,
                    "typeName": "Nonce"
                  },
                  {
                    "name": "consumers",
                    "type": 4,
                    "typeName": "RefCount"
                  },
                  {
                    "name": "providers",
                    "type": 4,
                    "typeName": "RefCount"
                  },
                  {
                    "name": "sufficients",
                    "type": 4,
                    "typeName": "RefCount"
                  },
                  {
                    "name": "data",
                    "type": 5,
                    "typeName": "AccountData"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 4,
          "type": {
            "def": {
              "primitive": "u32"
            }
          }
        },
        {
          "id": 5,
          "type": {
            "path": [
              "pallet_balances",
              "types",
              "AccountData"
            ],
            "params": [
              {
                "name": "Balance",
                "type": 6
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "free",
                    "type": 6,
                    "typeName": "Balance"
                  },
                  {
                    "name": "reserved",
                    "type": 6,
                    "typeName": "Balance"
                  },
                  {
                    "name": "frozen",
                    "type": 6,
                    "typeName": "Balance"
                  },
                  {
                    "name": "flags",
                    "type": 7,
                    "typeName": "ExtraFlags"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 6,
          "type": {
            "def": {
              "primitive": "u128"
            }
          }
        },
        {
          "id": 7,
          "type": {
            "path": [
              "pallet_balances",
              "types",
              "ExtraFlags"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 6,
                    "typeName": "u128"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 8,
          "type": {
            "def": {
              "primitive": "bool"
            }
          }
        },
        {
          "id": 9,
          "type": {
            "path": [
              "frame_support",
              "dispatch",
              "PerDispatchClass"
            ],
            "params": [
              {
                "name": "T",
                "type": 10
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "normal",
                    "type": 10,
                    "typeName": "T"
                  },
                  {
                    "name": "operational",
                    "type": 10,
                    "typeName": "T"
                  },
                  {
                    "name": "mandatory",
                    "type": 10,
                    "typeName": "T"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 10,
          "type": {
            "path": [
              "sp_weights",
              "weight_v2",
              "Weight"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "ref_time",
                    "type": 11,
                    "typeName": "u64"
                  },
                  {
                    "name": "proof_size",
                    "type": 11,
                    "typeName": "u64"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 11,
          "type": {
            "def": {
              "compact": {
                "type": 12
              }
            }
          }
        },
        {
          "id": 12,
          "type": {
            "def": {
              "primitive": "u64"
            }
          }
        },
        {
          "id": 13,
          "type": {
            "path": [
              "primitive_types",
              "H256"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 1,
                    "typeName": "[u8; 32]"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 14,
          "type": {
            "def": {
              "sequence": {
                "type": 2
              }
            }
          }
        },
        {
          "id": 15,
          "type": {
            "path": [
              "sp_runtime",
              "generic",
              "digest",
              "Digest"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "logs",
                    "type": 16,
                    "typeName": "Vec<DigestItem>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 16,
          "type": {
            "def": {
              "sequence": {
                "type": 17
              }
            }
          }
        },
        {
          "id": 17,
          "type": {
            "path": [
              "sp_runtime",
              "generic",
              "digest",
              "DigestItem"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "PreRuntime",
                    "fields": [
                      {
                        "type": 18,
                        "typeName": "ConsensusEngineId"
                      },
                      {
                        "type": 14,
                        "typeName": "Vec<u8>"
                      }
                    ],
                    "index": 6
                  },
                  {
                    "name": "Consensus",
                    "fields": [
                      {
                        "type": 18,
                        "typeName": "ConsensusEngineId"
                      },
                      {
                        "type": 14,
                        "typeName": "Vec<u8>"
                      }
                    ],
                    "index": 4
                  },
                  {
                    "name": "Seal",
                    "fields": [
                      {
                        "type": 18,
                        "typeName": "ConsensusEngineId"
                      },
                      {
                        "type": 14,
                        "typeName": "Vec<u8>"
                      }
                    ],
                    "index": 5
                  },
                  {
                    "name": "Other",
                    "fields": [
                      {
                        "type": 14,
                        "typeName": "Vec<u8>"
                      }
                    ],
                    "index": 0
                  },
                  {
                    "name": "RuntimeEnvironmentUpdated",
                    "index": 8
                  }
                ]
              }
            }
          }
        },
        {
          "id": 18,
          "type": {
            "def": {
              "array": {
                "len": 4,
                "type": 2
              }
            }
          }
        },
        {
          "id": 19,
          "type": {
            "def": {
              "sequence": {
                "type": 20
              }
            }
          }
        },
        {
          "id": 20,
          "type": {
            "path": [
              "frame_system",
              "EventRecord"
            ],
            "params": [
              {
                "name": "E",
                "type": 21
              },
              {
                "name": "T",
                "type": 13
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "phase",
                    "type": 520,
                    "typeName": "Phase"
                  },
                  {
                    "name": "event",
                    "type": 21,
                    "typeName": "E"
                  },
                  {
                    "name": "topics",
                    "type": 103,
                    "typeName": "Vec<T>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 21,
          "type": {
            "path": [
              "polkadot_runtime",
              "RuntimeEvent"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "System",
                    "fields": [
                      {
                        "type": 22,
                        "typeName": "frame_system::Event<Runtime>"
                      }
                    ],
                    "index": 0
                  },
                  {
                    "name": "Scheduler",
                    "fields": [
                      {
                        "type": 31,
                        "typeName": "pallet_scheduler::Event<Runtime>"
                      }
                    ],
                    "index": 1
                  },
                  {
                    "name": "Preimage",
                    "fields": [
                      {
                        "type": 36,
                        "typeName": "pallet_preimage::Event<Runtime>"
                      }
                    ],
                    "index": 10
                  },
                  {
                    "name": "Indices",
                    "fields": [
                      {
                        "type": 37,
                        "typeName": "pallet_indices::Event<Runtime>"
                      }
                    ],
                    "index": 4
                  },
                  {
                    "name": "Balances",
                    "fields": [
                      {
                        "type": 38,
                        "typeName": "pallet_balances::Event<Runtime>"
                      }
                    ],
                    "index": 5
                  },
                  {
                    "name": "TransactionPayment",
                    "fields": [
                      {
                        "type": 40,
                        "typeName": "pallet_transaction_payment::Event<Runtime>"
                      }
                    ],
                    "index": 32
                  },
                  {
                    "name": "Staking",
                    "fields": [
                      {
                        "type": 41,
                        "typeName": "pallet_staking::Event<Runtime>"
                      }
                    ],
                    "index": 7
                  },
                  {
                    "name": "Offences",
                    "fields": [
                      {
                        "type": 47,
                        "typeName": "pallet_offences::Event"
                      }
                    ],
                    "index": 8
                  },
                  {
                    "name": "Session",
                    "fields": [
                      {
                        "type": 49,
                        "typeName": "pallet_session::Event"
                      }
                    ],
                    "index": 9
                  },
                  {
                    "name": "Grandpa",
                    "fields": [
                      {
                        "type": 50,
                        "typeName": "pallet_grandpa::Event"
                      }
                    ],
                    "index": 11
                  },
                  {
                    "name": "Treasury",
                    "fields": [
                      {
                        "type": 54,
                        "typeName": "pallet_treasury::Event<Runtime>"
                      }
                    ],
                    "index": 19
                  },
                  {
                    "name": "ConvictionVoting",
                    "fields": [
                      {
                        "type": 89,
                        "typeName": "pallet_conviction_voting::Event<Runtime>"
                      }
                    ],
                    "index": 20
                  },
                  {
                    "name": "Referenda",
                    "fields": [
                      {
                        "type": 92,
                        "typeName": "pallet_referenda::Event<Runtime>"
                      }
                    ],
                    "index": 21
                  },
                  {
                    "name": "Whitelist",
                    "fields": [
                      {
                        "type": 476,
                        "typeName": "pallet_whitelist::Event<Runtime>"
                      }
                    ],
                    "index": 23
                  },
                  {
                    "name": "Claims",
                    "fields": [
                      {
                        "type": 481,
                        "typeName": "claims::Event<Runtime>"
                      }
                    ],
                    "index": 24
                  },
                  {
                    "name": "Vesting",
                    "fields": [
                      {
                        "type": 482,
                        "typeName": "pallet_vesting::Event<Runtime>"
                      }
                    ],
                    "index": 25
                  },
                  {
                    "name": "Utility",
                    "fields": [
                      {
                        "type": 483,
                        "typeName": "pallet_utility::Event"
                      }
                    ],
                    "index": 26
                  },
                  {
                    "name": "Proxy",
                    "fields": [
                      {
                        "type": 484,
                        "typeName": "pallet_proxy::Event<Runtime>"
                      }
                    ],
                    "index": 29
                  },
                  {
                    "name": "Multisig",
                    "fields": [
                      {
                        "type": 485,
                        "typeName": "pallet_multisig::Event<Runtime>"
                      }
                    ],
                    "index": 30
                  },
                  {
                    "name": "Bounties",
                    "fields": [
                      {
                        "type": 486,
                        "typeName": "pallet_bounties::Event<Runtime>"
                      }
                    ],
                    "index": 34
                  },
                  {
                    "name": "ChildBounties",
                    "fields": [
                      {
                        "type": 487,
                        "typeName": "pallet_child_bounties::Event<Runtime>"
                      }
                    ],
                    "index": 38
                  },
                  {
                    "name": "ElectionProviderMultiPhase",
                    "fields": [
                      {
                        "type": 488,
                        "typeName": "pallet_election_provider_multi_phase::Event<Runtime>"
                      }
                    ],
                    "index": 36
                  },
                  {
                    "name": "VoterList",
                    "fields": [
                      {
                        "type": 492,
                        "typeName": "pallet_bags_list::Event<Runtime, pallet_bags_list::Instance1>"
                      }
                    ],
                    "index": 37
                  },
                  {
                    "name": "NominationPools",
                    "fields": [
                      {
                        "type": 493,
                        "typeName": "pallet_nomination_pools::Event<Runtime>"
                      }
                    ],
                    "index": 39
                  },
                  {
                    "name": "FastUnstake",
                    "fields": [
                      {
                        "type": 494,
                        "typeName": "pallet_fast_unstake::Event<Runtime>"
                      }
                    ],
                    "index": 40
                  },
                  {
                    "name": "DelegatedStaking",
                    "fields": [
                      {
                        "type": 495,
                        "typeName": "pallet_delegated_staking::Event<Runtime>"
                      }
                    ],
                    "index": 41
                  },
                  {
                    "name": "ParaInclusion",
                    "fields": [
                      {
                        "type": 496,
                        "typeName": "parachains_inclusion::Event<Runtime>"
                      }
                    ],
                    "index": 53
                  },
                  {
                    "name": "Paras",
                    "fields": [
                      {
                        "type": 500,
                        "typeName": "parachains_paras::Event"
                      }
                    ],
                    "index": 56
                  },
                  {
                    "name": "Hrmp",
                    "fields": [
                      {
                        "type": 501,
                        "typeName": "parachains_hrmp::Event<Runtime>"
                      }
                    ],
                    "index": 60
                  },
                  {
                    "name": "ParasDisputes",
                    "fields": [
                      {
                        "type": 502,
                        "typeName": "parachains_disputes::Event<Runtime>"
                      }
                    ],
                    "index": 62
                  },
                  {
                    "name": "OnDemand",
                    "fields": [
                      {
                        "type": 505,
                        "typeName": "parachains_on_demand::Event<Runtime>"
                      }
                    ],
                    "index": 64
                  },
                  {
                    "name": "Registrar",
                    "fields": [
                      {
                        "type": 506,
                        "typeName": "paras_registrar::Event<Runtime>"
                      }
                    ],
                    "index": 70
                  },
                  {
                    "name": "Slots",
                    "fields": [
                      {
                        "type": 507,
                        "typeName": "slots::Event<Runtime>"
                      }
                    ],
                    "index": 71
                  },
                  {
                    "name": "Auctions",
                    "fields": [
                      {
                        "type": 508,
                        "typeName": "auctions::Event<Runtime>"
                      }
                    ],
                    "index": 72
                  },
                  {
                    "name": "Crowdloan",
                    "fields": [
                      {
                        "type": 509,
                        "typeName": "crowdloan::Event<Runtime>"
                      }
                    ],
                    "index": 73
                  },
                  {
                    "name": "Coretime",
                    "fields": [
                      {
                        "type": 510,
                        "typeName": "coretime::Event<Runtime>"
                      }
                    ],
                    "index": 74
                  },
                  {
                    "name": "StateTrieMigration",
                    "fields": [
                      {
                        "type": 511,
                        "typeName": "pallet_state_trie_migration::Event<Runtime>"
                      }
                    ],
                    "index": 98
                  },
                  {
                    "name": "XcmPallet",
                    "fields": [
                      {
                        "type": 514,
                        "typeName": "pallet_xcm::Event<Runtime>"
                      }
                    ],
                    "index": 99
                  },
                  {
                    "name": "MessageQueue",
                    "fields": [
                      {
                        "type": 516,
                        "typeName": "pallet_message_queue::Event<Runtime>"
                      }
                    ],
                    "index": 100
                  },
                  {
                    "name": "AssetRate",
                    "fields": [
                      {
                        "type": 518,
                        "typeName": "pallet_asset_rate::Event<Runtime>"
                      }
                    ],
                    "index": 101
                  },
                  {
                    "name": "RcMigrator",
                    "fields": [
                      {
                        "type": 519,
                        "typeName": "pallet_rc_migrator::Event<Runtime>"
                      }
                    ],
                    "index": 255
                  }
                ]
              }
            }
          }
        },
        {
          "id": 22,
          "type": {
            "path": [
              "frame_system",
              "pallet",
              "Event"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "ExtrinsicSuccess",
                    "fields": [
                      {
                        "name": "dispatch_info",
                        "type": 23,
                        "typeName": "DispatchInfo"
                      }
                    ],
                    "index": 0,
                    "docs": [
                      "An extrinsic completed successfully."
                    ]
                  },
                  {
                    "name": "ExtrinsicFailed",
                    "fields": [
                      {
                        "name": "dispatch_error",
                        "type": 26,
                        "typeName": "DispatchError"
                      },
                      {
                        "name": "dispatch_info",
                        "type": 23,
                        "typeName": "DispatchInfo"
                      }
                    ],
                    "index": 1,
                    "docs": [
                      "An extrinsic failed."
                    ]
                  },
                  {
                    "name": "CodeUpdated",
                    "index": 2,
                    "docs": [
                      "`:code` was updated."
                    ]
                  },
                  {
                    "name": "NewAccount",
                    "fields": [
                      {
                        "name": "account",
                        "type": 0,
                        "typeName": "T::AccountId"
                      }
                    ],
                    "index": 3,
                    "docs": [
                      "A new account was created."
                    ]
                  },
                  {
                    "name": "KilledAccount",
                    "fields": [
                      {
                        "name": "account",
                        "type": 0,
                        "typeName": "T::AccountId"
                      }
                    ],
                    "index": 4,
                    "docs": [
                      "An account was reaped."
                    ]
                  },
                  {
                    "name": "Remarked",
                    "fields": [
                      {
                        "name": "sender",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "hash",
                        "type": 13,
                        "typeName": "T::Hash"
                      }
                    ],
                    "index": 5,
                    "docs": [
                      "On on-chain remark happened."
                    ]
                  },
                  {
                    "name": "UpgradeAuthorized",
                    "fields": [
                      {
                        "name": "code_hash",
                        "type": 13,
                        "typeName": "T::Hash"
                      },
                      {
                        "name": "check_version",
                        "type": 8,
                        "typeName": "bool"
                      }
                    ],
                    "index": 6,
                    "docs": [
                      "An upgrade was authorized."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Event for the System pallet."
            ]
          }
        },
        {
          "id": 23,
          "type": {
            "path": [
              "frame_support",
              "dispatch",
              "DispatchInfo"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "weight",
                    "type": 10,
                    "typeName": "Weight"
                  },
                  {
                    "name": "class",
                    "type": 24,
                    "typeName": "DispatchClass"
                  },
                  {
                    "name": "pays_fee",
                    "type": 25,
                    "typeName": "Pays"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 24,
          "type": {
            "path": [
              "frame_support",
              "dispatch",
              "DispatchClass"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Normal",
                    "index": 0
                  },
                  {
                    "name": "Operational",
                    "index": 1
                  },
                  {
                    "name": "Mandatory",
                    "index": 2
                  }
                ]
              }
            }
          }
        },
        {
          "id": 25,
          "type": {
            "path": [
              "frame_support",
              "dispatch",
              "Pays"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Yes",
                    "index": 0
                  },
                  {
                    "name": "No",
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 26,
          "type": {
            "path": [
              "sp_runtime",
              "DispatchError"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Other",
                    "index": 0
                  },
                  {
                    "name": "CannotLookup",
                    "index": 1
                  },
                  {
                    "name": "BadOrigin",
                    "index": 2
                  },
                  {
                    "name": "Module",
                    "fields": [
                      {
                        "type": 27,
                        "typeName": "ModuleError"
                      }
                    ],
                    "index": 3
                  },
                  {
                    "name": "ConsumerRemaining",
                    "index": 4
                  },
                  {
                    "name": "NoProviders",
                    "index": 5
                  },
                  {
                    "name": "TooManyConsumers",
                    "index": 6
                  },
                  {
                    "name": "Token",
                    "fields": [
                      {
                        "type": 28,
                        "typeName": "TokenError"
                      }
                    ],
                    "index": 7
                  },
                  {
                    "name": "Arithmetic",
                    "fields": [
                      {
                        "type": 29,
                        "typeName": "ArithmeticError"
                      }
                    ],
                    "index": 8
                  },
                  {
                    "name": "Transactional",
                    "fields": [
                      {
                        "type": 30,
                        "typeName": "TransactionalError"
                      }
                    ],
                    "index": 9
                  },
                  {
                    "name": "Exhausted",
                    "index": 10
                  },
                  {
                    "name": "Corruption",
                    "index": 11
                  },
                  {
                    "name": "Unavailable",
                    "index": 12
                  },
                  {
                    "name": "RootNotAllowed",
                    "index": 13
                  }
                ]
              }
            }
          }
        },
        {
          "id": 27,
          "type": {
            "path": [
              "sp_runtime",
              "ModuleError"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "index",
                    "type": 2,
                    "typeName": "u8"
                  },
                  {
                    "name": "error",
                    "type": 18,
                    "typeName": "[u8; MAX_MODULE_ERROR_ENCODED_SIZE]"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 28,
          "type": {
            "path": [
              "sp_runtime",
              "TokenError"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "FundsUnavailable",
                    "index": 0
                  },
                  {
                    "name": "OnlyProvider",
                    "index": 1
                  },
                  {
                    "name": "BelowMinimum",
                    "index": 2
                  },
                  {
                    "name": "CannotCreate",
                    "index": 3
                  },
                  {
                    "name": "UnknownAsset",
                    "index": 4
                  },
                  {
                    "name": "Frozen",
                    "index": 5
                  },
                  {
                    "name": "Unsupported",
                    "index": 6
                  },
                  {
                    "name": "CannotCreateHold",
                    "index": 7
                  },
                  {
                    "name": "NotExpendable",
                    "index": 8
                  },
                  {
                    "name": "Blocked",
                    "index": 9
                  }
                ]
              }
            }
          }
        },
        {
          "id": 29,
          "type": {
            "path": [
              "sp_arithmetic",
              "ArithmeticError"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Underflow",
                    "index": 0
                  },
                  {
                    "name": "Overflow",
                    "index": 1
                  },
                  {
                    "name": "DivisionByZero",
                    "index": 2
                  }
                ]
              }
            }
          }
        },
        {
          "id": 30,
          "type": {
            "path": [
              "sp_runtime",
              "TransactionalError"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "LimitReached",
                    "index": 0
                  },
                  {
                    "name": "NoLayer",
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 31,
          "type": {
            "path": [
              "pallet_scheduler",
              "pallet",
              "Event"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Scheduled",
                    "fields": [
                      {
                        "name": "when",
                        "type": 4,
                        "typeName": "BlockNumberFor<T>"
                      },
                      {
                        "name": "index",
                        "type": 4,
                        "typeName": "u32"
                      }
                    ],
                    "index": 0,
                    "docs": [
                      "Scheduled some task."
                    ]
                  },
                  {
                    "name": "Canceled",
                    "fields": [
                      {
                        "name": "when",
                        "type": 4,
                        "typeName": "BlockNumberFor<T>"
                      },
                      {
                        "name": "index",
                        "type": 4,
                        "typeName": "u32"
                      }
                    ],
                    "index": 1,
                    "docs": [
                      "Canceled some task."
                    ]
                  },
                  {
                    "name": "Dispatched",
                    "fields": [
                      {
                        "name": "task",
                        "type": 32,
                        "typeName": "TaskAddress<BlockNumberFor<T>>"
                      },
                      {
                        "name": "id",
                        "type": 33,
                        "typeName": "Option<TaskName>"
                      },
                      {
                        "name": "result",
                        "type": 34,
                        "typeName": "DispatchResult"
                      }
                    ],
                    "index": 2,
                    "docs": [
                      "Dispatched some task."
                    ]
                  },
                  {
                    "name": "RetrySet",
                    "fields": [
                      {
                        "name": "task",
                        "type": 32,
                        "typeName": "TaskAddress<BlockNumberFor<T>>"
                      },
                      {
                        "name": "id",
                        "type": 33,
                        "typeName": "Option<TaskName>"
                      },
                      {
                        "name": "period",
                        "type": 4,
                        "typeName": "BlockNumberFor<T>"
                      },
                      {
                        "name": "retries",
                        "type": 2,
                        "typeName": "u8"
                      }
                    ],
                    "index": 3,
                    "docs": [
                      "Set a retry configuration for some task."
                    ]
                  },
                  {
                    "name": "RetryCancelled",
                    "fields": [
                      {
                        "name": "task",
                        "type": 32,
                        "typeName": "TaskAddress<BlockNumberFor<T>>"
                      },
                      {
                        "name": "id",
                        "type": 33,
                        "typeName": "Option<TaskName>"
                      }
                    ],
                    "index": 4,
                    "docs": [
                      "Cancel a retry configuration for some task."
                    ]
                  },
                  {
                    "name": "CallUnavailable",
                    "fields": [
                      {
                        "name": "task",
                        "type": 32,
                        "typeName": "TaskAddress<BlockNumberFor<T>>"
                      },
                      {
                        "name": "id",
                        "type": 33,
                        "typeName": "Option<TaskName>"
                      }
                    ],
                    "index": 5,
                    "docs": [
                      "The call for the provided hash was not found so the task has been aborted."
                    ]
                  },
                  {
                    "name": "PeriodicFailed",
                    "fields": [
                      {
                        "name": "task",
                        "type": 32,
                        "typeName": "TaskAddress<BlockNumberFor<T>>"
                      },
                      {
                        "name": "id",
                        "type": 33,
                        "typeName": "Option<TaskName>"
                      }
                    ],
                    "index": 6,
                    "docs": [
                      "The given task was unable to be renewed since the agenda is full at that block."
                    ]
                  },
                  {
                    "name": "RetryFailed",
                    "fields": [
                      {
                        "name": "task",
                        "type": 32,
                        "typeName": "TaskAddress<BlockNumberFor<T>>"
                      },
                      {
                        "name": "id",
                        "type": 33,
                        "typeName": "Option<TaskName>"
                      }
                    ],
                    "index": 7,
                    "docs": [
                      "The given task was unable to be retried since the agenda is full at that block or there",
                      "was not enough weight to reschedule it."
                    ]
                  },
                  {
                    "name": "PermanentlyOverweight",
                    "fields": [
                      {
                        "name": "task",
                        "type": 32,
                        "typeName": "TaskAddress<BlockNumberFor<T>>"
                      },
                      {
                        "name": "id",
                        "type": 33,
                        "typeName": "Option<TaskName>"
                      }
                    ],
                    "index": 8,
                    "docs": [
                      "The given task can never be executed since it is overweight."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Events type."
            ]
          }
        },
        {
          "id": 32,
          "type": {
            "def": {
              "tuple": [
                4,
                4
              ]
            }
          }
        },
        {
          "id": 33,
          "type": {
            "path": [
              "Option"
            ],
            "params": [
              {
                "name": "T",
                "type": 1
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "None",
                    "index": 0
                  },
                  {
                    "name": "Some",
                    "fields": [
                      {
                        "type": 1
                      }
                    ],
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 34,
          "type": {
            "path": [
              "Result"
            ],
            "params": [
              {
                "name": "T",
                "type": 35
              },
              {
                "name": "E",
                "type": 26
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Ok",
                    "fields": [
                      {
                        "type": 35
                      }
                    ],
                    "index": 0
                  },
                  {
                    "name": "Err",
                    "fields": [
                      {
                        "type": 26
                      }
                    ],
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 35,
          "type": {
            "def": {
              "tuple": []
            }
          }
        },
        {
          "id": 36,
          "type": {
            "path": [
              "pallet_preimage",
              "pallet",
              "Event"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Noted",
                    "fields": [
                      {
                        "name": "hash",
                        "type": 13,
                        "typeName": "T::Hash"
                      }
                    ],
                    "index": 0,
                    "docs": [
                      "A preimage has been noted."
                    ]
                  },
                  {
                    "name": "Requested",
                    "fields": [
                      {
                        "name": "hash",
                        "type": 13,
                        "typeName": "T::Hash"
                      }
                    ],
                    "index": 1,
                    "docs": [
                      "A preimage has been requested."
                    ]
                  },
                  {
                    "name": "Cleared",
                    "fields": [
                      {
                        "name": "hash",
                        "type": 13,
                        "typeName": "T::Hash"
                      }
                    ],
                    "index": 2,
                    "docs": [
                      "A preimage has ben cleared."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "The `Event` enum of this pallet"
            ]
          }
        },
        {
          "id": 37,
          "type": {
            "path": [
              "pallet_indices",
              "pallet",
              "Event"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "IndexAssigned",
                    "fields": [
                      {
                        "name": "who",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "index",
                        "type": 4,
                        "typeName": "T::AccountIndex"
                      }
                    ],
                    "index": 0,
                    "docs": [
                      "A account index was assigned."
                    ]
                  },
                  {
                    "name": "IndexFreed",
                    "fields": [
                      {
                        "name": "index",
                        "type": 4,
                        "typeName": "T::AccountIndex"
                      }
                    ],
                    "index": 1,
                    "docs": [
                      "A account index has been freed up (unassigned)."
                    ]
                  },
                  {
                    "name": "IndexFrozen",
                    "fields": [
                      {
                        "name": "index",
                        "type": 4,
                        "typeName": "T::AccountIndex"
                      },
                      {
                        "name": "who",
                        "type": 0,
                        "typeName": "T::AccountId"
                      }
                    ],
                    "index": 2,
                    "docs": [
                      "A account index has been frozen to its current account ID."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "The `Event` enum of this pallet"
            ]
          }
        },
        {
          "id": 38,
          "type": {
            "path": [
              "pallet_balances",
              "pallet",
              "Event"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              },
              {
                "name": "I",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Endowed",
                    "fields": [
                      {
                        "name": "account",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "free_balance",
                        "type": 6,
                        "typeName": "T::Balance"
                      }
                    ],
                    "index": 0,
                    "docs": [
                      "An account was created with some free balance."
                    ]
                  },
                  {
                    "name": "DustLost",
                    "fields": [
                      {
                        "name": "account",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "amount",
                        "type": 6,
                        "typeName": "T::Balance"
                      }
                    ],
                    "index": 1,
                    "docs": [
                      "An account was removed whose balance was non-zero but below ExistentialDeposit,",
                      "resulting in an outright loss."
                    ]
                  },
                  {
                    "name": "Transfer",
                    "fields": [
                      {
                        "name": "from",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "to",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "amount",
                        "type": 6,
                        "typeName": "T::Balance"
                      }
                    ],
                    "index": 2,
                    "docs": [
                      "Transfer succeeded."
                    ]
                  },
                  {
                    "name": "BalanceSet",
                    "fields": [
                      {
                        "name": "who",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "free",
                        "type": 6,
                        "typeName": "T::Balance"
                      }
                    ],
                    "index": 3,
                    "docs": [
                      "A balance was set by root."
                    ]
                  },
                  {
                    "name": "Reserved",
                    "fields": [
                      {
                        "name": "who",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "amount",
                        "type": 6,
                        "typeName": "T::Balance"
                      }
                    ],
                    "index": 4,
                    "docs": [
                      "Some balance was reserved (moved from free to reserved)."
                    ]
                  },
                  {
                    "name": "Unreserved",
                    "fields": [
                      {
                        "name": "who",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "amount",
                        "type": 6,
                        "typeName": "T::Balance"
                      }
                    ],
                    "index": 5,
                    "docs": [
                      "Some balance was unreserved (moved from reserved to free)."
                    ]
                  },
                  {
                    "name": "ReserveRepatriated",
                    "fields": [
                      {
                        "name": "from",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "to",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "amount",
                        "type": 6,
                        "typeName": "T::Balance"
                      },
                      {
                        "name": "destination_status",
                        "type": 39,
                        "typeName": "Status"
                      }
                    ],
                    "index": 6,
                    "docs": [
                      "Some balance was moved from the reserve of the first account to the second account.",
                      "Final argument indicates the destination balance type."
                    ]
                  },
                  {
                    "name": "Deposit",
                    "fields": [
                      {
                        "name": "who",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "amount",
                        "type": 6,
                        "typeName": "T::Balance"
                      }
                    ],
                    "index": 7,
                    "docs": [
                      "Some amount was deposited (e.g. for transaction fees)."
                    ]
                  },
                  {
                    "name": "Withdraw",
                    "fields": [
                      {
                        "name": "who",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "amount",
                        "type": 6,
                        "typeName": "T::Balance"
                      }
                    ],
                    "index": 8,
                    "docs": [
                      "Some amount was withdrawn from the account (e.g. for transaction fees)."
                    ]
                  },
                  {
                    "name": "Slashed",
                    "fields": [
                      {
                        "name": "who",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "amount",
                        "type": 6,
                        "typeName": "T::Balance"
                      }
                    ],
                    "index": 9,
                    "docs": [
                      "Some amount was removed from the account (e.g. for misbehavior)."
                    ]
                  },
                  {
                    "name": "Minted",
                    "fields": [
                      {
                        "name": "who",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "amount",
                        "type": 6,
                        "typeName": "T::Balance"
                      }
                    ],
                    "index": 10,
                    "docs": [
                      "Some amount was minted into an account."
                    ]
                  },
                  {
                    "name": "Burned",
                    "fields": [
                      {
                        "name": "who",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "amount",
                        "type": 6,
                        "typeName": "T::Balance"
                      }
                    ],
                    "index": 11,
                    "docs": [
                      "Some amount was burned from an account."
                    ]
                  },
                  {
                    "name": "Suspended",
                    "fields": [
                      {
                        "name": "who",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "amount",
                        "type": 6,
                        "typeName": "T::Balance"
                      }
                    ],
                    "index": 12,
                    "docs": [
                      "Some amount was suspended from an account (it can be restored later)."
                    ]
                  },
                  {
                    "name": "Restored",
                    "fields": [
                      {
                        "name": "who",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "amount",
                        "type": 6,
                        "typeName": "T::Balance"
                      }
                    ],
                    "index": 13,
                    "docs": [
                      "Some amount was restored into an account."
                    ]
                  },
                  {
                    "name": "Upgraded",
                    "fields": [
                      {
                        "name": "who",
                        "type": 0,
                        "typeName": "T::AccountId"
                      }
                    ],
                    "index": 14,
                    "docs": [
                      "An account was upgraded."
                    ]
                  },
                  {
                    "name": "Issued",
                    "fields": [
                      {
                        "name": "amount",
                        "type": 6,
                        "typeName": "T::Balance"
                      }
                    ],
                    "index": 15,
                    "docs": [
                      "Total issuance was increased by `amount`, creating a credit to be balanced."
                    ]
                  },
                  {
                    "name": "Rescinded",
                    "fields": [
                      {
                        "name": "amount",
                        "type": 6,
                        "typeName": "T::Balance"
                      }
                    ],
                    "index": 16,
                    "docs": [
                      "Total issuance was decreased by `amount`, creating a debt to be balanced."
                    ]
                  },
                  {
                    "name": "Locked",
                    "fields": [
                      {
                        "name": "who",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "amount",
                        "type": 6,
                        "typeName": "T::Balance"
                      }
                    ],
                    "index": 17,
                    "docs": [
                      "Some balance was locked."
                    ]
                  },
                  {
                    "name": "Unlocked",
                    "fields": [
                      {
                        "name": "who",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "amount",
                        "type": 6,
                        "typeName": "T::Balance"
                      }
                    ],
                    "index": 18,
                    "docs": [
                      "Some balance was unlocked."
                    ]
                  },
                  {
                    "name": "Frozen",
                    "fields": [
                      {
                        "name": "who",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "amount",
                        "type": 6,
                        "typeName": "T::Balance"
                      }
                    ],
                    "index": 19,
                    "docs": [
                      "Some balance was frozen."
                    ]
                  },
                  {
                    "name": "Thawed",
                    "fields": [
                      {
                        "name": "who",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "amount",
                        "type": 6,
                        "typeName": "T::Balance"
                      }
                    ],
                    "index": 20,
                    "docs": [
                      "Some balance was thawed."
                    ]
                  },
                  {
                    "name": "TotalIssuanceForced",
                    "fields": [
                      {
                        "name": "old",
                        "type": 6,
                        "typeName": "T::Balance"
                      },
                      {
                        "name": "new",
                        "type": 6,
                        "typeName": "T::Balance"
                      }
                    ],
                    "index": 21,
                    "docs": [
                      "The `TotalIssuance` was forcefully changed."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "The `Event` enum of this pallet"
            ]
          }
        },
        {
          "id": 39,
          "type": {
            "path": [
              "frame_support",
              "traits",
              "tokens",
              "misc",
              "BalanceStatus"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Free",
                    "index": 0
                  },
                  {
                    "name": "Reserved",
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 40,
          "type": {
            "path": [
              "pallet_transaction_payment",
              "pallet",
              "Event"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "TransactionFeePaid",
                    "fields": [
                      {
                        "name": "who",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "actual_fee",
                        "type": 6,
                        "typeName": "BalanceOf<T>"
                      },
                      {
                        "name": "tip",
                        "type": 6,
                        "typeName": "BalanceOf<T>"
                      }
                    ],
                    "index": 0,
                    "docs": [
                      "A transaction fee `actual_fee`, of which `tip` was added to the minimum inclusion fee,",
                      "has been paid by `who`."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "The `Event` enum of this pallet"
            ]
          }
        },
        {
          "id": 41,
          "type": {
            "path": [
              "pallet_staking",
              "pallet",
              "pallet",
              "Event"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "EraPaid",
                    "fields": [
                      {
                        "name": "era_index",
                        "type": 4,
                        "typeName": "EraIndex"
                      },
                      {
                        "name": "validator_payout",
                        "type": 6,
                        "typeName": "BalanceOf<T>"
                      },
                      {
                        "name": "remainder",
                        "type": 6,
                        "typeName": "BalanceOf<T>"
                      }
                    ],
                    "index": 0,
                    "docs": [
                      "The era payout has been set; the first balance is the validator-payout; the second is",
                      "the remainder from the maximum amount of reward."
                    ]
                  },
                  {
                    "name": "Rewarded",
                    "fields": [
                      {
                        "name": "stash",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "dest",
                        "type": 42,
                        "typeName": "RewardDestination<T::AccountId>"
                      },
                      {
                        "name": "amount",
                        "type": 6,
                        "typeName": "BalanceOf<T>"
                      }
                    ],
                    "index": 1,
                    "docs": [
                      "The nominator has been rewarded by this amount to this destination."
                    ]
                  },
                  {
                    "name": "Slashed",
                    "fields": [
                      {
                        "name": "staker",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "amount",
                        "type": 6,
                        "typeName": "BalanceOf<T>"
                      }
                    ],
                    "index": 2,
                    "docs": [
                      "A staker (validator or nominator) has been slashed by the given amount."
                    ]
                  },
                  {
                    "name": "SlashReported",
                    "fields": [
                      {
                        "name": "validator",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "fraction",
                        "type": 43,
                        "typeName": "Perbill"
                      },
                      {
                        "name": "slash_era",
                        "type": 4,
                        "typeName": "EraIndex"
                      }
                    ],
                    "index": 3,
                    "docs": [
                      "A slash for the given validator, for the given percentage of their stake, at the given",
                      "era as been reported."
                    ]
                  },
                  {
                    "name": "OldSlashingReportDiscarded",
                    "fields": [
                      {
                        "name": "session_index",
                        "type": 4,
                        "typeName": "SessionIndex"
                      }
                    ],
                    "index": 4,
                    "docs": [
                      "An old slashing report from a prior era was discarded because it could",
                      "not be processed."
                    ]
                  },
                  {
                    "name": "StakersElected",
                    "index": 5,
                    "docs": [
                      "A new set of stakers was elected."
                    ]
                  },
                  {
                    "name": "Bonded",
                    "fields": [
                      {
                        "name": "stash",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "amount",
                        "type": 6,
                        "typeName": "BalanceOf<T>"
                      }
                    ],
                    "index": 6,
                    "docs": [
                      "An account has bonded this amount. \\[stash, amount\\]",
                      "",
                      "NOTE: This event is only emitted when funds are bonded via a dispatchable. Notably,",
                      "it will not be emitted for staking rewards when they are added to stake."
                    ]
                  },
                  {
                    "name": "Unbonded",
                    "fields": [
                      {
                        "name": "stash",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "amount",
                        "type": 6,
                        "typeName": "BalanceOf<T>"
                      }
                    ],
                    "index": 7,
                    "docs": [
                      "An account has unbonded this amount."
                    ]
                  },
                  {
                    "name": "Withdrawn",
                    "fields": [
                      {
                        "name": "stash",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "amount",
                        "type": 6,
                        "typeName": "BalanceOf<T>"
                      }
                    ],
                    "index": 8,
                    "docs": [
                      "An account has called `withdraw_unbonded` and removed unbonding chunks worth `Balance`",
                      "from the unlocking queue."
                    ]
                  },
                  {
                    "name": "Kicked",
                    "fields": [
                      {
                        "name": "nominator",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "stash",
                        "type": 0,
                        "typeName": "T::AccountId"
                      }
                    ],
                    "index": 9,
                    "docs": [
                      "A nominator has been kicked from a validator."
                    ]
                  },
                  {
                    "name": "StakingElectionFailed",
                    "index": 10,
                    "docs": [
                      "The election failed. No new era is planned."
                    ]
                  },
                  {
                    "name": "Chilled",
                    "fields": [
                      {
                        "name": "stash",
                        "type": 0,
                        "typeName": "T::AccountId"
                      }
                    ],
                    "index": 11,
                    "docs": [
                      "An account has stopped participating as either a validator or nominator."
                    ]
                  },
                  {
                    "name": "PayoutStarted",
                    "fields": [
                      {
                        "name": "era_index",
                        "type": 4,
                        "typeName": "EraIndex"
                      },
                      {
                        "name": "validator_stash",
                        "type": 0,
                        "typeName": "T::AccountId"
                      }
                    ],
                    "index": 12,
                    "docs": [
                      "The stakers' rewards are getting paid."
                    ]
                  },
                  {
                    "name": "ValidatorPrefsSet",
                    "fields": [
                      {
                        "name": "stash",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "prefs",
                        "type": 44,
                        "typeName": "ValidatorPrefs"
                      }
                    ],
                    "index": 13,
                    "docs": [
                      "A validator has set their preferences."
                    ]
                  },
                  {
                    "name": "SnapshotVotersSizeExceeded",
                    "fields": [
                      {
                        "name": "size",
                        "type": 4,
                        "typeName": "u32"
                      }
                    ],
                    "index": 14,
                    "docs": [
                      "Voters size limit reached."
                    ]
                  },
                  {
                    "name": "SnapshotTargetsSizeExceeded",
                    "fields": [
                      {
                        "name": "size",
                        "type": 4,
                        "typeName": "u32"
                      }
                    ],
                    "index": 15,
                    "docs": [
                      "Targets size limit reached."
                    ]
                  },
                  {
                    "name": "ForceEra",
                    "fields": [
                      {
                        "name": "mode",
                        "type": 46,
                        "typeName": "Forcing"
                      }
                    ],
                    "index": 16,
                    "docs": [
                      "A new force era mode was set."
                    ]
                  },
                  {
                    "name": "ControllerBatchDeprecated",
                    "fields": [
                      {
                        "name": "failures",
                        "type": 4,
                        "typeName": "u32"
                      }
                    ],
                    "index": 17,
                    "docs": [
                      "Report of a controller batch deprecation."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "The `Event` enum of this pallet"
            ]
          }
        },
        {
          "id": 42,
          "type": {
            "path": [
              "pallet_staking",
              "RewardDestination"
            ],
            "params": [
              {
                "name": "AccountId",
                "type": 0
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Staked",
                    "index": 0
                  },
                  {
                    "name": "Stash",
                    "index": 1
                  },
                  {
                    "name": "Controller",
                    "index": 2
                  },
                  {
                    "name": "Account",
                    "fields": [
                      {
                        "type": 0,
                        "typeName": "AccountId"
                      }
                    ],
                    "index": 3
                  },
                  {
                    "name": "None",
                    "index": 4
                  }
                ]
              }
            }
          }
        },
        {
          "id": 43,
          "type": {
            "path": [
              "sp_arithmetic",
              "per_things",
              "Perbill"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 4,
                    "typeName": "u32"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 44,
          "type": {
            "path": [
              "pallet_staking",
              "ValidatorPrefs"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "commission",
                    "type": 45,
                    "typeName": "Perbill"
                  },
                  {
                    "name": "blocked",
                    "type": 8,
                    "typeName": "bool"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 45,
          "type": {
            "def": {
              "compact": {
                "type": 43
              }
            }
          }
        },
        {
          "id": 46,
          "type": {
            "path": [
              "pallet_staking",
              "Forcing"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "NotForcing",
                    "index": 0
                  },
                  {
                    "name": "ForceNew",
                    "index": 1
                  },
                  {
                    "name": "ForceNone",
                    "index": 2
                  },
                  {
                    "name": "ForceAlways",
                    "index": 3
                  }
                ]
              }
            }
          }
        },
        {
          "id": 47,
          "type": {
            "path": [
              "pallet_offences",
              "pallet",
              "Event"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Offence",
                    "fields": [
                      {
                        "name": "kind",
                        "type": 48,
                        "typeName": "Kind"
                      },
                      {
                        "name": "timeslot",
                        "type": 14,
                        "typeName": "OpaqueTimeSlot"
                      }
                    ],
                    "index": 0,
                    "docs": [
                      "There is an offence reported of the given `kind` happened at the `session_index` and",
                      "(kind-specific) time slot. This event is not deposited for duplicate slashes.",
                      "\\[kind, timeslot\\]."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Events type."
            ]
          }
        },
        {
          "id": 48,
          "type": {
            "def": {
              "array": {
                "len": 16,
                "type": 2
              }
            }
          }
        },
        {
          "id": 49,
          "type": {
            "path": [
              "pallet_session",
              "pallet",
              "Event"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "NewSession",
                    "fields": [
                      {
                        "name": "session_index",
                        "type": 4,
                        "typeName": "SessionIndex"
                      }
                    ],
                    "index": 0,
                    "docs": [
                      "New session has happened. Note that the argument is the session index, not the",
                      "block number as the type might suggest."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "The `Event` enum of this pallet"
            ]
          }
        },
        {
          "id": 50,
          "type": {
            "path": [
              "pallet_grandpa",
              "pallet",
              "Event"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "NewAuthorities",
                    "fields": [
                      {
                        "name": "authority_set",
                        "type": 51,
                        "typeName": "AuthorityList"
                      }
                    ],
                    "index": 0,
                    "docs": [
                      "New authority set has been applied."
                    ]
                  },
                  {
                    "name": "Paused",
                    "index": 1,
                    "docs": [
                      "Current authority set has been paused."
                    ]
                  },
                  {
                    "name": "Resumed",
                    "index": 2,
                    "docs": [
                      "Current authority set has been resumed."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "The `Event` enum of this pallet"
            ]
          }
        },
        {
          "id": 51,
          "type": {
            "def": {
              "sequence": {
                "type": 52
              }
            }
          }
        },
        {
          "id": 52,
          "type": {
            "def": {
              "tuple": [
                53,
                12
              ]
            }
          }
        },
        {
          "id": 53,
          "type": {
            "path": [
              "sp_consensus_grandpa",
              "app",
              "Public"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 1,
                    "typeName": "ed25519::Public"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 54,
          "type": {
            "path": [
              "pallet_treasury",
              "pallet",
              "Event"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              },
              {
                "name": "I",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Spending",
                    "fields": [
                      {
                        "name": "budget_remaining",
                        "type": 6,
                        "typeName": "BalanceOf<T, I>"
                      }
                    ],
                    "index": 0,
                    "docs": [
                      "We have ended a spend period and will now allocate funds."
                    ]
                  },
                  {
                    "name": "Awarded",
                    "fields": [
                      {
                        "name": "proposal_index",
                        "type": 4,
                        "typeName": "ProposalIndex"
                      },
                      {
                        "name": "award",
                        "type": 6,
                        "typeName": "BalanceOf<T, I>"
                      },
                      {
                        "name": "account",
                        "type": 0,
                        "typeName": "T::AccountId"
                      }
                    ],
                    "index": 1,
                    "docs": [
                      "Some funds have been allocated."
                    ]
                  },
                  {
                    "name": "Burnt",
                    "fields": [
                      {
                        "name": "burnt_funds",
                        "type": 6,
                        "typeName": "BalanceOf<T, I>"
                      }
                    ],
                    "index": 2,
                    "docs": [
                      "Some of our funds have been burnt."
                    ]
                  },
                  {
                    "name": "Rollover",
                    "fields": [
                      {
                        "name": "rollover_balance",
                        "type": 6,
                        "typeName": "BalanceOf<T, I>"
                      }
                    ],
                    "index": 3,
                    "docs": [
                      "Spending has finished; this is the amount that rolls over until next spend."
                    ]
                  },
                  {
                    "name": "Deposit",
                    "fields": [
                      {
                        "name": "value",
                        "type": 6,
                        "typeName": "BalanceOf<T, I>"
                      }
                    ],
                    "index": 4,
                    "docs": [
                      "Some funds have been deposited."
                    ]
                  },
                  {
                    "name": "SpendApproved",
                    "fields": [
                      {
                        "name": "proposal_index",
                        "type": 4,
                        "typeName": "ProposalIndex"
                      },
                      {
                        "name": "amount",
                        "type": 6,
                        "typeName": "BalanceOf<T, I>"
                      },
                      {
                        "name": "beneficiary",
                        "type": 0,
                        "typeName": "T::AccountId"
                      }
                    ],
                    "index": 5,
                    "docs": [
                      "A new spend proposal has been approved."
                    ]
                  },
                  {
                    "name": "UpdatedInactive",
                    "fields": [
                      {
                        "name": "reactivated",
                        "type": 6,
                        "typeName": "BalanceOf<T, I>"
                      },
                      {
                        "name": "deactivated",
                        "type": 6,
                        "typeName": "BalanceOf<T, I>"
                      }
                    ],
                    "index": 6,
                    "docs": [
                      "The inactive funds of the pallet have been updated."
                    ]
                  },
                  {
                    "name": "AssetSpendApproved",
                    "fields": [
                      {
                        "name": "index",
                        "type": 4,
                        "typeName": "SpendIndex"
                      },
                      {
                        "name": "asset_kind",
                        "type": 55,
                        "typeName": "T::AssetKind"
                      },
                      {
                        "name": "amount",
                        "type": 6,
                        "typeName": "AssetBalanceOf<T, I>"
                      },
                      {
                        "name": "beneficiary",
                        "type": 81,
                        "typeName": "T::Beneficiary"
                      },
                      {
                        "name": "valid_from",
                        "type": 4,
                        "typeName": "BlockNumberFor<T>"
                      },
                      {
                        "name": "expire_at",
                        "type": 4,
                        "typeName": "BlockNumberFor<T>"
                      }
                    ],
                    "index": 7,
                    "docs": [
                      "A new asset spend proposal has been approved."
                    ]
                  },
                  {
                    "name": "AssetSpendVoided",
                    "fields": [
                      {
                        "name": "index",
                        "type": 4,
                        "typeName": "SpendIndex"
                      }
                    ],
                    "index": 8,
                    "docs": [
                      "An approved spend was voided."
                    ]
                  },
                  {
                    "name": "Paid",
                    "fields": [
                      {
                        "name": "index",
                        "type": 4,
                        "typeName": "SpendIndex"
                      },
                      {
                        "name": "payment_id",
                        "type": 12,
                        "typeName": "<T::Paymaster as Pay>::Id"
                      }
                    ],
                    "index": 9,
                    "docs": [
                      "A payment happened."
                    ]
                  },
                  {
                    "name": "PaymentFailed",
                    "fields": [
                      {
                        "name": "index",
                        "type": 4,
                        "typeName": "SpendIndex"
                      },
                      {
                        "name": "payment_id",
                        "type": 12,
                        "typeName": "<T::Paymaster as Pay>::Id"
                      }
                    ],
                    "index": 10,
                    "docs": [
                      "A payment failed and can be retried."
                    ]
                  },
                  {
                    "name": "SpendProcessed",
                    "fields": [
                      {
                        "name": "index",
                        "type": 4,
                        "typeName": "SpendIndex"
                      }
                    ],
                    "index": 11,
                    "docs": [
                      "A spend was processed and removed from the storage. It might have been successfully",
                      "paid or it may have expired."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "The `Event` enum of this pallet"
            ]
          }
        },
        {
          "id": 55,
          "type": {
            "path": [
              "polkadot_runtime_common",
              "impls",
              "VersionedLocatableAsset"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "V3",
                    "fields": [
                      {
                        "name": "location",
                        "type": 56,
                        "typeName": "xcm::v3::Location"
                      },
                      {
                        "name": "asset_id",
                        "type": 66,
                        "typeName": "xcm::v3::AssetId"
                      }
                    ],
                    "index": 3
                  },
                  {
                    "name": "V4",
                    "fields": [
                      {
                        "name": "location",
                        "type": 67,
                        "typeName": "xcm::v4::Location"
                      },
                      {
                        "name": "asset_id",
                        "type": 80,
                        "typeName": "xcm::v4::AssetId"
                      }
                    ],
                    "index": 4
                  }
                ]
              }
            }
          }
        },
        {
          "id": 56,
          "type": {
            "path": [
              "staging_xcm",
              "v3",
              "multilocation",
              "MultiLocation"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "parents",
                    "type": 2,
                    "typeName": "u8"
                  },
                  {
                    "name": "interior",
                    "type": 57,
                    "typeName": "Junctions"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 57,
          "type": {
            "path": [
              "xcm",
              "v3",
              "junctions",
              "Junctions"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Here",
                    "index": 0
                  },
                  {
                    "name": "X1",
                    "fields": [
                      {
                        "type": 58,
                        "typeName": "Junction"
                      }
                    ],
                    "index": 1
                  },
                  {
                    "name": "X2",
                    "fields": [
                      {
                        "type": 58,
                        "typeName": "Junction"
                      },
                      {
                        "type": 58,
                        "typeName": "Junction"
                      }
                    ],
                    "index": 2
                  },
                  {
                    "name": "X3",
                    "fields": [
                      {
                        "type": 58,
                        "typeName": "Junction"
                      },
                      {
                        "type": 58,
                        "typeName": "Junction"
                      },
                      {
                        "type": 58,
                        "typeName": "Junction"
                      }
                    ],
                    "index": 3
                  },
                  {
                    "name": "X4",
                    "fields": [
                      {
                        "type": 58,
                        "typeName": "Junction"
                      },
                      {
                        "type": 58,
                        "typeName": "Junction"
                      },
                      {
                        "type": 58,
                        "typeName": "Junction"
                      },
                      {
                        "type": 58,
                        "typeName": "Junction"
                      }
                    ],
                    "index": 4
                  },
                  {
                    "name": "X5",
                    "fields": [
                      {
                        "type": 58,
                        "typeName": "Junction"
                      },
                      {
                        "type": 58,
                        "typeName": "Junction"
                      },
                      {
                        "type": 58,
                        "typeName": "Junction"
                      },
                      {
                        "type": 58,
                        "typeName": "Junction"
                      },
                      {
                        "type": 58,
                        "typeName": "Junction"
                      }
                    ],
                    "index": 5
                  },
                  {
                    "name": "X6",
                    "fields": [
                      {
                        "type": 58,
                        "typeName": "Junction"
                      },
                      {
                        "type": 58,
                        "typeName": "Junction"
                      },
                      {
                        "type": 58,
                        "typeName": "Junction"
                      },
                      {
                        "type": 58,
                        "typeName": "Junction"
                      },
                      {
                        "type": 58,
                        "typeName": "Junction"
                      },
                      {
                        "type": 58,
                        "typeName": "Junction"
                      }
                    ],
                    "index": 6
                  },
                  {
                    "name": "X7",
                    "fields": [
                      {
                        "type": 58,
                        "typeName": "Junction"
                      },
                      {
                        "type": 58,
                        "typeName": "Junction"
                      },
                      {
                        "type": 58,
                        "typeName": "Junction"
                      },
                      {
                        "type": 58,
                        "typeName": "Junction"
                      },
                      {
                        "type": 58,
                        "typeName": "Junction"
                      },
                      {
                        "type": 58,
                        "typeName": "Junction"
                      },
                      {
                        "type": 58,
                        "typeName": "Junction"
                      }
                    ],
                    "index": 7
                  },
                  {
                    "name": "X8",
                    "fields": [
                      {
                        "type": 58,
                        "typeName": "Junction"
                      },
                      {
                        "type": 58,
                        "typeName": "Junction"
                      },
                      {
                        "type": 58,
                        "typeName": "Junction"
                      },
                      {
                        "type": 58,
                        "typeName": "Junction"
                      },
                      {
                        "type": 58,
                        "typeName": "Junction"
                      },
                      {
                        "type": 58,
                        "typeName": "Junction"
                      },
                      {
                        "type": 58,
                        "typeName": "Junction"
                      },
                      {
                        "type": 58,
                        "typeName": "Junction"
                      }
                    ],
                    "index": 8
                  }
                ]
              }
            }
          }
        },
        {
          "id": 58,
          "type": {
            "path": [
              "xcm",
              "v3",
              "junction",
              "Junction"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Parachain",
                    "fields": [
                      {
                        "type": 59,
                        "typeName": "u32"
                      }
                    ],
                    "index": 0
                  },
                  {
                    "name": "AccountId32",
                    "fields": [
                      {
                        "name": "network",
                        "type": 60,
                        "typeName": "Option<NetworkId>"
                      },
                      {
                        "name": "id",
                        "type": 1,
                        "typeName": "[u8; 32]"
                      }
                    ],
                    "index": 1
                  },
                  {
                    "name": "AccountIndex64",
                    "fields": [
                      {
                        "name": "network",
                        "type": 60,
                        "typeName": "Option<NetworkId>"
                      },
                      {
                        "name": "index",
                        "type": 11,
                        "typeName": "u64"
                      }
                    ],
                    "index": 2
                  },
                  {
                    "name": "AccountKey20",
                    "fields": [
                      {
                        "name": "network",
                        "type": 60,
                        "typeName": "Option<NetworkId>"
                      },
                      {
                        "name": "key",
                        "type": 62,
                        "typeName": "[u8; 20]"
                      }
                    ],
                    "index": 3
                  },
                  {
                    "name": "PalletInstance",
                    "fields": [
                      {
                        "type": 2,
                        "typeName": "u8"
                      }
                    ],
                    "index": 4
                  },
                  {
                    "name": "GeneralIndex",
                    "fields": [
                      {
                        "type": 63,
                        "typeName": "u128"
                      }
                    ],
                    "index": 5
                  },
                  {
                    "name": "GeneralKey",
                    "fields": [
                      {
                        "name": "length",
                        "type": 2,
                        "typeName": "u8"
                      },
                      {
                        "name": "data",
                        "type": 1,
                        "typeName": "[u8; 32]"
                      }
                    ],
                    "index": 6
                  },
                  {
                    "name": "OnlyChild",
                    "index": 7
                  },
                  {
                    "name": "Plurality",
                    "fields": [
                      {
                        "name": "id",
                        "type": 64,
                        "typeName": "BodyId"
                      },
                      {
                        "name": "part",
                        "type": 65,
                        "typeName": "BodyPart"
                      }
                    ],
                    "index": 8
                  },
                  {
                    "name": "GlobalConsensus",
                    "fields": [
                      {
                        "type": 61,
                        "typeName": "NetworkId"
                      }
                    ],
                    "index": 9
                  }
                ]
              }
            }
          }
        },
        {
          "id": 59,
          "type": {
            "def": {
              "compact": {
                "type": 4
              }
            }
          }
        },
        {
          "id": 60,
          "type": {
            "path": [
              "Option"
            ],
            "params": [
              {
                "name": "T",
                "type": 61
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "None",
                    "index": 0
                  },
                  {
                    "name": "Some",
                    "fields": [
                      {
                        "type": 61
                      }
                    ],
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 61,
          "type": {
            "path": [
              "xcm",
              "v3",
              "junction",
              "NetworkId"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "ByGenesis",
                    "fields": [
                      {
                        "type": 1,
                        "typeName": "[u8; 32]"
                      }
                    ],
                    "index": 0
                  },
                  {
                    "name": "ByFork",
                    "fields": [
                      {
                        "name": "block_number",
                        "type": 12,
                        "typeName": "u64"
                      },
                      {
                        "name": "block_hash",
                        "type": 1,
                        "typeName": "[u8; 32]"
                      }
                    ],
                    "index": 1
                  },
                  {
                    "name": "Polkadot",
                    "index": 2
                  },
                  {
                    "name": "Kusama",
                    "index": 3
                  },
                  {
                    "name": "Westend",
                    "index": 4
                  },
                  {
                    "name": "Rococo",
                    "index": 5
                  },
                  {
                    "name": "Wococo",
                    "index": 6
                  },
                  {
                    "name": "Ethereum",
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": 11,
                        "typeName": "u64"
                      }
                    ],
                    "index": 7
                  },
                  {
                    "name": "BitcoinCore",
                    "index": 8
                  },
                  {
                    "name": "BitcoinCash",
                    "index": 9
                  },
                  {
                    "name": "PolkadotBulletin",
                    "index": 10
                  }
                ]
              }
            }
          }
        },
        {
          "id": 62,
          "type": {
            "def": {
              "array": {
                "len": 20,
                "type": 2
              }
            }
          }
        },
        {
          "id": 63,
          "type": {
            "def": {
              "compact": {
                "type": 6
              }
            }
          }
        },
        {
          "id": 64,
          "type": {
            "path": [
              "xcm",
              "v3",
              "junction",
              "BodyId"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Unit",
                    "index": 0
                  },
                  {
                    "name": "Moniker",
                    "fields": [
                      {
                        "type": 18,
                        "typeName": "[u8; 4]"
                      }
                    ],
                    "index": 1
                  },
                  {
                    "name": "Index",
                    "fields": [
                      {
                        "type": 59,
                        "typeName": "u32"
                      }
                    ],
                    "index": 2
                  },
                  {
                    "name": "Executive",
                    "index": 3
                  },
                  {
                    "name": "Technical",
                    "index": 4
                  },
                  {
                    "name": "Legislative",
                    "index": 5
                  },
                  {
                    "name": "Judicial",
                    "index": 6
                  },
                  {
                    "name": "Defense",
                    "index": 7
                  },
                  {
                    "name": "Administration",
                    "index": 8
                  },
                  {
                    "name": "Treasury",
                    "index": 9
                  }
                ]
              }
            }
          }
        },
        {
          "id": 65,
          "type": {
            "path": [
              "xcm",
              "v3",
              "junction",
              "BodyPart"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Voice",
                    "index": 0
                  },
                  {
                    "name": "Members",
                    "fields": [
                      {
                        "name": "count",
                        "type": 59,
                        "typeName": "u32"
                      }
                    ],
                    "index": 1
                  },
                  {
                    "name": "Fraction",
                    "fields": [
                      {
                        "name": "nom",
                        "type": 59,
                        "typeName": "u32"
                      },
                      {
                        "name": "denom",
                        "type": 59,
                        "typeName": "u32"
                      }
                    ],
                    "index": 2
                  },
                  {
                    "name": "AtLeastProportion",
                    "fields": [
                      {
                        "name": "nom",
                        "type": 59,
                        "typeName": "u32"
                      },
                      {
                        "name": "denom",
                        "type": 59,
                        "typeName": "u32"
                      }
                    ],
                    "index": 3
                  },
                  {
                    "name": "MoreThanProportion",
                    "fields": [
                      {
                        "name": "nom",
                        "type": 59,
                        "typeName": "u32"
                      },
                      {
                        "name": "denom",
                        "type": 59,
                        "typeName": "u32"
                      }
                    ],
                    "index": 4
                  }
                ]
              }
            }
          }
        },
        {
          "id": 66,
          "type": {
            "path": [
              "xcm",
              "v3",
              "multiasset",
              "AssetId"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Concrete",
                    "fields": [
                      {
                        "type": 56,
                        "typeName": "MultiLocation"
                      }
                    ],
                    "index": 0
                  },
                  {
                    "name": "Abstract",
                    "fields": [
                      {
                        "type": 1,
                        "typeName": "[u8; 32]"
                      }
                    ],
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 67,
          "type": {
            "path": [
              "staging_xcm",
              "v4",
              "location",
              "Location"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "parents",
                    "type": 2,
                    "typeName": "u8"
                  },
                  {
                    "name": "interior",
                    "type": 68,
                    "typeName": "Junctions"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 68,
          "type": {
            "path": [
              "staging_xcm",
              "v4",
              "junctions",
              "Junctions"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Here",
                    "index": 0
                  },
                  {
                    "name": "X1",
                    "fields": [
                      {
                        "type": 69,
                        "typeName": "Arc<[Junction; 1]>"
                      }
                    ],
                    "index": 1
                  },
                  {
                    "name": "X2",
                    "fields": [
                      {
                        "type": 73,
                        "typeName": "Arc<[Junction; 2]>"
                      }
                    ],
                    "index": 2
                  },
                  {
                    "name": "X3",
                    "fields": [
                      {
                        "type": 74,
                        "typeName": "Arc<[Junction; 3]>"
                      }
                    ],
                    "index": 3
                  },
                  {
                    "name": "X4",
                    "fields": [
                      {
                        "type": 75,
                        "typeName": "Arc<[Junction; 4]>"
                      }
                    ],
                    "index": 4
                  },
                  {
                    "name": "X5",
                    "fields": [
                      {
                        "type": 76,
                        "typeName": "Arc<[Junction; 5]>"
                      }
                    ],
                    "index": 5
                  },
                  {
                    "name": "X6",
                    "fields": [
                      {
                        "type": 77,
                        "typeName": "Arc<[Junction; 6]>"
                      }
                    ],
                    "index": 6
                  },
                  {
                    "name": "X7",
                    "fields": [
                      {
                        "type": 78,
                        "typeName": "Arc<[Junction; 7]>"
                      }
                    ],
                    "index": 7
                  },
                  {
                    "name": "X8",
                    "fields": [
                      {
                        "type": 79,
                        "typeName": "Arc<[Junction; 8]>"
                      }
                    ],
                    "index": 8
                  }
                ]
              }
            }
          }
        },
        {
          "id": 69,
          "type": {
            "def": {
              "array": {
                "len": 1,
                "type": 70
              }
            }
          }
        },
        {
          "id": 70,
          "type": {
            "path": [
              "staging_xcm",
              "v4",
              "junction",
              "Junction"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Parachain",
                    "fields": [
                      {
                        "type": 59,
                        "typeName": "u32"
                      }
                    ],
                    "index": 0
                  },
                  {
                    "name": "AccountId32",
                    "fields": [
                      {
                        "name": "network",
                        "type": 71,
                        "typeName": "Option<NetworkId>"
                      },
                      {
                        "name": "id",
                        "type": 1,
                        "typeName": "[u8; 32]"
                      }
                    ],
                    "index": 1
                  },
                  {
                    "name": "AccountIndex64",
                    "fields": [
                      {
                        "name": "network",
                        "type": 71,
                        "typeName": "Option<NetworkId>"
                      },
                      {
                        "name": "index",
                        "type": 11,
                        "typeName": "u64"
                      }
                    ],
                    "index": 2
                  },
                  {
                    "name": "AccountKey20",
                    "fields": [
                      {
                        "name": "network",
                        "type": 71,
                        "typeName": "Option<NetworkId>"
                      },
                      {
                        "name": "key",
                        "type": 62,
                        "typeName": "[u8; 20]"
                      }
                    ],
                    "index": 3
                  },
                  {
                    "name": "PalletInstance",
                    "fields": [
                      {
                        "type": 2,
                        "typeName": "u8"
                      }
                    ],
                    "index": 4
                  },
                  {
                    "name": "GeneralIndex",
                    "fields": [
                      {
                        "type": 63,
                        "typeName": "u128"
                      }
                    ],
                    "index": 5
                  },
                  {
                    "name": "GeneralKey",
                    "fields": [
                      {
                        "name": "length",
                        "type": 2,
                        "typeName": "u8"
                      },
                      {
                        "name": "data",
                        "type": 1,
                        "typeName": "[u8; 32]"
                      }
                    ],
                    "index": 6
                  },
                  {
                    "name": "OnlyChild",
                    "index": 7
                  },
                  {
                    "name": "Plurality",
                    "fields": [
                      {
                        "name": "id",
                        "type": 64,
                        "typeName": "BodyId"
                      },
                      {
                        "name": "part",
                        "type": 65,
                        "typeName": "BodyPart"
                      }
                    ],
                    "index": 8
                  },
                  {
                    "name": "GlobalConsensus",
                    "fields": [
                      {
                        "type": 72,
                        "typeName": "NetworkId"
                      }
                    ],
                    "index": 9
                  }
                ]
              }
            }
          }
        },
        {
          "id": 71,
          "type": {
            "path": [
              "Option"
            ],
            "params": [
              {
                "name": "T",
                "type": 72
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "None",
                    "index": 0
                  },
                  {
                    "name": "Some",
                    "fields": [
                      {
                        "type": 72
                      }
                    ],
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 72,
          "type": {
            "path": [
              "staging_xcm",
              "v4",
              "junction",
              "NetworkId"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "ByGenesis",
                    "fields": [
                      {
                        "type": 1,
                        "typeName": "[u8; 32]"
                      }
                    ],
                    "index": 0
                  },
                  {
                    "name": "ByFork",
                    "fields": [
                      {
                        "name": "block_number",
                        "type": 12,
                        "typeName": "u64"
                      },
                      {
                        "name": "block_hash",
                        "type": 1,
                        "typeName": "[u8; 32]"
                      }
                    ],
                    "index": 1
                  },
                  {
                    "name": "Polkadot",
                    "index": 2
                  },
                  {
                    "name": "Kusama",
                    "index": 3
                  },
                  {
                    "name": "Westend",
                    "index": 4
                  },
                  {
                    "name": "Rococo",
                    "index": 5
                  },
                  {
                    "name": "Wococo",
                    "index": 6
                  },
                  {
                    "name": "Ethereum",
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": 11,
                        "typeName": "u64"
                      }
                    ],
                    "index": 7
                  },
                  {
                    "name": "BitcoinCore",
                    "index": 8
                  },
                  {
                    "name": "BitcoinCash",
                    "index": 9
                  },
                  {
                    "name": "PolkadotBulletin",
                    "index": 10
                  }
                ]
              }
            }
          }
        },
        {
          "id": 73,
          "type": {
            "def": {
              "array": {
                "len": 2,
                "type": 70
              }
            }
          }
        },
        {
          "id": 74,
          "type": {
            "def": {
              "array": {
                "len": 3,
                "type": 70
              }
            }
          }
        },
        {
          "id": 75,
          "type": {
            "def": {
              "array": {
                "len": 4,
                "type": 70
              }
            }
          }
        },
        {
          "id": 76,
          "type": {
            "def": {
              "array": {
                "len": 5,
                "type": 70
              }
            }
          }
        },
        {
          "id": 77,
          "type": {
            "def": {
              "array": {
                "len": 6,
                "type": 70
              }
            }
          }
        },
        {
          "id": 78,
          "type": {
            "def": {
              "array": {
                "len": 7,
                "type": 70
              }
            }
          }
        },
        {
          "id": 79,
          "type": {
            "def": {
              "array": {
                "len": 8,
                "type": 70
              }
            }
          }
        },
        {
          "id": 80,
          "type": {
            "path": [
              "staging_xcm",
              "v4",
              "asset",
              "AssetId"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 67,
                    "typeName": "Location"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 81,
          "type": {
            "path": [
              "xcm",
              "VersionedLocation"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "V2",
                    "fields": [
                      {
                        "type": 82,
                        "typeName": "v2::MultiLocation"
                      }
                    ],
                    "index": 1
                  },
                  {
                    "name": "V3",
                    "fields": [
                      {
                        "type": 56,
                        "typeName": "v3::MultiLocation"
                      }
                    ],
                    "index": 3
                  },
                  {
                    "name": "V4",
                    "fields": [
                      {
                        "type": 67,
                        "typeName": "v4::Location"
                      }
                    ],
                    "index": 4
                  }
                ]
              }
            }
          }
        },
        {
          "id": 82,
          "type": {
            "path": [
              "xcm",
              "v2",
              "multilocation",
              "MultiLocation"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "parents",
                    "type": 2,
                    "typeName": "u8"
                  },
                  {
                    "name": "interior",
                    "type": 83,
                    "typeName": "Junctions"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 83,
          "type": {
            "path": [
              "xcm",
              "v2",
              "multilocation",
              "Junctions"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Here",
                    "index": 0
                  },
                  {
                    "name": "X1",
                    "fields": [
                      {
                        "type": 84,
                        "typeName": "Junction"
                      }
                    ],
                    "index": 1
                  },
                  {
                    "name": "X2",
                    "fields": [
                      {
                        "type": 84,
                        "typeName": "Junction"
                      },
                      {
                        "type": 84,
                        "typeName": "Junction"
                      }
                    ],
                    "index": 2
                  },
                  {
                    "name": "X3",
                    "fields": [
                      {
                        "type": 84,
                        "typeName": "Junction"
                      },
                      {
                        "type": 84,
                        "typeName": "Junction"
                      },
                      {
                        "type": 84,
                        "typeName": "Junction"
                      }
                    ],
                    "index": 3
                  },
                  {
                    "name": "X4",
                    "fields": [
                      {
                        "type": 84,
                        "typeName": "Junction"
                      },
                      {
                        "type": 84,
                        "typeName": "Junction"
                      },
                      {
                        "type": 84,
                        "typeName": "Junction"
                      },
                      {
                        "type": 84,
                        "typeName": "Junction"
                      }
                    ],
                    "index": 4
                  },
                  {
                    "name": "X5",
                    "fields": [
                      {
                        "type": 84,
                        "typeName": "Junction"
                      },
                      {
                        "type": 84,
                        "typeName": "Junction"
                      },
                      {
                        "type": 84,
                        "typeName": "Junction"
                      },
                      {
                        "type": 84,
                        "typeName": "Junction"
                      },
                      {
                        "type": 84,
                        "typeName": "Junction"
                      }
                    ],
                    "index": 5
                  },
                  {
                    "name": "X6",
                    "fields": [
                      {
                        "type": 84,
                        "typeName": "Junction"
                      },
                      {
                        "type": 84,
                        "typeName": "Junction"
                      },
                      {
                        "type": 84,
                        "typeName": "Junction"
                      },
                      {
                        "type": 84,
                        "typeName": "Junction"
                      },
                      {
                        "type": 84,
                        "typeName": "Junction"
                      },
                      {
                        "type": 84,
                        "typeName": "Junction"
                      }
                    ],
                    "index": 6
                  },
                  {
                    "name": "X7",
                    "fields": [
                      {
                        "type": 84,
                        "typeName": "Junction"
                      },
                      {
                        "type": 84,
                        "typeName": "Junction"
                      },
                      {
                        "type": 84,
                        "typeName": "Junction"
                      },
                      {
                        "type": 84,
                        "typeName": "Junction"
                      },
                      {
                        "type": 84,
                        "typeName": "Junction"
                      },
                      {
                        "type": 84,
                        "typeName": "Junction"
                      },
                      {
                        "type": 84,
                        "typeName": "Junction"
                      }
                    ],
                    "index": 7
                  },
                  {
                    "name": "X8",
                    "fields": [
                      {
                        "type": 84,
                        "typeName": "Junction"
                      },
                      {
                        "type": 84,
                        "typeName": "Junction"
                      },
                      {
                        "type": 84,
                        "typeName": "Junction"
                      },
                      {
                        "type": 84,
                        "typeName": "Junction"
                      },
                      {
                        "type": 84,
                        "typeName": "Junction"
                      },
                      {
                        "type": 84,
                        "typeName": "Junction"
                      },
                      {
                        "type": 84,
                        "typeName": "Junction"
                      },
                      {
                        "type": 84,
                        "typeName": "Junction"
                      }
                    ],
                    "index": 8
                  }
                ]
              }
            }
          }
        },
        {
          "id": 84,
          "type": {
            "path": [
              "xcm",
              "v2",
              "junction",
              "Junction"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Parachain",
                    "fields": [
                      {
                        "type": 59,
                        "typeName": "u32"
                      }
                    ],
                    "index": 0
                  },
                  {
                    "name": "AccountId32",
                    "fields": [
                      {
                        "name": "network",
                        "type": 85,
                        "typeName": "NetworkId"
                      },
                      {
                        "name": "id",
                        "type": 1,
                        "typeName": "[u8; 32]"
                      }
                    ],
                    "index": 1
                  },
                  {
                    "name": "AccountIndex64",
                    "fields": [
                      {
                        "name": "network",
                        "type": 85,
                        "typeName": "NetworkId"
                      },
                      {
                        "name": "index",
                        "type": 11,
                        "typeName": "u64"
                      }
                    ],
                    "index": 2
                  },
                  {
                    "name": "AccountKey20",
                    "fields": [
                      {
                        "name": "network",
                        "type": 85,
                        "typeName": "NetworkId"
                      },
                      {
                        "name": "key",
                        "type": 62,
                        "typeName": "[u8; 20]"
                      }
                    ],
                    "index": 3
                  },
                  {
                    "name": "PalletInstance",
                    "fields": [
                      {
                        "type": 2,
                        "typeName": "u8"
                      }
                    ],
                    "index": 4
                  },
                  {
                    "name": "GeneralIndex",
                    "fields": [
                      {
                        "type": 63,
                        "typeName": "u128"
                      }
                    ],
                    "index": 5
                  },
                  {
                    "name": "GeneralKey",
                    "fields": [
                      {
                        "type": 86,
                        "typeName": "WeakBoundedVec<u8, ConstU32<32>>"
                      }
                    ],
                    "index": 6
                  },
                  {
                    "name": "OnlyChild",
                    "index": 7
                  },
                  {
                    "name": "Plurality",
                    "fields": [
                      {
                        "name": "id",
                        "type": 87,
                        "typeName": "BodyId"
                      },
                      {
                        "name": "part",
                        "type": 88,
                        "typeName": "BodyPart"
                      }
                    ],
                    "index": 8
                  }
                ]
              }
            }
          }
        },
        {
          "id": 85,
          "type": {
            "path": [
              "xcm",
              "v2",
              "NetworkId"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Any",
                    "index": 0
                  },
                  {
                    "name": "Named",
                    "fields": [
                      {
                        "type": 86,
                        "typeName": "WeakBoundedVec<u8, ConstU32<32>>"
                      }
                    ],
                    "index": 1
                  },
                  {
                    "name": "Polkadot",
                    "index": 2
                  },
                  {
                    "name": "Kusama",
                    "index": 3
                  }
                ]
              }
            }
          }
        },
        {
          "id": 86,
          "type": {
            "path": [
              "bounded_collections",
              "weak_bounded_vec",
              "WeakBoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 2
              },
              {
                "name": "S",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 14,
                    "typeName": "Vec<T>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 87,
          "type": {
            "path": [
              "xcm",
              "v2",
              "BodyId"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Unit",
                    "index": 0
                  },
                  {
                    "name": "Named",
                    "fields": [
                      {
                        "type": 86,
                        "typeName": "WeakBoundedVec<u8, ConstU32<32>>"
                      }
                    ],
                    "index": 1
                  },
                  {
                    "name": "Index",
                    "fields": [
                      {
                        "type": 59,
                        "typeName": "u32"
                      }
                    ],
                    "index": 2
                  },
                  {
                    "name": "Executive",
                    "index": 3
                  },
                  {
                    "name": "Technical",
                    "index": 4
                  },
                  {
                    "name": "Legislative",
                    "index": 5
                  },
                  {
                    "name": "Judicial",
                    "index": 6
                  },
                  {
                    "name": "Defense",
                    "index": 7
                  },
                  {
                    "name": "Administration",
                    "index": 8
                  },
                  {
                    "name": "Treasury",
                    "index": 9
                  }
                ]
              }
            }
          }
        },
        {
          "id": 88,
          "type": {
            "path": [
              "xcm",
              "v2",
              "BodyPart"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Voice",
                    "index": 0
                  },
                  {
                    "name": "Members",
                    "fields": [
                      {
                        "name": "count",
                        "type": 59,
                        "typeName": "u32"
                      }
                    ],
                    "index": 1
                  },
                  {
                    "name": "Fraction",
                    "fields": [
                      {
                        "name": "nom",
                        "type": 59,
                        "typeName": "u32"
                      },
                      {
                        "name": "denom",
                        "type": 59,
                        "typeName": "u32"
                      }
                    ],
                    "index": 2
                  },
                  {
                    "name": "AtLeastProportion",
                    "fields": [
                      {
                        "name": "nom",
                        "type": 59,
                        "typeName": "u32"
                      },
                      {
                        "name": "denom",
                        "type": 59,
                        "typeName": "u32"
                      }
                    ],
                    "index": 3
                  },
                  {
                    "name": "MoreThanProportion",
                    "fields": [
                      {
                        "name": "nom",
                        "type": 59,
                        "typeName": "u32"
                      },
                      {
                        "name": "denom",
                        "type": 59,
                        "typeName": "u32"
                      }
                    ],
                    "index": 4
                  }
                ]
              }
            }
          }
        },
        {
          "id": 89,
          "type": {
            "path": [
              "pallet_conviction_voting",
              "pallet",
              "Event"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              },
              {
                "name": "I",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Delegated",
                    "fields": [
                      {
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "type": 0,
                        "typeName": "T::AccountId"
                      }
                    ],
                    "index": 0,
                    "docs": [
                      "An account has delegated their vote to another account. \\[who, target\\]"
                    ]
                  },
                  {
                    "name": "Undelegated",
                    "fields": [
                      {
                        "type": 0,
                        "typeName": "T::AccountId"
                      }
                    ],
                    "index": 1,
                    "docs": [
                      "An \\[account\\] has cancelled a previous delegation operation."
                    ]
                  },
                  {
                    "name": "Voted",
                    "fields": [
                      {
                        "name": "who",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "vote",
                        "type": 90,
                        "typeName": "AccountVote<BalanceOf<T, I>>"
                      }
                    ],
                    "index": 2,
                    "docs": [
                      "An account that has voted"
                    ]
                  },
                  {
                    "name": "VoteRemoved",
                    "fields": [
                      {
                        "name": "who",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "vote",
                        "type": 90,
                        "typeName": "AccountVote<BalanceOf<T, I>>"
                      }
                    ],
                    "index": 3,
                    "docs": [
                      "A vote that been removed"
                    ]
                  }
                ]
              }
            },
            "docs": [
              "The `Event` enum of this pallet"
            ]
          }
        },
        {
          "id": 90,
          "type": {
            "path": [
              "pallet_conviction_voting",
              "vote",
              "AccountVote"
            ],
            "params": [
              {
                "name": "Balance",
                "type": 6
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Standard",
                    "fields": [
                      {
                        "name": "vote",
                        "type": 91,
                        "typeName": "Vote"
                      },
                      {
                        "name": "balance",
                        "type": 6,
                        "typeName": "Balance"
                      }
                    ],
                    "index": 0
                  },
                  {
                    "name": "Split",
                    "fields": [
                      {
                        "name": "aye",
                        "type": 6,
                        "typeName": "Balance"
                      },
                      {
                        "name": "nay",
                        "type": 6,
                        "typeName": "Balance"
                      }
                    ],
                    "index": 1
                  },
                  {
                    "name": "SplitAbstain",
                    "fields": [
                      {
                        "name": "aye",
                        "type": 6,
                        "typeName": "Balance"
                      },
                      {
                        "name": "nay",
                        "type": 6,
                        "typeName": "Balance"
                      },
                      {
                        "name": "abstain",
                        "type": 6,
                        "typeName": "Balance"
                      }
                    ],
                    "index": 2
                  }
                ]
              }
            }
          }
        },
        {
          "id": 91,
          "type": {
            "path": [
              "pallet_conviction_voting",
              "vote",
              "Vote"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 2
                  }
                ]
              }
            }
          }
        },
        {
          "id": 92,
          "type": {
            "path": [
              "pallet_referenda",
              "pallet",
              "Event"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              },
              {
                "name": "I",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Submitted",
                    "fields": [
                      {
                        "name": "index",
                        "type": 4,
                        "typeName": "ReferendumIndex",
                        "docs": [
                          "Index of the referendum."
                        ]
                      },
                      {
                        "name": "track",
                        "type": 93,
                        "typeName": "TrackIdOf<T, I>",
                        "docs": [
                          "The track (and by extension proposal dispatch origin) of this referendum."
                        ]
                      },
                      {
                        "name": "proposal",
                        "type": 94,
                        "typeName": "BoundedCallOf<T, I>",
                        "docs": [
                          "The proposal for the referendum."
                        ]
                      }
                    ],
                    "index": 0,
                    "docs": [
                      "A referendum has been submitted."
                    ]
                  },
                  {
                    "name": "DecisionDepositPlaced",
                    "fields": [
                      {
                        "name": "index",
                        "type": 4,
                        "typeName": "ReferendumIndex",
                        "docs": [
                          "Index of the referendum."
                        ]
                      },
                      {
                        "name": "who",
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": [
                          "The account who placed the deposit."
                        ]
                      },
                      {
                        "name": "amount",
                        "type": 6,
                        "typeName": "BalanceOf<T, I>",
                        "docs": [
                          "The amount placed by the account."
                        ]
                      }
                    ],
                    "index": 1,
                    "docs": [
                      "The decision deposit has been placed."
                    ]
                  },
                  {
                    "name": "DecisionDepositRefunded",
                    "fields": [
                      {
                        "name": "index",
                        "type": 4,
                        "typeName": "ReferendumIndex",
                        "docs": [
                          "Index of the referendum."
                        ]
                      },
                      {
                        "name": "who",
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": [
                          "The account who placed the deposit."
                        ]
                      },
                      {
                        "name": "amount",
                        "type": 6,
                        "typeName": "BalanceOf<T, I>",
                        "docs": [
                          "The amount placed by the account."
                        ]
                      }
                    ],
                    "index": 2,
                    "docs": [
                      "The decision deposit has been refunded."
                    ]
                  },
                  {
                    "name": "DepositSlashed",
                    "fields": [
                      {
                        "name": "who",
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": [
                          "The account who placed the deposit."
                        ]
                      },
                      {
                        "name": "amount",
                        "type": 6,
                        "typeName": "BalanceOf<T, I>",
                        "docs": [
                          "The amount placed by the account."
                        ]
                      }
                    ],
                    "index": 3,
                    "docs": [
                      "A deposit has been slashed."
                    ]
                  },
                  {
                    "name": "DecisionStarted",
                    "fields": [
                      {
                        "name": "index",
                        "type": 4,
                        "typeName": "ReferendumIndex",
                        "docs": [
                          "Index of the referendum."
                        ]
                      },
                      {
                        "name": "track",
                        "type": 93,
                        "typeName": "TrackIdOf<T, I>",
                        "docs": [
                          "The track (and by extension proposal dispatch origin) of this referendum."
                        ]
                      },
                      {
                        "name": "proposal",
                        "type": 94,
                        "typeName": "BoundedCallOf<T, I>",
                        "docs": [
                          "The proposal for the referendum."
                        ]
                      },
                      {
                        "name": "tally",
                        "type": 475,
                        "typeName": "T::Tally",
                        "docs": [
                          "The current tally of votes in this referendum."
                        ]
                      }
                    ],
                    "index": 4,
                    "docs": [
                      "A referendum has moved into the deciding phase."
                    ]
                  },
                  {
                    "name": "ConfirmStarted",
                    "fields": [
                      {
                        "name": "index",
                        "type": 4,
                        "typeName": "ReferendumIndex",
                        "docs": [
                          "Index of the referendum."
                        ]
                      }
                    ],
                    "index": 5
                  },
                  {
                    "name": "ConfirmAborted",
                    "fields": [
                      {
                        "name": "index",
                        "type": 4,
                        "typeName": "ReferendumIndex",
                        "docs": [
                          "Index of the referendum."
                        ]
                      }
                    ],
                    "index": 6
                  },
                  {
                    "name": "Confirmed",
                    "fields": [
                      {
                        "name": "index",
                        "type": 4,
                        "typeName": "ReferendumIndex",
                        "docs": [
                          "Index of the referendum."
                        ]
                      },
                      {
                        "name": "tally",
                        "type": 475,
                        "typeName": "T::Tally",
                        "docs": [
                          "The final tally of votes in this referendum."
                        ]
                      }
                    ],
                    "index": 7,
                    "docs": [
                      "A referendum has ended its confirmation phase and is ready for approval."
                    ]
                  },
                  {
                    "name": "Approved",
                    "fields": [
                      {
                        "name": "index",
                        "type": 4,
                        "typeName": "ReferendumIndex",
                        "docs": [
                          "Index of the referendum."
                        ]
                      }
                    ],
                    "index": 8,
                    "docs": [
                      "A referendum has been approved and its proposal has been scheduled."
                    ]
                  },
                  {
                    "name": "Rejected",
                    "fields": [
                      {
                        "name": "index",
                        "type": 4,
                        "typeName": "ReferendumIndex",
                        "docs": [
                          "Index of the referendum."
                        ]
                      },
                      {
                        "name": "tally",
                        "type": 475,
                        "typeName": "T::Tally",
                        "docs": [
                          "The final tally of votes in this referendum."
                        ]
                      }
                    ],
                    "index": 9,
                    "docs": [
                      "A proposal has been rejected by referendum."
                    ]
                  },
                  {
                    "name": "TimedOut",
                    "fields": [
                      {
                        "name": "index",
                        "type": 4,
                        "typeName": "ReferendumIndex",
                        "docs": [
                          "Index of the referendum."
                        ]
                      },
                      {
                        "name": "tally",
                        "type": 475,
                        "typeName": "T::Tally",
                        "docs": [
                          "The final tally of votes in this referendum."
                        ]
                      }
                    ],
                    "index": 10,
                    "docs": [
                      "A referendum has been timed out without being decided."
                    ]
                  },
                  {
                    "name": "Cancelled",
                    "fields": [
                      {
                        "name": "index",
                        "type": 4,
                        "typeName": "ReferendumIndex",
                        "docs": [
                          "Index of the referendum."
                        ]
                      },
                      {
                        "name": "tally",
                        "type": 475,
                        "typeName": "T::Tally",
                        "docs": [
                          "The final tally of votes in this referendum."
                        ]
                      }
                    ],
                    "index": 11,
                    "docs": [
                      "A referendum has been cancelled."
                    ]
                  },
                  {
                    "name": "Killed",
                    "fields": [
                      {
                        "name": "index",
                        "type": 4,
                        "typeName": "ReferendumIndex",
                        "docs": [
                          "Index of the referendum."
                        ]
                      },
                      {
                        "name": "tally",
                        "type": 475,
                        "typeName": "T::Tally",
                        "docs": [
                          "The final tally of votes in this referendum."
                        ]
                      }
                    ],
                    "index": 12,
                    "docs": [
                      "A referendum has been killed."
                    ]
                  },
                  {
                    "name": "SubmissionDepositRefunded",
                    "fields": [
                      {
                        "name": "index",
                        "type": 4,
                        "typeName": "ReferendumIndex",
                        "docs": [
                          "Index of the referendum."
                        ]
                      },
                      {
                        "name": "who",
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": [
                          "The account who placed the deposit."
                        ]
                      },
                      {
                        "name": "amount",
                        "type": 6,
                        "typeName": "BalanceOf<T, I>",
                        "docs": [
                          "The amount placed by the account."
                        ]
                      }
                    ],
                    "index": 13,
                    "docs": [
                      "The submission deposit has been refunded."
                    ]
                  },
                  {
                    "name": "MetadataSet",
                    "fields": [
                      {
                        "name": "index",
                        "type": 4,
                        "typeName": "ReferendumIndex",
                        "docs": [
                          "Index of the referendum."
                        ]
                      },
                      {
                        "name": "hash",
                        "type": 13,
                        "typeName": "T::Hash",
                        "docs": [
                          "Preimage hash."
                        ]
                      }
                    ],
                    "index": 14,
                    "docs": [
                      "Metadata for a referendum has been set."
                    ]
                  },
                  {
                    "name": "MetadataCleared",
                    "fields": [
                      {
                        "name": "index",
                        "type": 4,
                        "typeName": "ReferendumIndex",
                        "docs": [
                          "Index of the referendum."
                        ]
                      },
                      {
                        "name": "hash",
                        "type": 13,
                        "typeName": "T::Hash",
                        "docs": [
                          "Preimage hash."
                        ]
                      }
                    ],
                    "index": 15,
                    "docs": [
                      "Metadata for a referendum has been cleared."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "The `Event` enum of this pallet"
            ]
          }
        },
        {
          "id": 93,
          "type": {
            "def": {
              "primitive": "u16"
            }
          }
        },
        {
          "id": 94,
          "type": {
            "path": [
              "frame_support",
              "traits",
              "preimages",
              "Bounded"
            ],
            "params": [
              {
                "name": "T",
                "type": 95
              },
              {
                "name": "H",
                "type": 473
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Legacy",
                    "fields": [
                      {
                        "name": "hash",
                        "type": 13,
                        "typeName": "H::Output"
                      }
                    ],
                    "index": 0
                  },
                  {
                    "name": "Inline",
                    "fields": [
                      {
                        "type": 474,
                        "typeName": "BoundedInline"
                      }
                    ],
                    "index": 1
                  },
                  {
                    "name": "Lookup",
                    "fields": [
                      {
                        "name": "hash",
                        "type": 13,
                        "typeName": "H::Output"
                      },
                      {
                        "name": "len",
                        "type": 4,
                        "typeName": "u32"
                      }
                    ],
                    "index": 2
                  }
                ]
              }
            }
          }
        },
        {
          "id": 95,
          "type": {
            "path": [
              "polkadot_runtime",
              "RuntimeCall"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "System",
                    "fields": [
                      {
                        "type": 96,
                        "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<System, Runtime>"
                      }
                    ],
                    "index": 0
                  },
                  {
                    "name": "Scheduler",
                    "fields": [
                      {
                        "type": 100,
                        "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Scheduler, Runtime>"
                      }
                    ],
                    "index": 1
                  },
                  {
                    "name": "Preimage",
                    "fields": [
                      {
                        "type": 102,
                        "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Preimage, Runtime>"
                      }
                    ],
                    "index": 10
                  },
                  {
                    "name": "Babe",
                    "fields": [
                      {
                        "type": 104,
                        "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Babe, Runtime>"
                      }
                    ],
                    "index": 2
                  },
                  {
                    "name": "Timestamp",
                    "fields": [
                      {
                        "type": 113,
                        "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Timestamp, Runtime>"
                      }
                    ],
                    "index": 3
                  },
                  {
                    "name": "Indices",
                    "fields": [
                      {
                        "type": 114,
                        "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Indices, Runtime>"
                      }
                    ],
                    "index": 4
                  },
                  {
                    "name": "Balances",
                    "fields": [
                      {
                        "type": 117,
                        "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Balances, Runtime>"
                      }
                    ],
                    "index": 5
                  },
                  {
                    "name": "Staking",
                    "fields": [
                      {
                        "type": 120,
                        "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Staking, Runtime>"
                      }
                    ],
                    "index": 7
                  },
                  {
                    "name": "Session",
                    "fields": [
                      {
                        "type": 135,
                        "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Session, Runtime>"
                      }
                    ],
                    "index": 9
                  },
                  {
                    "name": "Grandpa",
                    "fields": [
                      {
                        "type": 142,
                        "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Grandpa, Runtime>"
                      }
                    ],
                    "index": 11
                  },
                  {
                    "name": "Treasury",
                    "fields": [
                      {
                        "type": 153,
                        "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Treasury, Runtime>"
                      }
                    ],
                    "index": 19
                  },
                  {
                    "name": "ConvictionVoting",
                    "fields": [
                      {
                        "type": 155,
                        "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ConvictionVoting, Runtime>"
                      }
                    ],
                    "index": 20
                  },
                  {
                    "name": "Referenda",
                    "fields": [
                      {
                        "type": 158,
                        "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Referenda, Runtime>"
                      }
                    ],
                    "index": 21
                  },
                  {
                    "name": "Whitelist",
                    "fields": [
                      {
                        "type": 168,
                        "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Whitelist, Runtime>"
                      }
                    ],
                    "index": 23
                  },
                  {
                    "name": "Claims",
                    "fields": [
                      {
                        "type": 169,
                        "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Claims, Runtime>"
                      }
                    ],
                    "index": 24
                  },
                  {
                    "name": "Vesting",
                    "fields": [
                      {
                        "type": 177,
                        "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Vesting, Runtime>"
                      }
                    ],
                    "index": 25
                  },
                  {
                    "name": "Utility",
                    "fields": [
                      {
                        "type": 179,
                        "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Utility, Runtime>"
                      }
                    ],
                    "index": 26
                  },
                  {
                    "name": "Proxy",
                    "fields": [
                      {
                        "type": 181,
                        "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Proxy, Runtime>"
                      }
                    ],
                    "index": 29
                  },
                  {
                    "name": "Multisig",
                    "fields": [
                      {
                        "type": 184,
                        "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Multisig, Runtime>"
                      }
                    ],
                    "index": 30
                  },
                  {
                    "name": "Bounties",
                    "fields": [
                      {
                        "type": 187,
                        "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Bounties, Runtime>"
                      }
                    ],
                    "index": 34
                  },
                  {
                    "name": "ChildBounties",
                    "fields": [
                      {
                        "type": 188,
                        "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ChildBounties, Runtime>"
                      }
                    ],
                    "index": 38
                  },
                  {
                    "name": "ElectionProviderMultiPhase",
                    "fields": [
                      {
                        "type": 189,
                        "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ElectionProviderMultiPhase, Runtime>"
                      }
                    ],
                    "index": 36
                  },
                  {
                    "name": "VoterList",
                    "fields": [
                      {
                        "type": 250,
                        "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<VoterList, Runtime>"
                      }
                    ],
                    "index": 37
                  },
                  {
                    "name": "NominationPools",
                    "fields": [
                      {
                        "type": 251,
                        "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<NominationPools, Runtime>"
                      }
                    ],
                    "index": 39
                  },
                  {
                    "name": "FastUnstake",
                    "fields": [
                      {
                        "type": 264,
                        "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<FastUnstake, Runtime>"
                      }
                    ],
                    "index": 40
                  },
                  {
                    "name": "Configuration",
                    "fields": [
                      {
                        "type": 265,
                        "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Configuration, Runtime>"
                      }
                    ],
                    "index": 51
                  },
                  {
                    "name": "ParasShared",
                    "fields": [
                      {
                        "type": 274,
                        "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ParasShared, Runtime>"
                      }
                    ],
                    "index": 52
                  },
                  {
                    "name": "ParaInclusion",
                    "fields": [
                      {
                        "type": 275,
                        "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ParaInclusion, Runtime>"
                      }
                    ],
                    "index": 53
                  },
                  {
                    "name": "ParaInherent",
                    "fields": [
                      {
                        "type": 276,
                        "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ParaInherent, Runtime>"
                      }
                    ],
                    "index": 54
                  },
                  {
                    "name": "Paras",
                    "fields": [
                      {
                        "type": 311,
                        "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Paras, Runtime>"
                      }
                    ],
                    "index": 56
                  },
                  {
                    "name": "Initializer",
                    "fields": [
                      {
                        "type": 313,
                        "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Initializer, Runtime>"
                      }
                    ],
                    "index": 57
                  },
                  {
                    "name": "Hrmp",
                    "fields": [
                      {
                        "type": 314,
                        "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Hrmp, Runtime>"
                      }
                    ],
                    "index": 60
                  },
                  {
                    "name": "ParasDisputes",
                    "fields": [
                      {
                        "type": 316,
                        "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ParasDisputes, Runtime>"
                      }
                    ],
                    "index": 62
                  },
                  {
                    "name": "ParasSlashing",
                    "fields": [
                      {
                        "type": 317,
                        "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ParasSlashing, Runtime>"
                      }
                    ],
                    "index": 63
                  },
                  {
                    "name": "OnDemand",
                    "fields": [
                      {
                        "type": 321,
                        "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<OnDemand, Runtime>"
                      }
                    ],
                    "index": 64
                  },
                  {
                    "name": "Registrar",
                    "fields": [
                      {
                        "type": 322,
                        "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Registrar, Runtime>"
                      }
                    ],
                    "index": 70
                  },
                  {
                    "name": "Slots",
                    "fields": [
                      {
                        "type": 323,
                        "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Slots, Runtime>"
                      }
                    ],
                    "index": 71
                  },
                  {
                    "name": "Auctions",
                    "fields": [
                      {
                        "type": 324,
                        "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Auctions, Runtime>"
                      }
                    ],
                    "index": 72
                  },
                  {
                    "name": "Crowdloan",
                    "fields": [
                      {
                        "type": 326,
                        "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Crowdloan, Runtime>"
                      }
                    ],
                    "index": 73
                  },
                  {
                    "name": "Coretime",
                    "fields": [
                      {
                        "type": 331,
                        "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Coretime, Runtime>"
                      }
                    ],
                    "index": 74
                  },
                  {
                    "name": "StateTrieMigration",
                    "fields": [
                      {
                        "type": 336,
                        "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<StateTrieMigration, Runtime>"
                      }
                    ],
                    "index": 98
                  },
                  {
                    "name": "XcmPallet",
                    "fields": [
                      {
                        "type": 342,
                        "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<XcmPallet, Runtime>"
                      }
                    ],
                    "index": 99
                  },
                  {
                    "name": "MessageQueue",
                    "fields": [
                      {
                        "type": 421,
                        "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<MessageQueue, Runtime>"
                      }
                    ],
                    "index": 100
                  },
                  {
                    "name": "AssetRate",
                    "fields": [
                      {
                        "type": 424,
                        "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<AssetRate, Runtime>"
                      }
                    ],
                    "index": 101
                  },
                  {
                    "name": "Beefy",
                    "fields": [
                      {
                        "type": 426,
                        "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Beefy, Runtime>"
                      }
                    ],
                    "index": 200
                  },
                  {
                    "name": "RcMigrator",
                    "fields": [
                      {
                        "type": 440,
                        "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<RcMigrator, Runtime>"
                      }
                    ],
                    "index": 255
                  }
                ]
              }
            }
          }
        },
        {
          "id": 96,
          "type": {
            "path": [
              "frame_system",
              "pallet",
              "Call"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "remark",
                    "fields": [
                      {
                        "name": "remark",
                        "type": 14,
                        "typeName": "Vec<u8>"
                      }
                    ],
                    "index": 0,
                    "docs": [
                      "Make some on-chain remark.",
                      "",
                      "Can be executed by every `origin`."
                    ]
                  },
                  {
                    "name": "set_heap_pages",
                    "fields": [
                      {
                        "name": "pages",
                        "type": 12,
                        "typeName": "u64"
                      }
                    ],
                    "index": 1,
                    "docs": [
                      "Set the number of pages in the WebAssembly environment's heap."
                    ]
                  },
                  {
                    "name": "set_code",
                    "fields": [
                      {
                        "name": "code",
                        "type": 14,
                        "typeName": "Vec<u8>"
                      }
                    ],
                    "index": 2,
                    "docs": [
                      "Set the new runtime code."
                    ]
                  },
                  {
                    "name": "set_code_without_checks",
                    "fields": [
                      {
                        "name": "code",
                        "type": 14,
                        "typeName": "Vec<u8>"
                      }
                    ],
                    "index": 3,
                    "docs": [
                      "Set the new runtime code without doing any checks of the given `code`.",
                      "",
                      "Note that runtime upgrades will not run if this is called with a not-increasing spec",
                      "version!"
                    ]
                  },
                  {
                    "name": "set_storage",
                    "fields": [
                      {
                        "name": "items",
                        "type": 97,
                        "typeName": "Vec<KeyValue>"
                      }
                    ],
                    "index": 4,
                    "docs": [
                      "Set some items of storage."
                    ]
                  },
                  {
                    "name": "kill_storage",
                    "fields": [
                      {
                        "name": "keys",
                        "type": 99,
                        "typeName": "Vec<Key>"
                      }
                    ],
                    "index": 5,
                    "docs": [
                      "Kill some items from storage."
                    ]
                  },
                  {
                    "name": "kill_prefix",
                    "fields": [
                      {
                        "name": "prefix",
                        "type": 14,
                        "typeName": "Key"
                      },
                      {
                        "name": "subkeys",
                        "type": 4,
                        "typeName": "u32"
                      }
                    ],
                    "index": 6,
                    "docs": [
                      "Kill all storage items with a key that starts with the given prefix.",
                      "",
                      "**NOTE:** We rely on the Root origin to provide us the number of subkeys under",
                      "the prefix we are removing to accurately calculate the weight of this function."
                    ]
                  },
                  {
                    "name": "remark_with_event",
                    "fields": [
                      {
                        "name": "remark",
                        "type": 14,
                        "typeName": "Vec<u8>"
                      }
                    ],
                    "index": 7,
                    "docs": [
                      "Make some on-chain remark and emit event."
                    ]
                  },
                  {
                    "name": "authorize_upgrade",
                    "fields": [
                      {
                        "name": "code_hash",
                        "type": 13,
                        "typeName": "T::Hash"
                      }
                    ],
                    "index": 9,
                    "docs": [
                      "Authorize an upgrade to a given `code_hash` for the runtime. The runtime can be supplied",
                      "later.",
                      "",
                      "This call requires Root origin."
                    ]
                  },
                  {
                    "name": "authorize_upgrade_without_checks",
                    "fields": [
                      {
                        "name": "code_hash",
                        "type": 13,
                        "typeName": "T::Hash"
                      }
                    ],
                    "index": 10,
                    "docs": [
                      "Authorize an upgrade to a given `code_hash` for the runtime. The runtime can be supplied",
                      "later.",
                      "",
                      "WARNING: This authorizes an upgrade that will take place without any safety checks, for",
                      "example that the spec name remains the same and that the version number increases. Not",
                      "recommended for normal use. Use `authorize_upgrade` instead.",
                      "",
                      "This call requires Root origin."
                    ]
                  },
                  {
                    "name": "apply_authorized_upgrade",
                    "fields": [
                      {
                        "name": "code",
                        "type": 14,
                        "typeName": "Vec<u8>"
                      }
                    ],
                    "index": 11,
                    "docs": [
                      "Provide the preimage (runtime binary) `code` for an upgrade that has been authorized.",
                      "",
                      "If the authorization required a version check, this call will ensure the spec name",
                      "remains unchanged and that the spec version has increased.",
                      "",
                      "Depending on the runtime's `OnSetCode` configuration, this function may directly apply",
                      "the new `code` in the same block or attempt to schedule the upgrade.",
                      "",
                      "All origins are allowed."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Contains a variant per dispatchable extrinsic that this pallet has."
            ]
          }
        },
        {
          "id": 97,
          "type": {
            "def": {
              "sequence": {
                "type": 98
              }
            }
          }
        },
        {
          "id": 98,
          "type": {
            "def": {
              "tuple": [
                14,
                14
              ]
            }
          }
        },
        {
          "id": 99,
          "type": {
            "def": {
              "sequence": {
                "type": 14
              }
            }
          }
        },
        {
          "id": 100,
          "type": {
            "path": [
              "pallet_scheduler",
              "pallet",
              "Call"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "schedule",
                    "fields": [
                      {
                        "name": "when",
                        "type": 4,
                        "typeName": "BlockNumberFor<T>"
                      },
                      {
                        "name": "maybe_periodic",
                        "type": 101,
                        "typeName": "Option<schedule::Period<BlockNumberFor<T>>>"
                      },
                      {
                        "name": "priority",
                        "type": 2,
                        "typeName": "schedule::Priority"
                      },
                      {
                        "name": "call",
                        "type": 95,
                        "typeName": "Box<<T as Config>::RuntimeCall>"
                      }
                    ],
                    "index": 0,
                    "docs": [
                      "Anonymously schedule a task."
                    ]
                  },
                  {
                    "name": "cancel",
                    "fields": [
                      {
                        "name": "when",
                        "type": 4,
                        "typeName": "BlockNumberFor<T>"
                      },
                      {
                        "name": "index",
                        "type": 4,
                        "typeName": "u32"
                      }
                    ],
                    "index": 1,
                    "docs": [
                      "Cancel an anonymously scheduled task."
                    ]
                  },
                  {
                    "name": "schedule_named",
                    "fields": [
                      {
                        "name": "id",
                        "type": 1,
                        "typeName": "TaskName"
                      },
                      {
                        "name": "when",
                        "type": 4,
                        "typeName": "BlockNumberFor<T>"
                      },
                      {
                        "name": "maybe_periodic",
                        "type": 101,
                        "typeName": "Option<schedule::Period<BlockNumberFor<T>>>"
                      },
                      {
                        "name": "priority",
                        "type": 2,
                        "typeName": "schedule::Priority"
                      },
                      {
                        "name": "call",
                        "type": 95,
                        "typeName": "Box<<T as Config>::RuntimeCall>"
                      }
                    ],
                    "index": 2,
                    "docs": [
                      "Schedule a named task."
                    ]
                  },
                  {
                    "name": "cancel_named",
                    "fields": [
                      {
                        "name": "id",
                        "type": 1,
                        "typeName": "TaskName"
                      }
                    ],
                    "index": 3,
                    "docs": [
                      "Cancel a named scheduled task."
                    ]
                  },
                  {
                    "name": "schedule_after",
                    "fields": [
                      {
                        "name": "after",
                        "type": 4,
                        "typeName": "BlockNumberFor<T>"
                      },
                      {
                        "name": "maybe_periodic",
                        "type": 101,
                        "typeName": "Option<schedule::Period<BlockNumberFor<T>>>"
                      },
                      {
                        "name": "priority",
                        "type": 2,
                        "typeName": "schedule::Priority"
                      },
                      {
                        "name": "call",
                        "type": 95,
                        "typeName": "Box<<T as Config>::RuntimeCall>"
                      }
                    ],
                    "index": 4,
                    "docs": [
                      "Anonymously schedule a task after a delay."
                    ]
                  },
                  {
                    "name": "schedule_named_after",
                    "fields": [
                      {
                        "name": "id",
                        "type": 1,
                        "typeName": "TaskName"
                      },
                      {
                        "name": "after",
                        "type": 4,
                        "typeName": "BlockNumberFor<T>"
                      },
                      {
                        "name": "maybe_periodic",
                        "type": 101,
                        "typeName": "Option<schedule::Period<BlockNumberFor<T>>>"
                      },
                      {
                        "name": "priority",
                        "type": 2,
                        "typeName": "schedule::Priority"
                      },
                      {
                        "name": "call",
                        "type": 95,
                        "typeName": "Box<<T as Config>::RuntimeCall>"
                      }
                    ],
                    "index": 5,
                    "docs": [
                      "Schedule a named task after a delay."
                    ]
                  },
                  {
                    "name": "set_retry",
                    "fields": [
                      {
                        "name": "task",
                        "type": 32,
                        "typeName": "TaskAddress<BlockNumberFor<T>>"
                      },
                      {
                        "name": "retries",
                        "type": 2,
                        "typeName": "u8"
                      },
                      {
                        "name": "period",
                        "type": 4,
                        "typeName": "BlockNumberFor<T>"
                      }
                    ],
                    "index": 6,
                    "docs": [
                      "Set a retry configuration for a task so that, in case its scheduled run fails, it will",
                      "be retried after `period` blocks, for a total amount of `retries` retries or until it",
                      "succeeds.",
                      "",
                      "Tasks which need to be scheduled for a retry are still subject to weight metering and",
                      "agenda space, same as a regular task. If a periodic task fails, it will be scheduled",
                      "normally while the task is retrying.",
                      "",
                      "Tasks scheduled as a result of a retry for a periodic task are unnamed, non-periodic",
                      "clones of the original task. Their retry configuration will be derived from the",
                      "original task's configuration, but will have a lower value for `remaining` than the",
                      "original `total_retries`."
                    ]
                  },
                  {
                    "name": "set_retry_named",
                    "fields": [
                      {
                        "name": "id",
                        "type": 1,
                        "typeName": "TaskName"
                      },
                      {
                        "name": "retries",
                        "type": 2,
                        "typeName": "u8"
                      },
                      {
                        "name": "period",
                        "type": 4,
                        "typeName": "BlockNumberFor<T>"
                      }
                    ],
                    "index": 7,
                    "docs": [
                      "Set a retry configuration for a named task so that, in case its scheduled run fails, it",
                      "will be retried after `period` blocks, for a total amount of `retries` retries or until",
                      "it succeeds.",
                      "",
                      "Tasks which need to be scheduled for a retry are still subject to weight metering and",
                      "agenda space, same as a regular task. If a periodic task fails, it will be scheduled",
                      "normally while the task is retrying.",
                      "",
                      "Tasks scheduled as a result of a retry for a periodic task are unnamed, non-periodic",
                      "clones of the original task. Their retry configuration will be derived from the",
                      "original task's configuration, but will have a lower value for `remaining` than the",
                      "original `total_retries`."
                    ]
                  },
                  {
                    "name": "cancel_retry",
                    "fields": [
                      {
                        "name": "task",
                        "type": 32,
                        "typeName": "TaskAddress<BlockNumberFor<T>>"
                      }
                    ],
                    "index": 8,
                    "docs": [
                      "Removes the retry configuration of a task."
                    ]
                  },
                  {
                    "name": "cancel_retry_named",
                    "fields": [
                      {
                        "name": "id",
                        "type": 1,
                        "typeName": "TaskName"
                      }
                    ],
                    "index": 9,
                    "docs": [
                      "Cancel the retry configuration of a named task."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Contains a variant per dispatchable extrinsic that this pallet has."
            ]
          }
        },
        {
          "id": 101,
          "type": {
            "path": [
              "Option"
            ],
            "params": [
              {
                "name": "T",
                "type": 32
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "None",
                    "index": 0
                  },
                  {
                    "name": "Some",
                    "fields": [
                      {
                        "type": 32
                      }
                    ],
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 102,
          "type": {
            "path": [
              "pallet_preimage",
              "pallet",
              "Call"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "note_preimage",
                    "fields": [
                      {
                        "name": "bytes",
                        "type": 14,
                        "typeName": "Vec<u8>"
                      }
                    ],
                    "index": 0,
                    "docs": [
                      "Register a preimage on-chain.",
                      "",
                      "If the preimage was previously requested, no fees or deposits are taken for providing",
                      "the preimage. Otherwise, a deposit is taken proportional to the size of the preimage."
                    ]
                  },
                  {
                    "name": "unnote_preimage",
                    "fields": [
                      {
                        "name": "hash",
                        "type": 13,
                        "typeName": "T::Hash"
                      }
                    ],
                    "index": 1,
                    "docs": [
                      "Clear an unrequested preimage from the runtime storage.",
                      "",
                      "If `len` is provided, then it will be a much cheaper operation.",
                      "",
                      "- `hash`: The hash of the preimage to be removed from the store.",
                      "- `len`: The length of the preimage of `hash`."
                    ]
                  },
                  {
                    "name": "request_preimage",
                    "fields": [
                      {
                        "name": "hash",
                        "type": 13,
                        "typeName": "T::Hash"
                      }
                    ],
                    "index": 2,
                    "docs": [
                      "Request a preimage be uploaded to the chain without paying any fees or deposits.",
                      "",
                      "If the preimage requests has already been provided on-chain, we unreserve any deposit",
                      "a user may have paid, and take the control of the preimage out of their hands."
                    ]
                  },
                  {
                    "name": "unrequest_preimage",
                    "fields": [
                      {
                        "name": "hash",
                        "type": 13,
                        "typeName": "T::Hash"
                      }
                    ],
                    "index": 3,
                    "docs": [
                      "Clear a previously made request for a preimage.",
                      "",
                      "NOTE: THIS MUST NOT BE CALLED ON `hash` MORE TIMES THAN `request_preimage`."
                    ]
                  },
                  {
                    "name": "ensure_updated",
                    "fields": [
                      {
                        "name": "hashes",
                        "type": 103,
                        "typeName": "Vec<T::Hash>"
                      }
                    ],
                    "index": 4,
                    "docs": [
                      "Ensure that the a bulk of pre-images is upgraded.",
                      "",
                      "The caller pays no fee if at least 90% of pre-images were successfully updated."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Contains a variant per dispatchable extrinsic that this pallet has."
            ]
          }
        },
        {
          "id": 103,
          "type": {
            "def": {
              "sequence": {
                "type": 13
              }
            }
          }
        },
        {
          "id": 104,
          "type": {
            "path": [
              "pallet_babe",
              "pallet",
              "Call"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "report_equivocation",
                    "fields": [
                      {
                        "name": "equivocation_proof",
                        "type": 105,
                        "typeName": "Box<EquivocationProof<HeaderFor<T>>>"
                      },
                      {
                        "name": "key_owner_proof",
                        "type": 109,
                        "typeName": "T::KeyOwnerProof"
                      }
                    ],
                    "index": 0,
                    "docs": [
                      "Report authority equivocation/misbehavior. This method will verify",
                      "the equivocation proof and validate the given key ownership proof",
                      "against the extracted offender. If both are valid, the offence will",
                      "be reported."
                    ]
                  },
                  {
                    "name": "report_equivocation_unsigned",
                    "fields": [
                      {
                        "name": "equivocation_proof",
                        "type": 105,
                        "typeName": "Box<EquivocationProof<HeaderFor<T>>>"
                      },
                      {
                        "name": "key_owner_proof",
                        "type": 109,
                        "typeName": "T::KeyOwnerProof"
                      }
                    ],
                    "index": 1,
                    "docs": [
                      "Report authority equivocation/misbehavior. This method will verify",
                      "the equivocation proof and validate the given key ownership proof",
                      "against the extracted offender. If both are valid, the offence will",
                      "be reported.",
                      "This extrinsic must be called unsigned and it is expected that only",
                      "block authors will call it (validated in `ValidateUnsigned`), as such",
                      "if the block author is defined it will be defined as the equivocation",
                      "reporter."
                    ]
                  },
                  {
                    "name": "plan_config_change",
                    "fields": [
                      {
                        "name": "config",
                        "type": 110,
                        "typeName": "NextConfigDescriptor"
                      }
                    ],
                    "index": 2,
                    "docs": [
                      "Plan an epoch config change. The epoch config change is recorded and will be enacted on",
                      "the next call to `enact_epoch_change`. The config will be activated one epoch after.",
                      "Multiple calls to this method will replace any existing planned config change that had",
                      "not been enacted yet."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Contains a variant per dispatchable extrinsic that this pallet has."
            ]
          }
        },
        {
          "id": 105,
          "type": {
            "path": [
              "sp_consensus_slots",
              "EquivocationProof"
            ],
            "params": [
              {
                "name": "Header",
                "type": 106
              },
              {
                "name": "Id",
                "type": 107
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "offender",
                    "type": 107,
                    "typeName": "Id"
                  },
                  {
                    "name": "slot",
                    "type": 108,
                    "typeName": "Slot"
                  },
                  {
                    "name": "first_header",
                    "type": 106,
                    "typeName": "Header"
                  },
                  {
                    "name": "second_header",
                    "type": 106,
                    "typeName": "Header"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 106,
          "type": {
            "path": [
              "sp_runtime",
              "generic",
              "header",
              "Header"
            ],
            "params": [
              {
                "name": "Number",
                "type": 4
              },
              {
                "name": "Hash",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "parent_hash",
                    "type": 13,
                    "typeName": "Hash::Output"
                  },
                  {
                    "name": "number",
                    "type": 59,
                    "typeName": "Number"
                  },
                  {
                    "name": "state_root",
                    "type": 13,
                    "typeName": "Hash::Output"
                  },
                  {
                    "name": "extrinsics_root",
                    "type": 13,
                    "typeName": "Hash::Output"
                  },
                  {
                    "name": "digest",
                    "type": 15,
                    "typeName": "Digest"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 107,
          "type": {
            "path": [
              "sp_consensus_babe",
              "app",
              "Public"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 1,
                    "typeName": "sr25519::Public"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 108,
          "type": {
            "path": [
              "sp_consensus_slots",
              "Slot"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 12,
                    "typeName": "u64"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 109,
          "type": {
            "path": [
              "sp_session",
              "MembershipProof"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "session",
                    "type": 4,
                    "typeName": "SessionIndex"
                  },
                  {
                    "name": "trie_nodes",
                    "type": 99,
                    "typeName": "Vec<Vec<u8>>"
                  },
                  {
                    "name": "validator_count",
                    "type": 4,
                    "typeName": "ValidatorCount"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 110,
          "type": {
            "path": [
              "sp_consensus_babe",
              "digests",
              "NextConfigDescriptor"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "V1",
                    "fields": [
                      {
                        "name": "c",
                        "type": 111,
                        "typeName": "(u64, u64)"
                      },
                      {
                        "name": "allowed_slots",
                        "type": 112,
                        "typeName": "AllowedSlots"
                      }
                    ],
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 111,
          "type": {
            "def": {
              "tuple": [
                12,
                12
              ]
            }
          }
        },
        {
          "id": 112,
          "type": {
            "path": [
              "sp_consensus_babe",
              "AllowedSlots"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "PrimarySlots",
                    "index": 0
                  },
                  {
                    "name": "PrimaryAndSecondaryPlainSlots",
                    "index": 1
                  },
                  {
                    "name": "PrimaryAndSecondaryVRFSlots",
                    "index": 2
                  }
                ]
              }
            }
          }
        },
        {
          "id": 113,
          "type": {
            "path": [
              "pallet_timestamp",
              "pallet",
              "Call"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "set",
                    "fields": [
                      {
                        "name": "now",
                        "type": 11,
                        "typeName": "T::Moment"
                      }
                    ],
                    "index": 0,
                    "docs": [
                      "Set the current time.",
                      "",
                      "This call should be invoked exactly once per block. It will panic at the finalization",
                      "phase, if this call hasn't been invoked by that time.",
                      "",
                      "The timestamp should be greater than the previous one by the amount specified by",
                      "[`Config::MinimumPeriod`].",
                      "",
                      "The dispatch origin for this call must be _None_.",
                      "",
                      "This dispatch class is _Mandatory_ to ensure it gets executed in the block. Be aware",
                      "that changing the complexity of this call could result exhausting the resources in a",
                      "block to execute any other calls.",
                      "",
                      "## Complexity",
                      "- `O(1)` (Note that implementations of `OnTimestampSet` must also be `O(1)`)",
                      "- 1 storage read and 1 storage mutation (codec `O(1)` because of `DidUpdate::take` in",
                      "  `on_finalize`)",
                      "- 1 event handler `on_timestamp_set`. Must be `O(1)`."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Contains a variant per dispatchable extrinsic that this pallet has."
            ]
          }
        },
        {
          "id": 114,
          "type": {
            "path": [
              "pallet_indices",
              "pallet",
              "Call"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "claim",
                    "fields": [
                      {
                        "name": "index",
                        "type": 4,
                        "typeName": "T::AccountIndex"
                      }
                    ],
                    "index": 0,
                    "docs": [
                      "Assign an previously unassigned index.",
                      "",
                      "Payment: `Deposit` is reserved from the sender account.",
                      "",
                      "The dispatch origin for this call must be _Signed_.",
                      "",
                      "- `index`: the index to be claimed. This must not be in use.",
                      "",
                      "Emits `IndexAssigned` if successful.",
                      "",
                      "## Complexity",
                      "- `O(1)`."
                    ]
                  },
                  {
                    "name": "transfer",
                    "fields": [
                      {
                        "name": "new",
                        "type": 115,
                        "typeName": "AccountIdLookupOf<T>"
                      },
                      {
                        "name": "index",
                        "type": 4,
                        "typeName": "T::AccountIndex"
                      }
                    ],
                    "index": 1,
                    "docs": [
                      "Assign an index already owned by the sender to another account. The balance reservation",
                      "is effectively transferred to the new account.",
                      "",
                      "The dispatch origin for this call must be _Signed_.",
                      "",
                      "- `index`: the index to be re-assigned. This must be owned by the sender.",
                      "- `new`: the new owner of the index. This function is a no-op if it is equal to sender.",
                      "",
                      "Emits `IndexAssigned` if successful.",
                      "",
                      "## Complexity",
                      "- `O(1)`."
                    ]
                  },
                  {
                    "name": "free",
                    "fields": [
                      {
                        "name": "index",
                        "type": 4,
                        "typeName": "T::AccountIndex"
                      }
                    ],
                    "index": 2,
                    "docs": [
                      "Free up an index owned by the sender.",
                      "",
                      "Payment: Any previous deposit placed for the index is unreserved in the sender account.",
                      "",
                      "The dispatch origin for this call must be _Signed_ and the sender must own the index.",
                      "",
                      "- `index`: the index to be freed. This must be owned by the sender.",
                      "",
                      "Emits `IndexFreed` if successful.",
                      "",
                      "## Complexity",
                      "- `O(1)`."
                    ]
                  },
                  {
                    "name": "force_transfer",
                    "fields": [
                      {
                        "name": "new",
                        "type": 115,
                        "typeName": "AccountIdLookupOf<T>"
                      },
                      {
                        "name": "index",
                        "type": 4,
                        "typeName": "T::AccountIndex"
                      },
                      {
                        "name": "freeze",
                        "type": 8,
                        "typeName": "bool"
                      }
                    ],
                    "index": 3,
                    "docs": [
                      "Force an index to an account. This doesn't require a deposit. If the index is already",
                      "held, then any deposit is reimbursed to its current owner.",
                      "",
                      "The dispatch origin for this call must be _Root_.",
                      "",
                      "- `index`: the index to be (re-)assigned.",
                      "- `new`: the new owner of the index. This function is a no-op if it is equal to sender.",
                      "- `freeze`: if set to `true`, will freeze the index so it cannot be transferred.",
                      "",
                      "Emits `IndexAssigned` if successful.",
                      "",
                      "## Complexity",
                      "- `O(1)`."
                    ]
                  },
                  {
                    "name": "freeze",
                    "fields": [
                      {
                        "name": "index",
                        "type": 4,
                        "typeName": "T::AccountIndex"
                      }
                    ],
                    "index": 4,
                    "docs": [
                      "Freeze an index so it will always point to the sender account. This consumes the",
                      "deposit.",
                      "",
                      "The dispatch origin for this call must be _Signed_ and the signing account must have a",
                      "non-frozen account `index`.",
                      "",
                      "- `index`: the index to be frozen in place.",
                      "",
                      "Emits `IndexFrozen` if successful.",
                      "",
                      "## Complexity",
                      "- `O(1)`."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Contains a variant per dispatchable extrinsic that this pallet has."
            ]
          }
        },
        {
          "id": 115,
          "type": {
            "path": [
              "sp_runtime",
              "multiaddress",
              "MultiAddress"
            ],
            "params": [
              {
                "name": "AccountId",
                "type": 0
              },
              {
                "name": "AccountIndex",
                "type": 35
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Id",
                    "fields": [
                      {
                        "type": 0,
                        "typeName": "AccountId"
                      }
                    ],
                    "index": 0
                  },
                  {
                    "name": "Index",
                    "fields": [
                      {
                        "type": 116,
                        "typeName": "AccountIndex"
                      }
                    ],
                    "index": 1
                  },
                  {
                    "name": "Raw",
                    "fields": [
                      {
                        "type": 14,
                        "typeName": "Vec<u8>"
                      }
                    ],
                    "index": 2
                  },
                  {
                    "name": "Address32",
                    "fields": [
                      {
                        "type": 1,
                        "typeName": "[u8; 32]"
                      }
                    ],
                    "index": 3
                  },
                  {
                    "name": "Address20",
                    "fields": [
                      {
                        "type": 62,
                        "typeName": "[u8; 20]"
                      }
                    ],
                    "index": 4
                  }
                ]
              }
            }
          }
        },
        {
          "id": 116,
          "type": {
            "def": {
              "compact": {
                "type": 35
              }
            }
          }
        },
        {
          "id": 117,
          "type": {
            "path": [
              "pallet_balances",
              "pallet",
              "Call"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              },
              {
                "name": "I",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "transfer_allow_death",
                    "fields": [
                      {
                        "name": "dest",
                        "type": 115,
                        "typeName": "AccountIdLookupOf<T>"
                      },
                      {
                        "name": "value",
                        "type": 63,
                        "typeName": "T::Balance"
                      }
                    ],
                    "index": 0,
                    "docs": [
                      "Transfer some liquid free balance to another account.",
                      "",
                      "`transfer_allow_death` will set the `FreeBalance` of the sender and receiver.",
                      "If the sender's account is below the existential deposit as a result",
                      "of the transfer, the account will be reaped.",
                      "",
                      "The dispatch origin for this call must be `Signed` by the transactor."
                    ]
                  },
                  {
                    "name": "force_transfer",
                    "fields": [
                      {
                        "name": "source",
                        "type": 115,
                        "typeName": "AccountIdLookupOf<T>"
                      },
                      {
                        "name": "dest",
                        "type": 115,
                        "typeName": "AccountIdLookupOf<T>"
                      },
                      {
                        "name": "value",
                        "type": 63,
                        "typeName": "T::Balance"
                      }
                    ],
                    "index": 2,
                    "docs": [
                      "Exactly as `transfer_allow_death`, except the origin must be root and the source account",
                      "may be specified."
                    ]
                  },
                  {
                    "name": "transfer_keep_alive",
                    "fields": [
                      {
                        "name": "dest",
                        "type": 115,
                        "typeName": "AccountIdLookupOf<T>"
                      },
                      {
                        "name": "value",
                        "type": 63,
                        "typeName": "T::Balance"
                      }
                    ],
                    "index": 3,
                    "docs": [
                      "Same as the [`transfer_allow_death`] call, but with a check that the transfer will not",
                      "kill the origin account.",
                      "",
                      "99% of the time you want [`transfer_allow_death`] instead.",
                      "",
                      "[`transfer_allow_death`]: struct.Pallet.html#method.transfer"
                    ]
                  },
                  {
                    "name": "transfer_all",
                    "fields": [
                      {
                        "name": "dest",
                        "type": 115,
                        "typeName": "AccountIdLookupOf<T>"
                      },
                      {
                        "name": "keep_alive",
                        "type": 8,
                        "typeName": "bool"
                      }
                    ],
                    "index": 4,
                    "docs": [
                      "Transfer the entire transferable balance from the caller account.",
                      "",
                      "NOTE: This function only attempts to transfer _transferable_ balances. This means that",
                      "any locked, reserved, or existential deposits (when `keep_alive` is `true`), will not be",
                      "transferred by this function. To ensure that this function results in a killed account,",
                      "you might need to prepare the account by removing any reference counters, storage",
                      "deposits, etc...",
                      "",
                      "The dispatch origin of this call must be Signed.",
                      "",
                      "- `dest`: The recipient of the transfer.",
                      "- `keep_alive`: A boolean to determine if the `transfer_all` operation should send all",
                      "  of the funds the account has, causing the sender account to be killed (false), or",
                      "  transfer everything except at least the existential deposit, which will guarantee to",
                      "  keep the sender account alive (true)."
                    ]
                  },
                  {
                    "name": "force_unreserve",
                    "fields": [
                      {
                        "name": "who",
                        "type": 115,
                        "typeName": "AccountIdLookupOf<T>"
                      },
                      {
                        "name": "amount",
                        "type": 6,
                        "typeName": "T::Balance"
                      }
                    ],
                    "index": 5,
                    "docs": [
                      "Unreserve some balance from a user by force.",
                      "",
                      "Can only be called by ROOT."
                    ]
                  },
                  {
                    "name": "upgrade_accounts",
                    "fields": [
                      {
                        "name": "who",
                        "type": 118,
                        "typeName": "Vec<T::AccountId>"
                      }
                    ],
                    "index": 6,
                    "docs": [
                      "Upgrade a specified account.",
                      "",
                      "- `origin`: Must be `Signed`.",
                      "- `who`: The account to be upgraded.",
                      "",
                      "This will waive the transaction fee if at least all but 10% of the accounts needed to",
                      "be upgraded. (We let some not have to be upgraded just in order to allow for the",
                      "possibility of churn)."
                    ]
                  },
                  {
                    "name": "force_set_balance",
                    "fields": [
                      {
                        "name": "who",
                        "type": 115,
                        "typeName": "AccountIdLookupOf<T>"
                      },
                      {
                        "name": "new_free",
                        "type": 63,
                        "typeName": "T::Balance"
                      }
                    ],
                    "index": 8,
                    "docs": [
                      "Set the regular balance of a given account.",
                      "",
                      "The dispatch origin for this call is `root`."
                    ]
                  },
                  {
                    "name": "force_adjust_total_issuance",
                    "fields": [
                      {
                        "name": "direction",
                        "type": 119,
                        "typeName": "AdjustmentDirection"
                      },
                      {
                        "name": "delta",
                        "type": 63,
                        "typeName": "T::Balance"
                      }
                    ],
                    "index": 9,
                    "docs": [
                      "Adjust the total issuance in a saturating way.",
                      "",
                      "Can only be called by root and always needs a positive `delta`.",
                      "",
                      "# Example"
                    ]
                  },
                  {
                    "name": "burn",
                    "fields": [
                      {
                        "name": "value",
                        "type": 63,
                        "typeName": "T::Balance"
                      },
                      {
                        "name": "keep_alive",
                        "type": 8,
                        "typeName": "bool"
                      }
                    ],
                    "index": 10,
                    "docs": [
                      "Burn the specified liquid free balance from the origin account.",
                      "",
                      "If the origin's account ends up below the existential deposit as a result",
                      "of the burn and `keep_alive` is false, the account will be reaped.",
                      "",
                      "Unlike sending funds to a _burn_ address, which merely makes the funds inaccessible,",
                      "this `burn` operation will reduce total issuance by the amount _burned_."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Contains a variant per dispatchable extrinsic that this pallet has."
            ]
          }
        },
        {
          "id": 118,
          "type": {
            "def": {
              "sequence": {
                "type": 0
              }
            }
          }
        },
        {
          "id": 119,
          "type": {
            "path": [
              "pallet_balances",
              "types",
              "AdjustmentDirection"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Increase",
                    "index": 0
                  },
                  {
                    "name": "Decrease",
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 120,
          "type": {
            "path": [
              "pallet_staking",
              "pallet",
              "pallet",
              "Call"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "bond",
                    "fields": [
                      {
                        "name": "value",
                        "type": 63,
                        "typeName": "BalanceOf<T>"
                      },
                      {
                        "name": "payee",
                        "type": 42,
                        "typeName": "RewardDestination<T::AccountId>"
                      }
                    ],
                    "index": 0,
                    "docs": [
                      "Take the origin account as a stash and lock up `value` of its balance. `controller` will",
                      "be the account that controls it.",
                      "",
                      "`value` must be more than the `minimum_balance` specified by `T::Currency`.",
                      "",
                      "The dispatch origin for this call must be _Signed_ by the stash account.",
                      "",
                      "Emits `Bonded`.",
                      "## Complexity",
                      "- Independent of the arguments. Moderate complexity.",
                      "- O(1).",
                      "- Three extra DB entries.",
                      "",
                      "NOTE: Two of the storage writes (`Self::bonded`, `Self::payee`) are _never_ cleaned",
                      "unless the `origin` falls below _existential deposit_ (or equal to 0) and gets removed",
                      "as dust."
                    ]
                  },
                  {
                    "name": "bond_extra",
                    "fields": [
                      {
                        "name": "max_additional",
                        "type": 63,
                        "typeName": "BalanceOf<T>"
                      }
                    ],
                    "index": 1,
                    "docs": [
                      "Add some extra amount that have appeared in the stash `free_balance` into the balance up",
                      "for staking.",
                      "",
                      "The dispatch origin for this call must be _Signed_ by the stash, not the controller.",
                      "",
                      "Use this if there are additional funds in your stash account that you wish to bond.",
                      "Unlike [`bond`](Self::bond) or [`unbond`](Self::unbond) this function does not impose",
                      "any limitation on the amount that can be added.",
                      "",
                      "Emits `Bonded`.",
                      "",
                      "## Complexity",
                      "- Independent of the arguments. Insignificant complexity.",
                      "- O(1)."
                    ]
                  },
                  {
                    "name": "unbond",
                    "fields": [
                      {
                        "name": "value",
                        "type": 63,
                        "typeName": "BalanceOf<T>"
                      }
                    ],
                    "index": 2,
                    "docs": [
                      "Schedule a portion of the stash to be unlocked ready for transfer out after the bond",
                      "period ends. If this leaves an amount actively bonded less than",
                      "T::Currency::minimum_balance(), then it is increased to the full amount.",
                      "",
                      "The dispatch origin for this call must be _Signed_ by the controller, not the stash.",
                      "",
                      "Once the unlock period is done, you can call `withdraw_unbonded` to actually move",
                      "the funds out of management ready for transfer.",
                      "",
                      "No more than a limited number of unlocking chunks (see `MaxUnlockingChunks`)",
                      "can co-exists at the same time. If there are no unlocking chunks slots available",
                      "[`Call::withdraw_unbonded`] is called to remove some of the chunks (if possible).",
                      "",
                      "If a user encounters the `InsufficientBond` error when calling this extrinsic,",
                      "they should call `chill` first in order to free up their bonded funds.",
                      "",
                      "Emits `Unbonded`.",
                      "",
                      "See also [`Call::withdraw_unbonded`]."
                    ]
                  },
                  {
                    "name": "withdraw_unbonded",
                    "fields": [
                      {
                        "name": "num_slashing_spans",
                        "type": 4,
                        "typeName": "u32"
                      }
                    ],
                    "index": 3,
                    "docs": [
                      "Remove any unlocked chunks from the `unlocking` queue from our management.",
                      "",
                      "This essentially frees up that balance to be used by the stash account to do whatever",
                      "it wants.",
                      "",
                      "The dispatch origin for this call must be _Signed_ by the controller.",
                      "",
                      "Emits `Withdrawn`.",
                      "",
                      "See also [`Call::unbond`].",
                      "",
                      "## Parameters",
                      "",
                      "- `num_slashing_spans` indicates the number of metadata slashing spans to clear when",
                      "this call results in a complete removal of all the data related to the stash account.",
                      "In this case, the `num_slashing_spans` must be larger or equal to the number of",
                      "slashing spans associated with the stash account in the [`SlashingSpans`] storage type,",
                      "otherwise the call will fail. The call weight is directly proportional to",
                      "`num_slashing_spans`.",
                      "",
                      "## Complexity",
                      "O(S) where S is the number of slashing spans to remove",
                      "NOTE: Weight annotation is the kill scenario, we refund otherwise."
                    ]
                  },
                  {
                    "name": "validate",
                    "fields": [
                      {
                        "name": "prefs",
                        "type": 44,
                        "typeName": "ValidatorPrefs"
                      }
                    ],
                    "index": 4,
                    "docs": [
                      "Declare the desire to validate for the origin controller.",
                      "",
                      "Effects will be felt at the beginning of the next era.",
                      "",
                      "The dispatch origin for this call must be _Signed_ by the controller, not the stash."
                    ]
                  },
                  {
                    "name": "nominate",
                    "fields": [
                      {
                        "name": "targets",
                        "type": 121,
                        "typeName": "Vec<AccountIdLookupOf<T>>"
                      }
                    ],
                    "index": 5,
                    "docs": [
                      "Declare the desire to nominate `targets` for the origin controller.",
                      "",
                      "Effects will be felt at the beginning of the next era.",
                      "",
                      "The dispatch origin for this call must be _Signed_ by the controller, not the stash.",
                      "",
                      "## Complexity",
                      "- The transaction's complexity is proportional to the size of `targets` (N)",
                      "which is capped at CompactAssignments::LIMIT (T::MaxNominations).",
                      "- Both the reads and writes follow a similar pattern."
                    ]
                  },
                  {
                    "name": "chill",
                    "index": 6,
                    "docs": [
                      "Declare no desire to either validate or nominate.",
                      "",
                      "Effects will be felt at the beginning of the next era.",
                      "",
                      "The dispatch origin for this call must be _Signed_ by the controller, not the stash.",
                      "",
                      "## Complexity",
                      "- Independent of the arguments. Insignificant complexity.",
                      "- Contains one read.",
                      "- Writes are limited to the `origin` account key."
                    ]
                  },
                  {
                    "name": "set_payee",
                    "fields": [
                      {
                        "name": "payee",
                        "type": 42,
                        "typeName": "RewardDestination<T::AccountId>"
                      }
                    ],
                    "index": 7,
                    "docs": [
                      "(Re-)set the payment target for a controller.",
                      "",
                      "Effects will be felt instantly (as soon as this function is completed successfully).",
                      "",
                      "The dispatch origin for this call must be _Signed_ by the controller, not the stash.",
                      "",
                      "## Complexity",
                      "- O(1)",
                      "- Independent of the arguments. Insignificant complexity.",
                      "- Contains a limited number of reads.",
                      "- Writes are limited to the `origin` account key.",
                      "---------"
                    ]
                  },
                  {
                    "name": "set_controller",
                    "index": 8,
                    "docs": [
                      "(Re-)sets the controller of a stash to the stash itself. This function previously",
                      "accepted a `controller` argument to set the controller to an account other than the",
                      "stash itself. This functionality has now been removed, now only setting the controller",
                      "to the stash, if it is not already.",
                      "",
                      "Effects will be felt instantly (as soon as this function is completed successfully).",
                      "",
                      "The dispatch origin for this call must be _Signed_ by the stash, not the controller.",
                      "",
                      "## Complexity",
                      "O(1)",
                      "- Independent of the arguments. Insignificant complexity.",
                      "- Contains a limited number of reads.",
                      "- Writes are limited to the `origin` account key."
                    ]
                  },
                  {
                    "name": "set_validator_count",
                    "fields": [
                      {
                        "name": "new",
                        "type": 59,
                        "typeName": "u32"
                      }
                    ],
                    "index": 9,
                    "docs": [
                      "Sets the ideal number of validators.",
                      "",
                      "The dispatch origin must be Root.",
                      "",
                      "## Complexity",
                      "O(1)"
                    ]
                  },
                  {
                    "name": "increase_validator_count",
                    "fields": [
                      {
                        "name": "additional",
                        "type": 59,
                        "typeName": "u32"
                      }
                    ],
                    "index": 10,
                    "docs": [
                      "Increments the ideal number of validators up to maximum of",
                      "`ElectionProviderBase::MaxWinners`.",
                      "",
                      "The dispatch origin must be Root.",
                      "",
                      "## Complexity",
                      "Same as [`Self::set_validator_count`]."
                    ]
                  },
                  {
                    "name": "scale_validator_count",
                    "fields": [
                      {
                        "name": "factor",
                        "type": 122,
                        "typeName": "Percent"
                      }
                    ],
                    "index": 11,
                    "docs": [
                      "Scale up the ideal number of validators by a factor up to maximum of",
                      "`ElectionProviderBase::MaxWinners`.",
                      "",
                      "The dispatch origin must be Root.",
                      "",
                      "## Complexity",
                      "Same as [`Self::set_validator_count`]."
                    ]
                  },
                  {
                    "name": "force_no_eras",
                    "index": 12,
                    "docs": [
                      "Force there to be no new eras indefinitely.",
                      "",
                      "The dispatch origin must be Root.",
                      "",
                      "# Warning",
                      "",
                      "The election process starts multiple blocks before the end of the era.",
                      "Thus the election process may be ongoing when this is called. In this case the",
                      "election will continue until the next era is triggered.",
                      "",
                      "## Complexity",
                      "- No arguments.",
                      "- Weight: O(1)"
                    ]
                  },
                  {
                    "name": "force_new_era",
                    "index": 13,
                    "docs": [
                      "Force there to be a new era at the end of the next session. After this, it will be",
                      "reset to normal (non-forced) behaviour.",
                      "",
                      "The dispatch origin must be Root.",
                      "",
                      "# Warning",
                      "",
                      "The election process starts multiple blocks before the end of the era.",
                      "If this is called just before a new era is triggered, the election process may not",
                      "have enough blocks to get a result.",
                      "",
                      "## Complexity",
                      "- No arguments.",
                      "- Weight: O(1)"
                    ]
                  },
                  {
                    "name": "set_invulnerables",
                    "fields": [
                      {
                        "name": "invulnerables",
                        "type": 118,
                        "typeName": "Vec<T::AccountId>"
                      }
                    ],
                    "index": 14,
                    "docs": [
                      "Set the validators who cannot be slashed (if any).",
                      "",
                      "The dispatch origin must be Root."
                    ]
                  },
                  {
                    "name": "force_unstake",
                    "fields": [
                      {
                        "name": "stash",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "num_slashing_spans",
                        "type": 4,
                        "typeName": "u32"
                      }
                    ],
                    "index": 15,
                    "docs": [
                      "Force a current staker to become completely unstaked, immediately.",
                      "",
                      "The dispatch origin must be Root.",
                      "",
                      "## Parameters",
                      "",
                      "- `num_slashing_spans`: Refer to comments on [`Call::withdraw_unbonded`] for more",
                      "details."
                    ]
                  },
                  {
                    "name": "force_new_era_always",
                    "index": 16,
                    "docs": [
                      "Force there to be a new era at the end of sessions indefinitely.",
                      "",
                      "The dispatch origin must be Root.",
                      "",
                      "# Warning",
                      "",
                      "The election process starts multiple blocks before the end of the era.",
                      "If this is called just before a new era is triggered, the election process may not",
                      "have enough blocks to get a result."
                    ]
                  },
                  {
                    "name": "cancel_deferred_slash",
                    "fields": [
                      {
                        "name": "era",
                        "type": 4,
                        "typeName": "EraIndex"
                      },
                      {
                        "name": "slash_indices",
                        "type": 123,
                        "typeName": "Vec<u32>"
                      }
                    ],
                    "index": 17,
                    "docs": [
                      "Cancel enactment of a deferred slash.",
                      "",
                      "Can be called by the `T::AdminOrigin`.",
                      "",
                      "Parameters: era and indices of the slashes for that era to kill."
                    ]
                  },
                  {
                    "name": "payout_stakers",
                    "fields": [
                      {
                        "name": "validator_stash",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "era",
                        "type": 4,
                        "typeName": "EraIndex"
                      }
                    ],
                    "index": 18,
                    "docs": [
                      "Pay out next page of the stakers behind a validator for the given era.",
                      "",
                      "- `validator_stash` is the stash account of the validator.",
                      "- `era` may be any era between `[current_era - history_depth; current_era]`.",
                      "",
                      "The origin of this call must be _Signed_. Any account can call this function, even if",
                      "it is not one of the stakers.",
                      "",
                      "The reward payout could be paged in case there are too many nominators backing the",
                      "`validator_stash`. This call will payout unpaid pages in an ascending order. To claim a",
                      "specific page, use `payout_stakers_by_page`.`",
                      "",
                      "If all pages are claimed, it returns an error `InvalidPage`."
                    ]
                  },
                  {
                    "name": "rebond",
                    "fields": [
                      {
                        "name": "value",
                        "type": 63,
                        "typeName": "BalanceOf<T>"
                      }
                    ],
                    "index": 19,
                    "docs": [
                      "Rebond a portion of the stash scheduled to be unlocked.",
                      "",
                      "The dispatch origin must be signed by the controller.",
                      "",
                      "## Complexity",
                      "- Time complexity: O(L), where L is unlocking chunks",
                      "- Bounded by `MaxUnlockingChunks`."
                    ]
                  },
                  {
                    "name": "reap_stash",
                    "fields": [
                      {
                        "name": "stash",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "num_slashing_spans",
                        "type": 4,
                        "typeName": "u32"
                      }
                    ],
                    "index": 20,
                    "docs": [
                      "Remove all data structures concerning a staker/stash once it is at a state where it can",
                      "be considered `dust` in the staking system. The requirements are:",
                      "",
                      "1. the `total_balance` of the stash is below existential deposit.",
                      "2. or, the `ledger.total` of the stash is below existential deposit.",
                      "3. or, existential deposit is zero and either `total_balance` or `ledger.total` is zero.",
                      "",
                      "The former can happen in cases like a slash; the latter when a fully unbonded account",
                      "is still receiving staking rewards in `RewardDestination::Staked`.",
                      "",
                      "It can be called by anyone, as long as `stash` meets the above requirements.",
                      "",
                      "Refunds the transaction fees upon successful execution.",
                      "",
                      "## Parameters",
                      "",
                      "- `num_slashing_spans`: Refer to comments on [`Call::withdraw_unbonded`] for more",
                      "details."
                    ]
                  },
                  {
                    "name": "kick",
                    "fields": [
                      {
                        "name": "who",
                        "type": 121,
                        "typeName": "Vec<AccountIdLookupOf<T>>"
                      }
                    ],
                    "index": 21,
                    "docs": [
                      "Remove the given nominations from the calling validator.",
                      "",
                      "Effects will be felt at the beginning of the next era.",
                      "",
                      "The dispatch origin for this call must be _Signed_ by the controller, not the stash.",
                      "",
                      "- `who`: A list of nominator stash accounts who are nominating this validator which",
                      "  should no longer be nominating this validator.",
                      "",
                      "Note: Making this call only makes sense if you first set the validator preferences to",
                      "block any further nominations."
                    ]
                  },
                  {
                    "name": "set_staking_configs",
                    "fields": [
                      {
                        "name": "min_nominator_bond",
                        "type": 124,
                        "typeName": "ConfigOp<BalanceOf<T>>"
                      },
                      {
                        "name": "min_validator_bond",
                        "type": 124,
                        "typeName": "ConfigOp<BalanceOf<T>>"
                      },
                      {
                        "name": "max_nominator_count",
                        "type": 125,
                        "typeName": "ConfigOp<u32>"
                      },
                      {
                        "name": "max_validator_count",
                        "type": 125,
                        "typeName": "ConfigOp<u32>"
                      },
                      {
                        "name": "chill_threshold",
                        "type": 126,
                        "typeName": "ConfigOp<Percent>"
                      },
                      {
                        "name": "min_commission",
                        "type": 127,
                        "typeName": "ConfigOp<Perbill>"
                      },
                      {
                        "name": "max_staked_rewards",
                        "type": 126,
                        "typeName": "ConfigOp<Percent>"
                      }
                    ],
                    "index": 22,
                    "docs": [
                      "Update the various staking configurations .",
                      "",
                      "* `min_nominator_bond`: The minimum active bond needed to be a nominator.",
                      "* `min_validator_bond`: The minimum active bond needed to be a validator.",
                      "* `max_nominator_count`: The max number of users who can be a nominator at once. When",
                      "  set to `None`, no limit is enforced.",
                      "* `max_validator_count`: The max number of users who can be a validator at once. When",
                      "  set to `None`, no limit is enforced.",
                      "* `chill_threshold`: The ratio of `max_nominator_count` or `max_validator_count` which",
                      "  should be filled in order for the `chill_other` transaction to work.",
                      "* `min_commission`: The minimum amount of commission that each validators must maintain.",
                      "  This is checked only upon calling `validate`. Existing validators are not affected.",
                      "",
                      "RuntimeOrigin must be Root to call this function.",
                      "",
                      "NOTE: Existing nominators and validators will not be affected by this update.",
                      "to kick people under the new limits, `chill_other` should be called."
                    ]
                  },
                  {
                    "name": "chill_other",
                    "fields": [
                      {
                        "name": "stash",
                        "type": 0,
                        "typeName": "T::AccountId"
                      }
                    ],
                    "index": 23,
                    "docs": [
                      "Declare a `controller` to stop participating as either a validator or nominator.",
                      "",
                      "Effects will be felt at the beginning of the next era.",
                      "",
                      "The dispatch origin for this call must be _Signed_, but can be called by anyone.",
                      "",
                      "If the caller is the same as the controller being targeted, then no further checks are",
                      "enforced, and this function behaves just like `chill`.",
                      "",
                      "If the caller is different than the controller being targeted, the following conditions",
                      "must be met:",
                      "",
                      "* `controller` must belong to a nominator who has become non-decodable,",
                      "",
                      "Or:",
                      "",
                      "* A `ChillThreshold` must be set and checked which defines how close to the max",
                      "  nominators or validators we must reach before users can start chilling one-another.",
                      "* A `MaxNominatorCount` and `MaxValidatorCount` must be set which is used to determine",
                      "  how close we are to the threshold.",
                      "* A `MinNominatorBond` and `MinValidatorBond` must be set and checked, which determines",
                      "  if this is a person that should be chilled because they have not met the threshold",
                      "  bond required.",
                      "",
                      "This can be helpful if bond requirements are updated, and we need to remove old users",
                      "who do not satisfy these requirements."
                    ]
                  },
                  {
                    "name": "force_apply_min_commission",
                    "fields": [
                      {
                        "name": "validator_stash",
                        "type": 0,
                        "typeName": "T::AccountId"
                      }
                    ],
                    "index": 24,
                    "docs": [
                      "Force a validator to have at least the minimum commission. This will not affect a",
                      "validator who already has a commission greater than or equal to the minimum. Any account",
                      "can call this."
                    ]
                  },
                  {
                    "name": "set_min_commission",
                    "fields": [
                      {
                        "name": "new",
                        "type": 43,
                        "typeName": "Perbill"
                      }
                    ],
                    "index": 25,
                    "docs": [
                      "Sets the minimum amount of commission that each validators must maintain.",
                      "",
                      "This call has lower privilege requirements than `set_staking_config` and can be called",
                      "by the `T::AdminOrigin`. Root can always call this."
                    ]
                  },
                  {
                    "name": "payout_stakers_by_page",
                    "fields": [
                      {
                        "name": "validator_stash",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "era",
                        "type": 4,
                        "typeName": "EraIndex"
                      },
                      {
                        "name": "page",
                        "type": 4,
                        "typeName": "Page"
                      }
                    ],
                    "index": 26,
                    "docs": [
                      "Pay out a page of the stakers behind a validator for the given era and page.",
                      "",
                      "- `validator_stash` is the stash account of the validator.",
                      "- `era` may be any era between `[current_era - history_depth; current_era]`.",
                      "- `page` is the page index of nominators to pay out with value between 0 and",
                      "  `num_nominators / T::MaxExposurePageSize`.",
                      "",
                      "The origin of this call must be _Signed_. Any account can call this function, even if",
                      "it is not one of the stakers.",
                      "",
                      "If a validator has more than [`Config::MaxExposurePageSize`] nominators backing",
                      "them, then the list of nominators is paged, with each page being capped at",
                      "[`Config::MaxExposurePageSize`.] If a validator has more than one page of nominators,",
                      "the call needs to be made for each page separately in order for all the nominators",
                      "backing a validator to receive the reward. The nominators are not sorted across pages",
                      "and so it should not be assumed the highest staker would be on the topmost page and vice",
                      "versa. If rewards are not claimed in [`Config::HistoryDepth`] eras, they are lost."
                    ]
                  },
                  {
                    "name": "update_payee",
                    "fields": [
                      {
                        "name": "controller",
                        "type": 0,
                        "typeName": "T::AccountId"
                      }
                    ],
                    "index": 27,
                    "docs": [
                      "Migrates an account's `RewardDestination::Controller` to",
                      "`RewardDestination::Account(controller)`.",
                      "",
                      "Effects will be felt instantly (as soon as this function is completed successfully).",
                      "",
                      "This will waive the transaction fee if the `payee` is successfully migrated."
                    ]
                  },
                  {
                    "name": "deprecate_controller_batch",
                    "fields": [
                      {
                        "name": "controllers",
                        "type": 128,
                        "typeName": "BoundedVec<T::AccountId, T::MaxControllersInDeprecationBatch>"
                      }
                    ],
                    "index": 28,
                    "docs": [
                      "Updates a batch of controller accounts to their corresponding stash account if they are",
                      "not the same. Ignores any controller accounts that do not exist, and does not operate if",
                      "the stash and controller are already the same.",
                      "",
                      "Effects will be felt instantly (as soon as this function is completed successfully).",
                      "",
                      "The dispatch origin must be `T::AdminOrigin`."
                    ]
                  },
                  {
                    "name": "restore_ledger",
                    "fields": [
                      {
                        "name": "stash",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "maybe_controller",
                        "type": 129,
                        "typeName": "Option<T::AccountId>"
                      },
                      {
                        "name": "maybe_total",
                        "type": 130,
                        "typeName": "Option<BalanceOf<T>>"
                      },
                      {
                        "name": "maybe_unlocking",
                        "type": 131,
                        "typeName": "Option<BoundedVec<UnlockChunk<BalanceOf<T>>, T::\nMaxUnlockingChunks>>"
                      }
                    ],
                    "index": 29,
                    "docs": [
                      "Restores the state of a ledger which is in an inconsistent state.",
                      "",
                      "The requirements to restore a ledger are the following:",
                      "* The stash is bonded; or",
                      "* The stash is not bonded but it has a staking lock left behind; or",
                      "* If the stash has an associated ledger and its state is inconsistent; or",
                      "* If the ledger is not corrupted *but* its staking lock is out of sync.",
                      "",
                      "The `maybe_*` input parameters will overwrite the corresponding data and metadata of the",
                      "ledger associated with the stash. If the input parameters are not set, the ledger will",
                      "be reset values from on-chain state."
                    ]
                  },
                  {
                    "name": "withdraw_overstake",
                    "fields": [
                      {
                        "name": "stash",
                        "type": 0,
                        "typeName": "T::AccountId"
                      }
                    ],
                    "index": 32,
                    "docs": [
                      "Adjusts the staking ledger by withdrawing any excess staked amount.",
                      "",
                      "This function corrects cases where a user's recorded stake in the ledger",
                      "exceeds their actual staked funds. This situation can arise due to cases such as",
                      "external slashing by another pallet, leading to an inconsistency between the ledger",
                      "and the actual stake."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Contains a variant per dispatchable extrinsic that this pallet has."
            ]
          }
        },
        {
          "id": 121,
          "type": {
            "def": {
              "sequence": {
                "type": 115
              }
            }
          }
        },
        {
          "id": 122,
          "type": {
            "path": [
              "sp_arithmetic",
              "per_things",
              "Percent"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 2,
                    "typeName": "u8"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 123,
          "type": {
            "def": {
              "sequence": {
                "type": 4
              }
            }
          }
        },
        {
          "id": 124,
          "type": {
            "path": [
              "pallet_staking",
              "pallet",
              "pallet",
              "ConfigOp"
            ],
            "params": [
              {
                "name": "T",
                "type": 6
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Noop",
                    "index": 0
                  },
                  {
                    "name": "Set",
                    "fields": [
                      {
                        "type": 6,
                        "typeName": "T"
                      }
                    ],
                    "index": 1
                  },
                  {
                    "name": "Remove",
                    "index": 2
                  }
                ]
              }
            }
          }
        },
        {
          "id": 125,
          "type": {
            "path": [
              "pallet_staking",
              "pallet",
              "pallet",
              "ConfigOp"
            ],
            "params": [
              {
                "name": "T",
                "type": 4
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Noop",
                    "index": 0
                  },
                  {
                    "name": "Set",
                    "fields": [
                      {
                        "type": 4,
                        "typeName": "T"
                      }
                    ],
                    "index": 1
                  },
                  {
                    "name": "Remove",
                    "index": 2
                  }
                ]
              }
            }
          }
        },
        {
          "id": 126,
          "type": {
            "path": [
              "pallet_staking",
              "pallet",
              "pallet",
              "ConfigOp"
            ],
            "params": [
              {
                "name": "T",
                "type": 122
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Noop",
                    "index": 0
                  },
                  {
                    "name": "Set",
                    "fields": [
                      {
                        "type": 122,
                        "typeName": "T"
                      }
                    ],
                    "index": 1
                  },
                  {
                    "name": "Remove",
                    "index": 2
                  }
                ]
              }
            }
          }
        },
        {
          "id": 127,
          "type": {
            "path": [
              "pallet_staking",
              "pallet",
              "pallet",
              "ConfigOp"
            ],
            "params": [
              {
                "name": "T",
                "type": 43
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Noop",
                    "index": 0
                  },
                  {
                    "name": "Set",
                    "fields": [
                      {
                        "type": 43,
                        "typeName": "T"
                      }
                    ],
                    "index": 1
                  },
                  {
                    "name": "Remove",
                    "index": 2
                  }
                ]
              }
            }
          }
        },
        {
          "id": 128,
          "type": {
            "path": [
              "bounded_collections",
              "bounded_vec",
              "BoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 0
              },
              {
                "name": "S",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 118,
                    "typeName": "Vec<T>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 129,
          "type": {
            "path": [
              "Option"
            ],
            "params": [
              {
                "name": "T",
                "type": 0
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "None",
                    "index": 0
                  },
                  {
                    "name": "Some",
                    "fields": [
                      {
                        "type": 0
                      }
                    ],
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 130,
          "type": {
            "path": [
              "Option"
            ],
            "params": [
              {
                "name": "T",
                "type": 6
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "None",
                    "index": 0
                  },
                  {
                    "name": "Some",
                    "fields": [
                      {
                        "type": 6
                      }
                    ],
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 131,
          "type": {
            "path": [
              "Option"
            ],
            "params": [
              {
                "name": "T",
                "type": 132
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "None",
                    "index": 0
                  },
                  {
                    "name": "Some",
                    "fields": [
                      {
                        "type": 132
                      }
                    ],
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 132,
          "type": {
            "path": [
              "bounded_collections",
              "bounded_vec",
              "BoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 133
              },
              {
                "name": "S",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 134,
                    "typeName": "Vec<T>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 133,
          "type": {
            "path": [
              "pallet_staking",
              "UnlockChunk"
            ],
            "params": [
              {
                "name": "Balance",
                "type": 6
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "value",
                    "type": 63,
                    "typeName": "Balance"
                  },
                  {
                    "name": "era",
                    "type": 59,
                    "typeName": "EraIndex"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 134,
          "type": {
            "def": {
              "sequence": {
                "type": 133
              }
            }
          }
        },
        {
          "id": 135,
          "type": {
            "path": [
              "pallet_session",
              "pallet",
              "Call"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "set_keys",
                    "fields": [
                      {
                        "name": "keys",
                        "type": 136,
                        "typeName": "T::Keys"
                      },
                      {
                        "name": "proof",
                        "type": 14,
                        "typeName": "Vec<u8>"
                      }
                    ],
                    "index": 0,
                    "docs": [
                      "Sets the session key(s) of the function caller to `keys`.",
                      "Allows an account to set its session key prior to becoming a validator.",
                      "This doesn't take effect until the next session.",
                      "",
                      "The dispatch origin of this function must be signed.",
                      "",
                      "## Complexity",
                      "- `O(1)`. Actual cost depends on the number of length of `T::Keys::key_ids()` which is",
                      "  fixed."
                    ]
                  },
                  {
                    "name": "purge_keys",
                    "index": 1,
                    "docs": [
                      "Removes any session key(s) of the function caller.",
                      "",
                      "This doesn't take effect until the next session.",
                      "",
                      "The dispatch origin of this function must be Signed and the account must be either be",
                      "convertible to a validator ID using the chain's typical addressing system (this usually",
                      "means being a controller account) or directly convertible into a validator ID (which",
                      "usually means being a stash account).",
                      "",
                      "## Complexity",
                      "- `O(1)` in number of key types. Actual cost depends on the number of length of",
                      "  `T::Keys::key_ids()` which is fixed."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Contains a variant per dispatchable extrinsic that this pallet has."
            ]
          }
        },
        {
          "id": 136,
          "type": {
            "path": [
              "polkadot_runtime",
              "SessionKeys"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "grandpa",
                    "type": 53,
                    "typeName": "<Grandpa as $crate::BoundToRuntimeAppPublic>::Public"
                  },
                  {
                    "name": "babe",
                    "type": 107,
                    "typeName": "<Babe as $crate::BoundToRuntimeAppPublic>::Public"
                  },
                  {
                    "name": "para_validator",
                    "type": 137,
                    "typeName": "<Initializer as $crate::BoundToRuntimeAppPublic>::Public"
                  },
                  {
                    "name": "para_assignment",
                    "type": 138,
                    "typeName": "<ParaSessionInfo as $crate::BoundToRuntimeAppPublic>::Public"
                  },
                  {
                    "name": "authority_discovery",
                    "type": 139,
                    "typeName": "<AuthorityDiscovery as $crate::BoundToRuntimeAppPublic>::Public"
                  },
                  {
                    "name": "beefy",
                    "type": 140,
                    "typeName": "<Beefy as $crate::BoundToRuntimeAppPublic>::Public"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 137,
          "type": {
            "path": [
              "polkadot_primitives",
              "v8",
              "validator_app",
              "Public"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 1,
                    "typeName": "sr25519::Public"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 138,
          "type": {
            "path": [
              "polkadot_primitives",
              "v8",
              "assignment_app",
              "Public"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 1,
                    "typeName": "sr25519::Public"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 139,
          "type": {
            "path": [
              "sp_authority_discovery",
              "app",
              "Public"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 1,
                    "typeName": "sr25519::Public"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 140,
          "type": {
            "path": [
              "sp_consensus_beefy",
              "ecdsa_crypto",
              "Public"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 141,
                    "typeName": "ecdsa::Public"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 141,
          "type": {
            "def": {
              "array": {
                "len": 33,
                "type": 2
              }
            }
          }
        },
        {
          "id": 142,
          "type": {
            "path": [
              "pallet_grandpa",
              "pallet",
              "Call"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "report_equivocation",
                    "fields": [
                      {
                        "name": "equivocation_proof",
                        "type": 143,
                        "typeName": "Box<EquivocationProof<T::Hash, BlockNumberFor<T>>>"
                      },
                      {
                        "name": "key_owner_proof",
                        "type": 109,
                        "typeName": "T::KeyOwnerProof"
                      }
                    ],
                    "index": 0,
                    "docs": [
                      "Report voter equivocation/misbehavior. This method will verify the",
                      "equivocation proof and validate the given key ownership proof",
                      "against the extracted offender. If both are valid, the offence",
                      "will be reported."
                    ]
                  },
                  {
                    "name": "report_equivocation_unsigned",
                    "fields": [
                      {
                        "name": "equivocation_proof",
                        "type": 143,
                        "typeName": "Box<EquivocationProof<T::Hash, BlockNumberFor<T>>>"
                      },
                      {
                        "name": "key_owner_proof",
                        "type": 109,
                        "typeName": "T::KeyOwnerProof"
                      }
                    ],
                    "index": 1,
                    "docs": [
                      "Report voter equivocation/misbehavior. This method will verify the",
                      "equivocation proof and validate the given key ownership proof",
                      "against the extracted offender. If both are valid, the offence",
                      "will be reported.",
                      "",
                      "This extrinsic must be called unsigned and it is expected that only",
                      "block authors will call it (validated in `ValidateUnsigned`), as such",
                      "if the block author is defined it will be defined as the equivocation",
                      "reporter."
                    ]
                  },
                  {
                    "name": "note_stalled",
                    "fields": [
                      {
                        "name": "delay",
                        "type": 4,
                        "typeName": "BlockNumberFor<T>"
                      },
                      {
                        "name": "best_finalized_block_number",
                        "type": 4,
                        "typeName": "BlockNumberFor<T>"
                      }
                    ],
                    "index": 2,
                    "docs": [
                      "Note that the current authority set of the GRANDPA finality gadget has stalled.",
                      "",
                      "This will trigger a forced authority set change at the beginning of the next session, to",
                      "be enacted `delay` blocks after that. The `delay` should be high enough to safely assume",
                      "that the block signalling the forced change will not be re-orged e.g. 1000 blocks.",
                      "The block production rate (which may be slowed down because of finality lagging) should",
                      "be taken into account when choosing the `delay`. The GRANDPA voters based on the new",
                      "authority will start voting on top of `best_finalized_block_number` for new finalized",
                      "blocks. `best_finalized_block_number` should be the highest of the latest finalized",
                      "block of all validators of the new authority set.",
                      "",
                      "Only callable by root."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Contains a variant per dispatchable extrinsic that this pallet has."
            ]
          }
        },
        {
          "id": 143,
          "type": {
            "path": [
              "sp_consensus_grandpa",
              "EquivocationProof"
            ],
            "params": [
              {
                "name": "H",
                "type": 13
              },
              {
                "name": "N",
                "type": 4
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "set_id",
                    "type": 12,
                    "typeName": "SetId"
                  },
                  {
                    "name": "equivocation",
                    "type": 144,
                    "typeName": "Equivocation<H, N>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 144,
          "type": {
            "path": [
              "sp_consensus_grandpa",
              "Equivocation"
            ],
            "params": [
              {
                "name": "H",
                "type": 13
              },
              {
                "name": "N",
                "type": 4
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Prevote",
                    "fields": [
                      {
                        "type": 145,
                        "typeName": "finality_grandpa::Equivocation<AuthorityId, finality_grandpa::Prevote<\nH, N>, AuthoritySignature,>"
                      }
                    ],
                    "index": 0
                  },
                  {
                    "name": "Precommit",
                    "fields": [
                      {
                        "type": 150,
                        "typeName": "finality_grandpa::Equivocation<AuthorityId, finality_grandpa::Precommit\n<H, N>, AuthoritySignature,>"
                      }
                    ],
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 145,
          "type": {
            "path": [
              "finality_grandpa",
              "Equivocation"
            ],
            "params": [
              {
                "name": "Id",
                "type": 53
              },
              {
                "name": "V",
                "type": 146
              },
              {
                "name": "S",
                "type": 147
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "round_number",
                    "type": 12,
                    "typeName": "u64"
                  },
                  {
                    "name": "identity",
                    "type": 53,
                    "typeName": "Id"
                  },
                  {
                    "name": "first",
                    "type": 149,
                    "typeName": "(V, S)"
                  },
                  {
                    "name": "second",
                    "type": 149,
                    "typeName": "(V, S)"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 146,
          "type": {
            "path": [
              "finality_grandpa",
              "Prevote"
            ],
            "params": [
              {
                "name": "H",
                "type": 13
              },
              {
                "name": "N",
                "type": 4
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "target_hash",
                    "type": 13,
                    "typeName": "H"
                  },
                  {
                    "name": "target_number",
                    "type": 4,
                    "typeName": "N"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 147,
          "type": {
            "path": [
              "sp_consensus_grandpa",
              "app",
              "Signature"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 148,
                    "typeName": "ed25519::Signature"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 148,
          "type": {
            "def": {
              "array": {
                "len": 64,
                "type": 2
              }
            }
          }
        },
        {
          "id": 149,
          "type": {
            "def": {
              "tuple": [
                146,
                147
              ]
            }
          }
        },
        {
          "id": 150,
          "type": {
            "path": [
              "finality_grandpa",
              "Equivocation"
            ],
            "params": [
              {
                "name": "Id",
                "type": 53
              },
              {
                "name": "V",
                "type": 151
              },
              {
                "name": "S",
                "type": 147
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "round_number",
                    "type": 12,
                    "typeName": "u64"
                  },
                  {
                    "name": "identity",
                    "type": 53,
                    "typeName": "Id"
                  },
                  {
                    "name": "first",
                    "type": 152,
                    "typeName": "(V, S)"
                  },
                  {
                    "name": "second",
                    "type": 152,
                    "typeName": "(V, S)"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 151,
          "type": {
            "path": [
              "finality_grandpa",
              "Precommit"
            ],
            "params": [
              {
                "name": "H",
                "type": 13
              },
              {
                "name": "N",
                "type": 4
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "target_hash",
                    "type": 13,
                    "typeName": "H"
                  },
                  {
                    "name": "target_number",
                    "type": 4,
                    "typeName": "N"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 152,
          "type": {
            "def": {
              "tuple": [
                151,
                147
              ]
            }
          }
        },
        {
          "id": 153,
          "type": {
            "path": [
              "pallet_treasury",
              "pallet",
              "Call"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              },
              {
                "name": "I",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "spend_local",
                    "fields": [
                      {
                        "name": "amount",
                        "type": 63,
                        "typeName": "BalanceOf<T, I>"
                      },
                      {
                        "name": "beneficiary",
                        "type": 115,
                        "typeName": "AccountIdLookupOf<T>"
                      }
                    ],
                    "index": 3,
                    "docs": [
                      "Propose and approve a spend of treasury funds.",
                      "",
                      "## Dispatch Origin",
                      "",
                      "Must be [`Config::SpendOrigin`] with the `Success` value being at least `amount`.",
                      "",
                      "### Details",
                      "NOTE: For record-keeping purposes, the proposer is deemed to be equivalent to the",
                      "beneficiary.",
                      "",
                      "### Parameters",
                      "- `amount`: The amount to be transferred from the treasury to the `beneficiary`.",
                      "- `beneficiary`: The destination account for the transfer.",
                      "",
                      "## Events",
                      "",
                      "Emits [`Event::SpendApproved`] if successful."
                    ]
                  },
                  {
                    "name": "remove_approval",
                    "fields": [
                      {
                        "name": "proposal_id",
                        "type": 59,
                        "typeName": "ProposalIndex"
                      }
                    ],
                    "index": 4,
                    "docs": [
                      "Force a previously approved proposal to be removed from the approval queue.",
                      "",
                      "## Dispatch Origin",
                      "",
                      "Must be [`Config::RejectOrigin`].",
                      "",
                      "## Details",
                      "",
                      "The original deposit will no longer be returned.",
                      "",
                      "### Parameters",
                      "- `proposal_id`: The index of a proposal",
                      "",
                      "### Complexity",
                      "- O(A) where `A` is the number of approvals",
                      "",
                      "### Errors",
                      "- [`Error::ProposalNotApproved`]: The `proposal_id` supplied was not found in the",
                      "  approval queue, i.e., the proposal has not been approved. This could also mean the",
                      "  proposal does not exist altogether, thus there is no way it would have been approved",
                      "  in the first place."
                    ]
                  },
                  {
                    "name": "spend",
                    "fields": [
                      {
                        "name": "asset_kind",
                        "type": 55,
                        "typeName": "Box<T::AssetKind>"
                      },
                      {
                        "name": "amount",
                        "type": 63,
                        "typeName": "AssetBalanceOf<T, I>"
                      },
                      {
                        "name": "beneficiary",
                        "type": 81,
                        "typeName": "Box<BeneficiaryLookupOf<T, I>>"
                      },
                      {
                        "name": "valid_from",
                        "type": 154,
                        "typeName": "Option<BlockNumberFor<T>>"
                      }
                    ],
                    "index": 5,
                    "docs": [
                      "Propose and approve a spend of treasury funds.",
                      "",
                      "## Dispatch Origin",
                      "",
                      "Must be [`Config::SpendOrigin`] with the `Success` value being at least",
                      "`amount` of `asset_kind` in the native asset. The amount of `asset_kind` is converted",
                      "for assertion using the [`Config::BalanceConverter`].",
                      "",
                      "## Details",
                      "",
                      "Create an approved spend for transferring a specific `amount` of `asset_kind` to a",
                      "designated beneficiary. The spend must be claimed using the `payout` dispatchable within",
                      "the [`Config::PayoutPeriod`].",
                      "",
                      "### Parameters",
                      "- `asset_kind`: An indicator of the specific asset class to be spent.",
                      "- `amount`: The amount to be transferred from the treasury to the `beneficiary`.",
                      "- `beneficiary`: The beneficiary of the spend.",
                      "- `valid_from`: The block number from which the spend can be claimed. It can refer to",
                      "  the past if the resulting spend has not yet expired according to the",
                      "  [`Config::PayoutPeriod`]. If `None`, the spend can be claimed immediately after",
                      "  approval.",
                      "",
                      "## Events",
                      "",
                      "Emits [`Event::AssetSpendApproved`] if successful."
                    ]
                  },
                  {
                    "name": "payout",
                    "fields": [
                      {
                        "name": "index",
                        "type": 4,
                        "typeName": "SpendIndex"
                      }
                    ],
                    "index": 6,
                    "docs": [
                      "Claim a spend.",
                      "",
                      "## Dispatch Origin",
                      "",
                      "Must be signed",
                      "",
                      "## Details",
                      "",
                      "Spends must be claimed within some temporal bounds. A spend may be claimed within one",
                      "[`Config::PayoutPeriod`] from the `valid_from` block.",
                      "In case of a payout failure, the spend status must be updated with the `check_status`",
                      "dispatchable before retrying with the current function.",
                      "",
                      "### Parameters",
                      "- `index`: The spend index.",
                      "",
                      "## Events",
                      "",
                      "Emits [`Event::Paid`] if successful."
                    ]
                  },
                  {
                    "name": "check_status",
                    "fields": [
                      {
                        "name": "index",
                        "type": 4,
                        "typeName": "SpendIndex"
                      }
                    ],
                    "index": 7,
                    "docs": [
                      "Check the status of the spend and remove it from the storage if processed.",
                      "",
                      "## Dispatch Origin",
                      "",
                      "Must be signed.",
                      "",
                      "## Details",
                      "",
                      "The status check is a prerequisite for retrying a failed payout.",
                      "If a spend has either succeeded or expired, it is removed from the storage by this",
                      "function. In such instances, transaction fees are refunded.",
                      "",
                      "### Parameters",
                      "- `index`: The spend index.",
                      "",
                      "## Events",
                      "",
                      "Emits [`Event::PaymentFailed`] if the spend payout has failed.",
                      "Emits [`Event::SpendProcessed`] if the spend payout has succeed."
                    ]
                  },
                  {
                    "name": "void_spend",
                    "fields": [
                      {
                        "name": "index",
                        "type": 4,
                        "typeName": "SpendIndex"
                      }
                    ],
                    "index": 8,
                    "docs": [
                      "Void previously approved spend.",
                      "",
                      "## Dispatch Origin",
                      "",
                      "Must be [`Config::RejectOrigin`].",
                      "",
                      "## Details",
                      "",
                      "A spend void is only possible if the payout has not been attempted yet.",
                      "",
                      "### Parameters",
                      "- `index`: The spend index.",
                      "",
                      "## Events",
                      "",
                      "Emits [`Event::AssetSpendVoided`] if successful."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Contains a variant per dispatchable extrinsic that this pallet has."
            ]
          }
        },
        {
          "id": 154,
          "type": {
            "path": [
              "Option"
            ],
            "params": [
              {
                "name": "T",
                "type": 4
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "None",
                    "index": 0
                  },
                  {
                    "name": "Some",
                    "fields": [
                      {
                        "type": 4
                      }
                    ],
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 155,
          "type": {
            "path": [
              "pallet_conviction_voting",
              "pallet",
              "Call"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              },
              {
                "name": "I",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "vote",
                    "fields": [
                      {
                        "name": "poll_index",
                        "type": 59,
                        "typeName": "PollIndexOf<T, I>"
                      },
                      {
                        "name": "vote",
                        "type": 90,
                        "typeName": "AccountVote<BalanceOf<T, I>>"
                      }
                    ],
                    "index": 0,
                    "docs": [
                      "Vote in a poll. If `vote.is_aye()`, the vote is to enact the proposal;",
                      "otherwise it is a vote to keep the status quo.",
                      "",
                      "The dispatch origin of this call must be _Signed_.",
                      "",
                      "- `poll_index`: The index of the poll to vote for.",
                      "- `vote`: The vote configuration.",
                      "",
                      "Weight: `O(R)` where R is the number of polls the voter has voted on."
                    ]
                  },
                  {
                    "name": "delegate",
                    "fields": [
                      {
                        "name": "class",
                        "type": 93,
                        "typeName": "ClassOf<T, I>"
                      },
                      {
                        "name": "to",
                        "type": 115,
                        "typeName": "AccountIdLookupOf<T>"
                      },
                      {
                        "name": "conviction",
                        "type": 156,
                        "typeName": "Conviction"
                      },
                      {
                        "name": "balance",
                        "type": 6,
                        "typeName": "BalanceOf<T, I>"
                      }
                    ],
                    "index": 1,
                    "docs": [
                      "Delegate the voting power (with some given conviction) of the sending account for a",
                      "particular class of polls.",
                      "",
                      "The balance delegated is locked for as long as it's delegated, and thereafter for the",
                      "time appropriate for the conviction's lock period.",
                      "",
                      "The dispatch origin of this call must be _Signed_, and the signing account must either:",
                      "  - be delegating already; or",
                      "  - have no voting activity (if there is, then it will need to be removed through",
                      "    `remove_vote`).",
                      "",
                      "- `to`: The account whose voting the `target` account's voting power will follow.",
                      "- `class`: The class of polls to delegate. To delegate multiple classes, multiple calls",
                      "  to this function are required.",
                      "- `conviction`: The conviction that will be attached to the delegated votes. When the",
                      "  account is undelegated, the funds will be locked for the corresponding period.",
                      "- `balance`: The amount of the account's balance to be used in delegating. This must not",
                      "  be more than the account's current balance.",
                      "",
                      "Emits `Delegated`.",
                      "",
                      "Weight: `O(R)` where R is the number of polls the voter delegating to has",
                      "  voted on. Weight is initially charged as if maximum votes, but is refunded later."
                    ]
                  },
                  {
                    "name": "undelegate",
                    "fields": [
                      {
                        "name": "class",
                        "type": 93,
                        "typeName": "ClassOf<T, I>"
                      }
                    ],
                    "index": 2,
                    "docs": [
                      "Undelegate the voting power of the sending account for a particular class of polls.",
                      "",
                      "Tokens may be unlocked following once an amount of time consistent with the lock period",
                      "of the conviction with which the delegation was issued has passed.",
                      "",
                      "The dispatch origin of this call must be _Signed_ and the signing account must be",
                      "currently delegating.",
                      "",
                      "- `class`: The class of polls to remove the delegation from.",
                      "",
                      "Emits `Undelegated`.",
                      "",
                      "Weight: `O(R)` where R is the number of polls the voter delegating to has",
                      "  voted on. Weight is initially charged as if maximum votes, but is refunded later."
                    ]
                  },
                  {
                    "name": "unlock",
                    "fields": [
                      {
                        "name": "class",
                        "type": 93,
                        "typeName": "ClassOf<T, I>"
                      },
                      {
                        "name": "target",
                        "type": 115,
                        "typeName": "AccountIdLookupOf<T>"
                      }
                    ],
                    "index": 3,
                    "docs": [
                      "Remove the lock caused by prior voting/delegating which has expired within a particular",
                      "class.",
                      "",
                      "The dispatch origin of this call must be _Signed_.",
                      "",
                      "- `class`: The class of polls to unlock.",
                      "- `target`: The account to remove the lock on.",
                      "",
                      "Weight: `O(R)` with R number of vote of target."
                    ]
                  },
                  {
                    "name": "remove_vote",
                    "fields": [
                      {
                        "name": "class",
                        "type": 157,
                        "typeName": "Option<ClassOf<T, I>>"
                      },
                      {
                        "name": "index",
                        "type": 4,
                        "typeName": "PollIndexOf<T, I>"
                      }
                    ],
                    "index": 4,
                    "docs": [
                      "Remove a vote for a poll.",
                      "",
                      "If:",
                      "- the poll was cancelled, or",
                      "- the poll is ongoing, or",
                      "- the poll has ended such that",
                      "  - the vote of the account was in opposition to the result; or",
                      "  - there was no conviction to the account's vote; or",
                      "  - the account made a split vote",
                      "...then the vote is removed cleanly and a following call to `unlock` may result in more",
                      "funds being available.",
                      "",
                      "If, however, the poll has ended and:",
                      "- it finished corresponding to the vote of the account, and",
                      "- the account made a standard vote with conviction, and",
                      "- the lock period of the conviction is not over",
                      "...then the lock will be aggregated into the overall account's lock, which may involve",
                      "*overlocking* (where the two locks are combined into a single lock that is the maximum",
                      "of both the amount locked and the time is it locked for).",
                      "",
                      "The dispatch origin of this call must be _Signed_, and the signer must have a vote",
                      "registered for poll `index`.",
                      "",
                      "- `index`: The index of poll of the vote to be removed.",
                      "- `class`: Optional parameter, if given it indicates the class of the poll. For polls",
                      "  which have finished or are cancelled, this must be `Some`.",
                      "",
                      "Weight: `O(R + log R)` where R is the number of polls that `target` has voted on.",
                      "  Weight is calculated for the maximum number of vote."
                    ]
                  },
                  {
                    "name": "remove_other_vote",
                    "fields": [
                      {
                        "name": "target",
                        "type": 115,
                        "typeName": "AccountIdLookupOf<T>"
                      },
                      {
                        "name": "class",
                        "type": 93,
                        "typeName": "ClassOf<T, I>"
                      },
                      {
                        "name": "index",
                        "type": 4,
                        "typeName": "PollIndexOf<T, I>"
                      }
                    ],
                    "index": 5,
                    "docs": [
                      "Remove a vote for a poll.",
                      "",
                      "If the `target` is equal to the signer, then this function is exactly equivalent to",
                      "`remove_vote`. If not equal to the signer, then the vote must have expired,",
                      "either because the poll was cancelled, because the voter lost the poll or",
                      "because the conviction period is over.",
                      "",
                      "The dispatch origin of this call must be _Signed_.",
                      "",
                      "- `target`: The account of the vote to be removed; this account must have voted for poll",
                      "  `index`.",
                      "- `index`: The index of poll of the vote to be removed.",
                      "- `class`: The class of the poll.",
                      "",
                      "Weight: `O(R + log R)` where R is the number of polls that `target` has voted on.",
                      "  Weight is calculated for the maximum number of vote."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Contains a variant per dispatchable extrinsic that this pallet has."
            ]
          }
        },
        {
          "id": 156,
          "type": {
            "path": [
              "pallet_conviction_voting",
              "conviction",
              "Conviction"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "None",
                    "index": 0
                  },
                  {
                    "name": "Locked1x",
                    "index": 1
                  },
                  {
                    "name": "Locked2x",
                    "index": 2
                  },
                  {
                    "name": "Locked3x",
                    "index": 3
                  },
                  {
                    "name": "Locked4x",
                    "index": 4
                  },
                  {
                    "name": "Locked5x",
                    "index": 5
                  },
                  {
                    "name": "Locked6x",
                    "index": 6
                  }
                ]
              }
            }
          }
        },
        {
          "id": 157,
          "type": {
            "path": [
              "Option"
            ],
            "params": [
              {
                "name": "T",
                "type": 93
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "None",
                    "index": 0
                  },
                  {
                    "name": "Some",
                    "fields": [
                      {
                        "type": 93
                      }
                    ],
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 158,
          "type": {
            "path": [
              "pallet_referenda",
              "pallet",
              "Call"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              },
              {
                "name": "I",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "submit",
                    "fields": [
                      {
                        "name": "proposal_origin",
                        "type": 159,
                        "typeName": "Box<PalletsOriginOf<T>>"
                      },
                      {
                        "name": "proposal",
                        "type": 94,
                        "typeName": "BoundedCallOf<T, I>"
                      },
                      {
                        "name": "enactment_moment",
                        "type": 166,
                        "typeName": "DispatchTime<BlockNumberFor<T>>"
                      }
                    ],
                    "index": 0,
                    "docs": [
                      "Propose a referendum on a privileged action.",
                      "",
                      "- `origin`: must be `SubmitOrigin` and the account must have `SubmissionDeposit` funds",
                      "  available.",
                      "- `proposal_origin`: The origin from which the proposal should be executed.",
                      "- `proposal`: The proposal.",
                      "- `enactment_moment`: The moment that the proposal should be enacted.",
                      "",
                      "Emits `Submitted`."
                    ]
                  },
                  {
                    "name": "place_decision_deposit",
                    "fields": [
                      {
                        "name": "index",
                        "type": 4,
                        "typeName": "ReferendumIndex"
                      }
                    ],
                    "index": 1,
                    "docs": [
                      "Post the Decision Deposit for a referendum.",
                      "",
                      "- `origin`: must be `Signed` and the account must have funds available for the",
                      "  referendum's track's Decision Deposit.",
                      "- `index`: The index of the submitted referendum whose Decision Deposit is yet to be",
                      "  posted.",
                      "",
                      "Emits `DecisionDepositPlaced`."
                    ]
                  },
                  {
                    "name": "refund_decision_deposit",
                    "fields": [
                      {
                        "name": "index",
                        "type": 4,
                        "typeName": "ReferendumIndex"
                      }
                    ],
                    "index": 2,
                    "docs": [
                      "Refund the Decision Deposit for a closed referendum back to the depositor.",
                      "",
                      "- `origin`: must be `Signed` or `Root`.",
                      "- `index`: The index of a closed referendum whose Decision Deposit has not yet been",
                      "  refunded.",
                      "",
                      "Emits `DecisionDepositRefunded`."
                    ]
                  },
                  {
                    "name": "cancel",
                    "fields": [
                      {
                        "name": "index",
                        "type": 4,
                        "typeName": "ReferendumIndex"
                      }
                    ],
                    "index": 3,
                    "docs": [
                      "Cancel an ongoing referendum.",
                      "",
                      "- `origin`: must be the `CancelOrigin`.",
                      "- `index`: The index of the referendum to be cancelled.",
                      "",
                      "Emits `Cancelled`."
                    ]
                  },
                  {
                    "name": "kill",
                    "fields": [
                      {
                        "name": "index",
                        "type": 4,
                        "typeName": "ReferendumIndex"
                      }
                    ],
                    "index": 4,
                    "docs": [
                      "Cancel an ongoing referendum and slash the deposits.",
                      "",
                      "- `origin`: must be the `KillOrigin`.",
                      "- `index`: The index of the referendum to be cancelled.",
                      "",
                      "Emits `Killed` and `DepositSlashed`."
                    ]
                  },
                  {
                    "name": "nudge_referendum",
                    "fields": [
                      {
                        "name": "index",
                        "type": 4,
                        "typeName": "ReferendumIndex"
                      }
                    ],
                    "index": 5,
                    "docs": [
                      "Advance a referendum onto its next logical state. Only used internally.",
                      "",
                      "- `origin`: must be `Root`.",
                      "- `index`: the referendum to be advanced."
                    ]
                  },
                  {
                    "name": "one_fewer_deciding",
                    "fields": [
                      {
                        "name": "track",
                        "type": 93,
                        "typeName": "TrackIdOf<T, I>"
                      }
                    ],
                    "index": 6,
                    "docs": [
                      "Advance a track onto its next logical state. Only used internally.",
                      "",
                      "- `origin`: must be `Root`.",
                      "- `track`: the track to be advanced.",
                      "",
                      "Action item for when there is now one fewer referendum in the deciding phase and the",
                      "`DecidingCount` is not yet updated. This means that we should either:",
                      "- begin deciding another referendum (and leave `DecidingCount` alone); or",
                      "- decrement `DecidingCount`."
                    ]
                  },
                  {
                    "name": "refund_submission_deposit",
                    "fields": [
                      {
                        "name": "index",
                        "type": 4,
                        "typeName": "ReferendumIndex"
                      }
                    ],
                    "index": 7,
                    "docs": [
                      "Refund the Submission Deposit for a closed referendum back to the depositor.",
                      "",
                      "- `origin`: must be `Signed` or `Root`.",
                      "- `index`: The index of a closed referendum whose Submission Deposit has not yet been",
                      "  refunded.",
                      "",
                      "Emits `SubmissionDepositRefunded`."
                    ]
                  },
                  {
                    "name": "set_metadata",
                    "fields": [
                      {
                        "name": "index",
                        "type": 4,
                        "typeName": "ReferendumIndex"
                      },
                      {
                        "name": "maybe_hash",
                        "type": 167,
                        "typeName": "Option<T::Hash>"
                      }
                    ],
                    "index": 8,
                    "docs": [
                      "Set or clear metadata of a referendum.",
                      "",
                      "Parameters:",
                      "- `origin`: Must be `Signed` by a creator of a referendum or by anyone to clear a",
                      "  metadata of a finished referendum.",
                      "- `index`:  The index of a referendum to set or clear metadata for.",
                      "- `maybe_hash`: The hash of an on-chain stored preimage. `None` to clear a metadata."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Contains a variant per dispatchable extrinsic that this pallet has."
            ]
          }
        },
        {
          "id": 159,
          "type": {
            "path": [
              "polkadot_runtime",
              "OriginCaller"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "system",
                    "fields": [
                      {
                        "type": 160,
                        "typeName": "frame_system::Origin<Runtime>"
                      }
                    ],
                    "index": 0
                  },
                  {
                    "name": "Origins",
                    "fields": [
                      {
                        "type": 161,
                        "typeName": "pallet_custom_origins::Origin"
                      }
                    ],
                    "index": 22
                  },
                  {
                    "name": "ParachainsOrigin",
                    "fields": [
                      {
                        "type": 162,
                        "typeName": "parachains_origin::Origin"
                      }
                    ],
                    "index": 50
                  },
                  {
                    "name": "XcmPallet",
                    "fields": [
                      {
                        "type": 164,
                        "typeName": "pallet_xcm::Origin"
                      }
                    ],
                    "index": 99
                  },
                  {
                    "name": "Void",
                    "fields": [
                      {
                        "type": 165,
                        "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::\n__private::Void"
                      }
                    ],
                    "index": 4
                  }
                ]
              }
            }
          }
        },
        {
          "id": 160,
          "type": {
            "path": [
              "frame_support",
              "dispatch",
              "RawOrigin"
            ],
            "params": [
              {
                "name": "AccountId",
                "type": 0
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Root",
                    "index": 0
                  },
                  {
                    "name": "Signed",
                    "fields": [
                      {
                        "type": 0,
                        "typeName": "AccountId"
                      }
                    ],
                    "index": 1
                  },
                  {
                    "name": "None",
                    "index": 2
                  }
                ]
              }
            }
          }
        },
        {
          "id": 161,
          "type": {
            "path": [
              "polkadot_runtime",
              "governance",
              "origins",
              "pallet_custom_origins",
              "Origin"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "StakingAdmin",
                    "index": 0
                  },
                  {
                    "name": "Treasurer",
                    "index": 1
                  },
                  {
                    "name": "FellowshipAdmin",
                    "index": 2
                  },
                  {
                    "name": "GeneralAdmin",
                    "index": 3
                  },
                  {
                    "name": "AuctionAdmin",
                    "index": 4
                  },
                  {
                    "name": "LeaseAdmin",
                    "index": 5
                  },
                  {
                    "name": "ReferendumCanceller",
                    "index": 6
                  },
                  {
                    "name": "ReferendumKiller",
                    "index": 7
                  },
                  {
                    "name": "SmallTipper",
                    "index": 8
                  },
                  {
                    "name": "BigTipper",
                    "index": 9
                  },
                  {
                    "name": "SmallSpender",
                    "index": 10
                  },
                  {
                    "name": "MediumSpender",
                    "index": 11
                  },
                  {
                    "name": "BigSpender",
                    "index": 12
                  },
                  {
                    "name": "WhitelistedCaller",
                    "index": 13
                  },
                  {
                    "name": "WishForChange",
                    "index": 14
                  }
                ]
              }
            }
          }
        },
        {
          "id": 162,
          "type": {
            "path": [
              "polkadot_runtime_parachains",
              "origin",
              "pallet",
              "Origin"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Parachain",
                    "fields": [
                      {
                        "type": 163,
                        "typeName": "ParaId"
                      }
                    ],
                    "index": 0
                  }
                ]
              }
            }
          }
        },
        {
          "id": 163,
          "type": {
            "path": [
              "polkadot_parachain_primitives",
              "primitives",
              "Id"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 4,
                    "typeName": "u32"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 164,
          "type": {
            "path": [
              "pallet_xcm",
              "pallet",
              "Origin"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Xcm",
                    "fields": [
                      {
                        "type": 67,
                        "typeName": "Location"
                      }
                    ],
                    "index": 0
                  },
                  {
                    "name": "Response",
                    "fields": [
                      {
                        "type": 67,
                        "typeName": "Location"
                      }
                    ],
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 165,
          "type": {
            "path": [
              "sp_core",
              "Void"
            ],
            "def": {
              "variant": {}
            }
          }
        },
        {
          "id": 166,
          "type": {
            "path": [
              "frame_support",
              "traits",
              "schedule",
              "DispatchTime"
            ],
            "params": [
              {
                "name": "BlockNumber",
                "type": 4
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "At",
                    "fields": [
                      {
                        "type": 4,
                        "typeName": "BlockNumber"
                      }
                    ],
                    "index": 0
                  },
                  {
                    "name": "After",
                    "fields": [
                      {
                        "type": 4,
                        "typeName": "BlockNumber"
                      }
                    ],
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 167,
          "type": {
            "path": [
              "Option"
            ],
            "params": [
              {
                "name": "T",
                "type": 13
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "None",
                    "index": 0
                  },
                  {
                    "name": "Some",
                    "fields": [
                      {
                        "type": 13
                      }
                    ],
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 168,
          "type": {
            "path": [
              "pallet_whitelist",
              "pallet",
              "Call"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "whitelist_call",
                    "fields": [
                      {
                        "name": "call_hash",
                        "type": 13,
                        "typeName": "T::Hash"
                      }
                    ],
                    "index": 0
                  },
                  {
                    "name": "remove_whitelisted_call",
                    "fields": [
                      {
                        "name": "call_hash",
                        "type": 13,
                        "typeName": "T::Hash"
                      }
                    ],
                    "index": 1
                  },
                  {
                    "name": "dispatch_whitelisted_call",
                    "fields": [
                      {
                        "name": "call_hash",
                        "type": 13,
                        "typeName": "T::Hash"
                      },
                      {
                        "name": "call_encoded_len",
                        "type": 4,
                        "typeName": "u32"
                      },
                      {
                        "name": "call_weight_witness",
                        "type": 10,
                        "typeName": "Weight"
                      }
                    ],
                    "index": 2
                  },
                  {
                    "name": "dispatch_whitelisted_call_with_preimage",
                    "fields": [
                      {
                        "name": "call",
                        "type": 95,
                        "typeName": "Box<<T as Config>::RuntimeCall>"
                      }
                    ],
                    "index": 3
                  }
                ]
              }
            },
            "docs": [
              "Contains a variant per dispatchable extrinsic that this pallet has."
            ]
          }
        },
        {
          "id": 169,
          "type": {
            "path": [
              "polkadot_runtime_common",
              "claims",
              "pallet",
              "Call"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "claim",
                    "fields": [
                      {
                        "name": "dest",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "ethereum_signature",
                        "type": 170,
                        "typeName": "EcdsaSignature"
                      }
                    ],
                    "index": 0,
                    "docs": [
                      "Make a claim to collect your DOTs.",
                      "",
                      "The dispatch origin for this call must be _None_.",
                      "",
                      "Unsigned Validation:",
                      "A call to claim is deemed valid if the signature provided matches",
                      "the expected signed message of:",
                      "",
                      "> Ethereum Signed Message:",
                      "> (configured prefix string)(address)",
                      "",
                      "and `address` matches the `dest` account.",
                      "",
                      "Parameters:",
                      "- `dest`: The destination account to payout the claim.",
                      "- `ethereum_signature`: The signature of an ethereum signed message matching the format",
                      "  described above.",
                      "",
                      "<weight>",
                      "The weight of this call is invariant over the input parameters.",
                      "Weight includes logic to validate unsigned `claim` call.",
                      "",
                      "Total Complexity: O(1)",
                      "</weight>"
                    ]
                  },
                  {
                    "name": "mint_claim",
                    "fields": [
                      {
                        "name": "who",
                        "type": 172,
                        "typeName": "EthereumAddress"
                      },
                      {
                        "name": "value",
                        "type": 6,
                        "typeName": "BalanceOf<T>"
                      },
                      {
                        "name": "vesting_schedule",
                        "type": 173,
                        "typeName": "Option<(BalanceOf<T>, BalanceOf<T>, BlockNumberFor<T>)>"
                      },
                      {
                        "name": "statement",
                        "type": 175,
                        "typeName": "Option<StatementKind>"
                      }
                    ],
                    "index": 1,
                    "docs": [
                      "Mint a new claim to collect DOTs.",
                      "",
                      "The dispatch origin for this call must be _Root_.",
                      "",
                      "Parameters:",
                      "- `who`: The Ethereum address allowed to collect this claim.",
                      "- `value`: The number of DOTs that will be claimed.",
                      "- `vesting_schedule`: An optional vesting schedule for these DOTs.",
                      "",
                      "<weight>",
                      "The weight of this call is invariant over the input parameters.",
                      "We assume worst case that both vesting and statement is being inserted.",
                      "",
                      "Total Complexity: O(1)",
                      "</weight>"
                    ]
                  },
                  {
                    "name": "claim_attest",
                    "fields": [
                      {
                        "name": "dest",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "ethereum_signature",
                        "type": 170,
                        "typeName": "EcdsaSignature"
                      },
                      {
                        "name": "statement",
                        "type": 14,
                        "typeName": "Vec<u8>"
                      }
                    ],
                    "index": 2,
                    "docs": [
                      "Make a claim to collect your DOTs by signing a statement.",
                      "",
                      "The dispatch origin for this call must be _None_.",
                      "",
                      "Unsigned Validation:",
                      "A call to `claim_attest` is deemed valid if the signature provided matches",
                      "the expected signed message of:",
                      "",
                      "> Ethereum Signed Message:",
                      "> (configured prefix string)(address)(statement)",
                      "",
                      "and `address` matches the `dest` account; the `statement` must match that which is",
                      "expected according to your purchase arrangement.",
                      "",
                      "Parameters:",
                      "- `dest`: The destination account to payout the claim.",
                      "- `ethereum_signature`: The signature of an ethereum signed message matching the format",
                      "  described above.",
                      "- `statement`: The identity of the statement which is being attested to in the",
                      "  signature.",
                      "",
                      "<weight>",
                      "The weight of this call is invariant over the input parameters.",
                      "Weight includes logic to validate unsigned `claim_attest` call.",
                      "",
                      "Total Complexity: O(1)",
                      "</weight>"
                    ]
                  },
                  {
                    "name": "attest",
                    "fields": [
                      {
                        "name": "statement",
                        "type": 14,
                        "typeName": "Vec<u8>"
                      }
                    ],
                    "index": 3,
                    "docs": [
                      "Attest to a statement, needed to finalize the claims process.",
                      "",
                      "WARNING: Insecure unless your chain includes `PrevalidateAttests` as a",
                      "`SignedExtension`.",
                      "",
                      "Unsigned Validation:",
                      "A call to attest is deemed valid if the sender has a `Preclaim` registered",
                      "and provides a `statement` which is expected for the account.",
                      "",
                      "Parameters:",
                      "- `statement`: The identity of the statement which is being attested to in the",
                      "  signature.",
                      "",
                      "<weight>",
                      "The weight of this call is invariant over the input parameters.",
                      "Weight includes logic to do pre-validation on `attest` call.",
                      "",
                      "Total Complexity: O(1)",
                      "</weight>"
                    ]
                  },
                  {
                    "name": "move_claim",
                    "fields": [
                      {
                        "name": "old",
                        "type": 172,
                        "typeName": "EthereumAddress"
                      },
                      {
                        "name": "new",
                        "type": 172,
                        "typeName": "EthereumAddress"
                      },
                      {
                        "name": "maybe_preclaim",
                        "type": 129,
                        "typeName": "Option<T::AccountId>"
                      }
                    ],
                    "index": 4
                  }
                ]
              }
            },
            "docs": [
              "Contains a variant per dispatchable extrinsic that this pallet has."
            ]
          }
        },
        {
          "id": 170,
          "type": {
            "path": [
              "polkadot_runtime_common",
              "claims",
              "EcdsaSignature"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 171,
                    "typeName": "[u8; 65]"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 171,
          "type": {
            "def": {
              "array": {
                "len": 65,
                "type": 2
              }
            }
          }
        },
        {
          "id": 172,
          "type": {
            "path": [
              "polkadot_runtime_common",
              "claims",
              "EthereumAddress"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 62,
                    "typeName": "[u8; 20]"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 173,
          "type": {
            "path": [
              "Option"
            ],
            "params": [
              {
                "name": "T",
                "type": 174
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "None",
                    "index": 0
                  },
                  {
                    "name": "Some",
                    "fields": [
                      {
                        "type": 174
                      }
                    ],
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 174,
          "type": {
            "def": {
              "tuple": [
                6,
                6,
                4
              ]
            }
          }
        },
        {
          "id": 175,
          "type": {
            "path": [
              "Option"
            ],
            "params": [
              {
                "name": "T",
                "type": 176
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "None",
                    "index": 0
                  },
                  {
                    "name": "Some",
                    "fields": [
                      {
                        "type": 176
                      }
                    ],
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 176,
          "type": {
            "path": [
              "polkadot_runtime_common",
              "claims",
              "StatementKind"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Regular",
                    "index": 0
                  },
                  {
                    "name": "Saft",
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 177,
          "type": {
            "path": [
              "pallet_vesting",
              "pallet",
              "Call"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "vest",
                    "index": 0,
                    "docs": [
                      "Unlock any vested funds of the sender account.",
                      "",
                      "The dispatch origin for this call must be _Signed_ and the sender must have funds still",
                      "locked under this pallet.",
                      "",
                      "Emits either `VestingCompleted` or `VestingUpdated`.",
                      "",
                      "## Complexity",
                      "- `O(1)`."
                    ]
                  },
                  {
                    "name": "vest_other",
                    "fields": [
                      {
                        "name": "target",
                        "type": 115,
                        "typeName": "AccountIdLookupOf<T>"
                      }
                    ],
                    "index": 1,
                    "docs": [
                      "Unlock any vested funds of a `target` account.",
                      "",
                      "The dispatch origin for this call must be _Signed_.",
                      "",
                      "- `target`: The account whose vested funds should be unlocked. Must have funds still",
                      "locked under this pallet.",
                      "",
                      "Emits either `VestingCompleted` or `VestingUpdated`.",
                      "",
                      "## Complexity",
                      "- `O(1)`."
                    ]
                  },
                  {
                    "name": "vested_transfer",
                    "fields": [
                      {
                        "name": "target",
                        "type": 115,
                        "typeName": "AccountIdLookupOf<T>"
                      },
                      {
                        "name": "schedule",
                        "type": 178,
                        "typeName": "VestingInfo<BalanceOf<T>, BlockNumberFor<T>>"
                      }
                    ],
                    "index": 2,
                    "docs": [
                      "Create a vested transfer.",
                      "",
                      "The dispatch origin for this call must be _Signed_.",
                      "",
                      "- `target`: The account receiving the vested funds.",
                      "- `schedule`: The vesting schedule attached to the transfer.",
                      "",
                      "Emits `VestingCreated`.",
                      "",
                      "NOTE: This will unlock all schedules through the current block.",
                      "",
                      "## Complexity",
                      "- `O(1)`."
                    ]
                  },
                  {
                    "name": "force_vested_transfer",
                    "fields": [
                      {
                        "name": "source",
                        "type": 115,
                        "typeName": "AccountIdLookupOf<T>"
                      },
                      {
                        "name": "target",
                        "type": 115,
                        "typeName": "AccountIdLookupOf<T>"
                      },
                      {
                        "name": "schedule",
                        "type": 178,
                        "typeName": "VestingInfo<BalanceOf<T>, BlockNumberFor<T>>"
                      }
                    ],
                    "index": 3,
                    "docs": [
                      "Force a vested transfer.",
                      "",
                      "The dispatch origin for this call must be _Root_.",
                      "",
                      "- `source`: The account whose funds should be transferred.",
                      "- `target`: The account that should be transferred the vested funds.",
                      "- `schedule`: The vesting schedule attached to the transfer.",
                      "",
                      "Emits `VestingCreated`.",
                      "",
                      "NOTE: This will unlock all schedules through the current block.",
                      "",
                      "## Complexity",
                      "- `O(1)`."
                    ]
                  },
                  {
                    "name": "merge_schedules",
                    "fields": [
                      {
                        "name": "schedule1_index",
                        "type": 4,
                        "typeName": "u32"
                      },
                      {
                        "name": "schedule2_index",
                        "type": 4,
                        "typeName": "u32"
                      }
                    ],
                    "index": 4,
                    "docs": [
                      "Merge two vesting schedules together, creating a new vesting schedule that unlocks over",
                      "the highest possible start and end blocks. If both schedules have already started the",
                      "current block will be used as the schedule start; with the caveat that if one schedule",
                      "is finished by the current block, the other will be treated as the new merged schedule,",
                      "unmodified.",
                      "",
                      "NOTE: If `schedule1_index == schedule2_index` this is a no-op.",
                      "NOTE: This will unlock all schedules through the current block prior to merging.",
                      "NOTE: If both schedules have ended by the current block, no new schedule will be created",
                      "and both will be removed.",
                      "",
                      "Merged schedule attributes:",
                      "- `starting_block`: `MAX(schedule1.starting_block, scheduled2.starting_block,",
                      "  current_block)`.",
                      "- `ending_block`: `MAX(schedule1.ending_block, schedule2.ending_block)`.",
                      "- `locked`: `schedule1.locked_at(current_block) + schedule2.locked_at(current_block)`.",
                      "",
                      "The dispatch origin for this call must be _Signed_.",
                      "",
                      "- `schedule1_index`: index of the first schedule to merge.",
                      "- `schedule2_index`: index of the second schedule to merge."
                    ]
                  },
                  {
                    "name": "force_remove_vesting_schedule",
                    "fields": [
                      {
                        "name": "target",
                        "type": 115,
                        "typeName": "<T::Lookup as StaticLookup>::Source"
                      },
                      {
                        "name": "schedule_index",
                        "type": 4,
                        "typeName": "u32"
                      }
                    ],
                    "index": 5,
                    "docs": [
                      "Force remove a vesting schedule",
                      "",
                      "The dispatch origin for this call must be _Root_.",
                      "",
                      "- `target`: An account that has a vesting schedule",
                      "- `schedule_index`: The vesting schedule index that should be removed"
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Contains a variant per dispatchable extrinsic that this pallet has."
            ]
          }
        },
        {
          "id": 178,
          "type": {
            "path": [
              "pallet_vesting",
              "vesting_info",
              "VestingInfo"
            ],
            "params": [
              {
                "name": "Balance",
                "type": 6
              },
              {
                "name": "BlockNumber",
                "type": 4
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "locked",
                    "type": 6,
                    "typeName": "Balance"
                  },
                  {
                    "name": "per_block",
                    "type": 6,
                    "typeName": "Balance"
                  },
                  {
                    "name": "starting_block",
                    "type": 4,
                    "typeName": "BlockNumber"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 179,
          "type": {
            "path": [
              "pallet_utility",
              "pallet",
              "Call"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "batch",
                    "fields": [
                      {
                        "name": "calls",
                        "type": 180,
                        "typeName": "Vec<<T as Config>::RuntimeCall>"
                      }
                    ],
                    "index": 0,
                    "docs": [
                      "Send a batch of dispatch calls.",
                      "",
                      "May be called from any origin except `None`.",
                      "",
                      "- `calls`: The calls to be dispatched from the same origin. The number of call must not",
                      "  exceed the constant: `batched_calls_limit` (available in constant metadata).",
                      "",
                      "If origin is root then the calls are dispatched without checking origin filter. (This",
                      "includes bypassing `frame_system::Config::BaseCallFilter`).",
                      "",
                      "## Complexity",
                      "- O(C) where C is the number of calls to be batched.",
                      "",
                      "This will return `Ok` in all circumstances. To determine the success of the batch, an",
                      "event is deposited. If a call failed and the batch was interrupted, then the",
                      "`BatchInterrupted` event is deposited, along with the number of successful calls made",
                      "and the error of the failed call. If all were successful, then the `BatchCompleted`",
                      "event is deposited."
                    ]
                  },
                  {
                    "name": "as_derivative",
                    "fields": [
                      {
                        "name": "index",
                        "type": 93,
                        "typeName": "u16"
                      },
                      {
                        "name": "call",
                        "type": 95,
                        "typeName": "Box<<T as Config>::RuntimeCall>"
                      }
                    ],
                    "index": 1,
                    "docs": [
                      "Send a call through an indexed pseudonym of the sender.",
                      "",
                      "Filter from origin are passed along. The call will be dispatched with an origin which",
                      "use the same filter as the origin of this call.",
                      "",
                      "NOTE: If you need to ensure that any account-based filtering is not honored (i.e.",
                      "because you expect `proxy` to have been used prior in the call stack and you do not want",
                      "the call restrictions to apply to any sub-accounts), then use `as_multi_threshold_1`",
                      "in the Multisig pallet instead.",
                      "",
                      "NOTE: Prior to version *12, this was called `as_limited_sub`.",
                      "",
                      "The dispatch origin for this call must be _Signed_."
                    ]
                  },
                  {
                    "name": "batch_all",
                    "fields": [
                      {
                        "name": "calls",
                        "type": 180,
                        "typeName": "Vec<<T as Config>::RuntimeCall>"
                      }
                    ],
                    "index": 2,
                    "docs": [
                      "Send a batch of dispatch calls and atomically execute them.",
                      "The whole transaction will rollback and fail if any of the calls failed.",
                      "",
                      "May be called from any origin except `None`.",
                      "",
                      "- `calls`: The calls to be dispatched from the same origin. The number of call must not",
                      "  exceed the constant: `batched_calls_limit` (available in constant metadata).",
                      "",
                      "If origin is root then the calls are dispatched without checking origin filter. (This",
                      "includes bypassing `frame_system::Config::BaseCallFilter`).",
                      "",
                      "## Complexity",
                      "- O(C) where C is the number of calls to be batched."
                    ]
                  },
                  {
                    "name": "dispatch_as",
                    "fields": [
                      {
                        "name": "as_origin",
                        "type": 159,
                        "typeName": "Box<T::PalletsOrigin>"
                      },
                      {
                        "name": "call",
                        "type": 95,
                        "typeName": "Box<<T as Config>::RuntimeCall>"
                      }
                    ],
                    "index": 3,
                    "docs": [
                      "Dispatches a function call with a provided origin.",
                      "",
                      "The dispatch origin for this call must be _Root_.",
                      "",
                      "## Complexity",
                      "- O(1)."
                    ]
                  },
                  {
                    "name": "force_batch",
                    "fields": [
                      {
                        "name": "calls",
                        "type": 180,
                        "typeName": "Vec<<T as Config>::RuntimeCall>"
                      }
                    ],
                    "index": 4,
                    "docs": [
                      "Send a batch of dispatch calls.",
                      "Unlike `batch`, it allows errors and won't interrupt.",
                      "",
                      "May be called from any origin except `None`.",
                      "",
                      "- `calls`: The calls to be dispatched from the same origin. The number of call must not",
                      "  exceed the constant: `batched_calls_limit` (available in constant metadata).",
                      "",
                      "If origin is root then the calls are dispatch without checking origin filter. (This",
                      "includes bypassing `frame_system::Config::BaseCallFilter`).",
                      "",
                      "## Complexity",
                      "- O(C) where C is the number of calls to be batched."
                    ]
                  },
                  {
                    "name": "with_weight",
                    "fields": [
                      {
                        "name": "call",
                        "type": 95,
                        "typeName": "Box<<T as Config>::RuntimeCall>"
                      },
                      {
                        "name": "weight",
                        "type": 10,
                        "typeName": "Weight"
                      }
                    ],
                    "index": 5,
                    "docs": [
                      "Dispatch a function call with a specified weight.",
                      "",
                      "This function does not check the weight of the call, and instead allows the",
                      "Root origin to specify the weight of the call.",
                      "",
                      "The dispatch origin for this call must be _Root_."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Contains a variant per dispatchable extrinsic that this pallet has."
            ]
          }
        },
        {
          "id": 180,
          "type": {
            "def": {
              "sequence": {
                "type": 95
              }
            }
          }
        },
        {
          "id": 181,
          "type": {
            "path": [
              "pallet_proxy",
              "pallet",
              "Call"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "proxy",
                    "fields": [
                      {
                        "name": "real",
                        "type": 115,
                        "typeName": "AccountIdLookupOf<T>"
                      },
                      {
                        "name": "force_proxy_type",
                        "type": 182,
                        "typeName": "Option<T::ProxyType>"
                      },
                      {
                        "name": "call",
                        "type": 95,
                        "typeName": "Box<<T as Config>::RuntimeCall>"
                      }
                    ],
                    "index": 0,
                    "docs": [
                      "Dispatch the given `call` from an account that the sender is authorised for through",
                      "`add_proxy`.",
                      "",
                      "The dispatch origin for this call must be _Signed_.",
                      "",
                      "Parameters:",
                      "- `real`: The account that the proxy will make a call on behalf of.",
                      "- `force_proxy_type`: Specify the exact proxy type to be used and checked for this call.",
                      "- `call`: The call to be made by the `real` account."
                    ]
                  },
                  {
                    "name": "add_proxy",
                    "fields": [
                      {
                        "name": "delegate",
                        "type": 115,
                        "typeName": "AccountIdLookupOf<T>"
                      },
                      {
                        "name": "proxy_type",
                        "type": 183,
                        "typeName": "T::ProxyType"
                      },
                      {
                        "name": "delay",
                        "type": 4,
                        "typeName": "BlockNumberFor<T>"
                      }
                    ],
                    "index": 1,
                    "docs": [
                      "Register a proxy account for the sender that is able to make calls on its behalf.",
                      "",
                      "The dispatch origin for this call must be _Signed_.",
                      "",
                      "Parameters:",
                      "- `proxy`: The account that the `caller` would like to make a proxy.",
                      "- `proxy_type`: The permissions allowed for this proxy account.",
                      "- `delay`: The announcement period required of the initial proxy. Will generally be",
                      "zero."
                    ]
                  },
                  {
                    "name": "remove_proxy",
                    "fields": [
                      {
                        "name": "delegate",
                        "type": 115,
                        "typeName": "AccountIdLookupOf<T>"
                      },
                      {
                        "name": "proxy_type",
                        "type": 183,
                        "typeName": "T::ProxyType"
                      },
                      {
                        "name": "delay",
                        "type": 4,
                        "typeName": "BlockNumberFor<T>"
                      }
                    ],
                    "index": 2,
                    "docs": [
                      "Unregister a proxy account for the sender.",
                      "",
                      "The dispatch origin for this call must be _Signed_.",
                      "",
                      "Parameters:",
                      "- `proxy`: The account that the `caller` would like to remove as a proxy.",
                      "- `proxy_type`: The permissions currently enabled for the removed proxy account."
                    ]
                  },
                  {
                    "name": "remove_proxies",
                    "index": 3,
                    "docs": [
                      "Unregister all proxy accounts for the sender.",
                      "",
                      "The dispatch origin for this call must be _Signed_.",
                      "",
                      "WARNING: This may be called on accounts created by `pure`, however if done, then",
                      "the unreserved fees will be inaccessible. **All access to this account will be lost.**"
                    ]
                  },
                  {
                    "name": "create_pure",
                    "fields": [
                      {
                        "name": "proxy_type",
                        "type": 183,
                        "typeName": "T::ProxyType"
                      },
                      {
                        "name": "delay",
                        "type": 4,
                        "typeName": "BlockNumberFor<T>"
                      },
                      {
                        "name": "index",
                        "type": 93,
                        "typeName": "u16"
                      }
                    ],
                    "index": 4,
                    "docs": [
                      "Spawn a fresh new account that is guaranteed to be otherwise inaccessible, and",
                      "initialize it with a proxy of `proxy_type` for `origin` sender.",
                      "",
                      "Requires a `Signed` origin.",
                      "",
                      "- `proxy_type`: The type of the proxy that the sender will be registered as over the",
                      "new account. This will almost always be the most permissive `ProxyType` possible to",
                      "allow for maximum flexibility.",
                      "- `index`: A disambiguation index, in case this is called multiple times in the same",
                      "transaction (e.g. with `utility::batch`). Unless you're using `batch` you probably just",
                      "want to use `0`.",
                      "- `delay`: The announcement period required of the initial proxy. Will generally be",
                      "zero.",
                      "",
                      "Fails with `Duplicate` if this has already been called in this transaction, from the",
                      "same sender, with the same parameters.",
                      "",
                      "Fails if there are insufficient funds to pay for deposit."
                    ]
                  },
                  {
                    "name": "kill_pure",
                    "fields": [
                      {
                        "name": "spawner",
                        "type": 115,
                        "typeName": "AccountIdLookupOf<T>"
                      },
                      {
                        "name": "proxy_type",
                        "type": 183,
                        "typeName": "T::ProxyType"
                      },
                      {
                        "name": "index",
                        "type": 93,
                        "typeName": "u16"
                      },
                      {
                        "name": "height",
                        "type": 59,
                        "typeName": "BlockNumberFor<T>"
                      },
                      {
                        "name": "ext_index",
                        "type": 59,
                        "typeName": "u32"
                      }
                    ],
                    "index": 5,
                    "docs": [
                      "Removes a previously spawned pure proxy.",
                      "",
                      "WARNING: **All access to this account will be lost.** Any funds held in it will be",
                      "inaccessible.",
                      "",
                      "Requires a `Signed` origin, and the sender account must have been created by a call to",
                      "`pure` with corresponding parameters.",
                      "",
                      "- `spawner`: The account that originally called `pure` to create this account.",
                      "- `index`: The disambiguation index originally passed to `pure`. Probably `0`.",
                      "- `proxy_type`: The proxy type originally passed to `pure`.",
                      "- `height`: The height of the chain when the call to `pure` was processed.",
                      "- `ext_index`: The extrinsic index in which the call to `pure` was processed.",
                      "",
                      "Fails with `NoPermission` in case the caller is not a previously created pure",
                      "account whose `pure` call has corresponding parameters."
                    ]
                  },
                  {
                    "name": "announce",
                    "fields": [
                      {
                        "name": "real",
                        "type": 115,
                        "typeName": "AccountIdLookupOf<T>"
                      },
                      {
                        "name": "call_hash",
                        "type": 13,
                        "typeName": "CallHashOf<T>"
                      }
                    ],
                    "index": 6,
                    "docs": [
                      "Publish the hash of a proxy-call that will be made in the future.",
                      "",
                      "This must be called some number of blocks before the corresponding `proxy` is attempted",
                      "if the delay associated with the proxy relationship is greater than zero.",
                      "",
                      "No more than `MaxPending` announcements may be made at any one time.",
                      "",
                      "This will take a deposit of `AnnouncementDepositFactor` as well as",
                      "`AnnouncementDepositBase` if there are no other pending announcements.",
                      "",
                      "The dispatch origin for this call must be _Signed_ and a proxy of `real`.",
                      "",
                      "Parameters:",
                      "- `real`: The account that the proxy will make a call on behalf of.",
                      "- `call_hash`: The hash of the call to be made by the `real` account."
                    ]
                  },
                  {
                    "name": "remove_announcement",
                    "fields": [
                      {
                        "name": "real",
                        "type": 115,
                        "typeName": "AccountIdLookupOf<T>"
                      },
                      {
                        "name": "call_hash",
                        "type": 13,
                        "typeName": "CallHashOf<T>"
                      }
                    ],
                    "index": 7,
                    "docs": [
                      "Remove a given announcement.",
                      "",
                      "May be called by a proxy account to remove a call they previously announced and return",
                      "the deposit.",
                      "",
                      "The dispatch origin for this call must be _Signed_.",
                      "",
                      "Parameters:",
                      "- `real`: The account that the proxy will make a call on behalf of.",
                      "- `call_hash`: The hash of the call to be made by the `real` account."
                    ]
                  },
                  {
                    "name": "reject_announcement",
                    "fields": [
                      {
                        "name": "delegate",
                        "type": 115,
                        "typeName": "AccountIdLookupOf<T>"
                      },
                      {
                        "name": "call_hash",
                        "type": 13,
                        "typeName": "CallHashOf<T>"
                      }
                    ],
                    "index": 8,
                    "docs": [
                      "Remove the given announcement of a delegate.",
                      "",
                      "May be called by a target (proxied) account to remove a call that one of their delegates",
                      "(`delegate`) has announced they want to execute. The deposit is returned.",
                      "",
                      "The dispatch origin for this call must be _Signed_.",
                      "",
                      "Parameters:",
                      "- `delegate`: The account that previously announced the call.",
                      "- `call_hash`: The hash of the call to be made."
                    ]
                  },
                  {
                    "name": "proxy_announced",
                    "fields": [
                      {
                        "name": "delegate",
                        "type": 115,
                        "typeName": "AccountIdLookupOf<T>"
                      },
                      {
                        "name": "real",
                        "type": 115,
                        "typeName": "AccountIdLookupOf<T>"
                      },
                      {
                        "name": "force_proxy_type",
                        "type": 182,
                        "typeName": "Option<T::ProxyType>"
                      },
                      {
                        "name": "call",
                        "type": 95,
                        "typeName": "Box<<T as Config>::RuntimeCall>"
                      }
                    ],
                    "index": 9,
                    "docs": [
                      "Dispatch the given `call` from an account that the sender is authorized for through",
                      "`add_proxy`.",
                      "",
                      "Removes any corresponding announcement(s).",
                      "",
                      "The dispatch origin for this call must be _Signed_.",
                      "",
                      "Parameters:",
                      "- `real`: The account that the proxy will make a call on behalf of.",
                      "- `force_proxy_type`: Specify the exact proxy type to be used and checked for this call.",
                      "- `call`: The call to be made by the `real` account."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Contains a variant per dispatchable extrinsic that this pallet has."
            ]
          }
        },
        {
          "id": 182,
          "type": {
            "path": [
              "Option"
            ],
            "params": [
              {
                "name": "T",
                "type": 183
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "None",
                    "index": 0
                  },
                  {
                    "name": "Some",
                    "fields": [
                      {
                        "type": 183
                      }
                    ],
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 183,
          "type": {
            "path": [
              "polkadot_runtime_constants",
              "proxy",
              "ProxyType"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Any",
                    "index": 0
                  },
                  {
                    "name": "NonTransfer",
                    "index": 1
                  },
                  {
                    "name": "Governance",
                    "index": 2
                  },
                  {
                    "name": "Staking",
                    "index": 3
                  },
                  {
                    "name": "CancelProxy",
                    "index": 6
                  },
                  {
                    "name": "Auction",
                    "index": 7
                  },
                  {
                    "name": "NominationPools",
                    "index": 8
                  },
                  {
                    "name": "ParaRegistration",
                    "index": 9
                  }
                ]
              }
            }
          }
        },
        {
          "id": 184,
          "type": {
            "path": [
              "pallet_multisig",
              "pallet",
              "Call"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "as_multi_threshold_1",
                    "fields": [
                      {
                        "name": "other_signatories",
                        "type": 118,
                        "typeName": "Vec<T::AccountId>"
                      },
                      {
                        "name": "call",
                        "type": 95,
                        "typeName": "Box<<T as Config>::RuntimeCall>"
                      }
                    ],
                    "index": 0,
                    "docs": [
                      "Immediately dispatch a multi-signature call using a single approval from the caller.",
                      "",
                      "The dispatch origin for this call must be _Signed_.",
                      "",
                      "- `other_signatories`: The accounts (other than the sender) who are part of the",
                      "multi-signature, but do not participate in the approval process.",
                      "- `call`: The call to be executed.",
                      "",
                      "Result is equivalent to the dispatched result.",
                      "",
                      "## Complexity",
                      "O(Z + C) where Z is the length of the call and C its execution weight."
                    ]
                  },
                  {
                    "name": "as_multi",
                    "fields": [
                      {
                        "name": "threshold",
                        "type": 93,
                        "typeName": "u16"
                      },
                      {
                        "name": "other_signatories",
                        "type": 118,
                        "typeName": "Vec<T::AccountId>"
                      },
                      {
                        "name": "maybe_timepoint",
                        "type": 185,
                        "typeName": "Option<Timepoint<BlockNumberFor<T>>>"
                      },
                      {
                        "name": "call",
                        "type": 95,
                        "typeName": "Box<<T as Config>::RuntimeCall>"
                      },
                      {
                        "name": "max_weight",
                        "type": 10,
                        "typeName": "Weight"
                      }
                    ],
                    "index": 1,
                    "docs": [
                      "Register approval for a dispatch to be made from a deterministic composite account if",
                      "approved by a total of `threshold - 1` of `other_signatories`.",
                      "",
                      "If there are enough, then dispatch the call.",
                      "",
                      "Payment: `DepositBase` will be reserved if this is the first approval, plus",
                      "`threshold` times `DepositFactor`. It is returned once this dispatch happens or",
                      "is cancelled.",
                      "",
                      "The dispatch origin for this call must be _Signed_.",
                      "",
                      "- `threshold`: The total number of approvals for this dispatch before it is executed.",
                      "- `other_signatories`: The accounts (other than the sender) who can approve this",
                      "dispatch. May not be empty.",
                      "- `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is",
                      "not the first approval, then it must be `Some`, with the timepoint (block number and",
                      "transaction index) of the first approval transaction.",
                      "- `call`: The call to be executed.",
                      "",
                      "NOTE: Unless this is the final approval, you will generally want to use",
                      "`approve_as_multi` instead, since it only requires a hash of the call.",
                      "",
                      "Result is equivalent to the dispatched result if `threshold` is exactly `1`. Otherwise",
                      "on success, result is `Ok` and the result from the interior call, if it was executed,",
                      "may be found in the deposited `MultisigExecuted` event.",
                      "",
                      "## Complexity",
                      "- `O(S + Z + Call)`.",
                      "- Up to one balance-reserve or unreserve operation.",
                      "- One passthrough operation, one insert, both `O(S)` where `S` is the number of",
                      "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.",
                      "- One call encode & hash, both of complexity `O(Z)` where `Z` is tx-len.",
                      "- One encode & hash, both of complexity `O(S)`.",
                      "- Up to one binary search and insert (`O(logS + S)`).",
                      "- I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove.",
                      "- One event.",
                      "- The weight of the `call`.",
                      "- Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit",
                      "  taken for its lifetime of `DepositBase + threshold * DepositFactor`."
                    ]
                  },
                  {
                    "name": "approve_as_multi",
                    "fields": [
                      {
                        "name": "threshold",
                        "type": 93,
                        "typeName": "u16"
                      },
                      {
                        "name": "other_signatories",
                        "type": 118,
                        "typeName": "Vec<T::AccountId>"
                      },
                      {
                        "name": "maybe_timepoint",
                        "type": 185,
                        "typeName": "Option<Timepoint<BlockNumberFor<T>>>"
                      },
                      {
                        "name": "call_hash",
                        "type": 1,
                        "typeName": "[u8; 32]"
                      },
                      {
                        "name": "max_weight",
                        "type": 10,
                        "typeName": "Weight"
                      }
                    ],
                    "index": 2,
                    "docs": [
                      "Register approval for a dispatch to be made from a deterministic composite account if",
                      "approved by a total of `threshold - 1` of `other_signatories`.",
                      "",
                      "Payment: `DepositBase` will be reserved if this is the first approval, plus",
                      "`threshold` times `DepositFactor`. It is returned once this dispatch happens or",
                      "is cancelled.",
                      "",
                      "The dispatch origin for this call must be _Signed_.",
                      "",
                      "- `threshold`: The total number of approvals for this dispatch before it is executed.",
                      "- `other_signatories`: The accounts (other than the sender) who can approve this",
                      "dispatch. May not be empty.",
                      "- `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is",
                      "not the first approval, then it must be `Some`, with the timepoint (block number and",
                      "transaction index) of the first approval transaction.",
                      "- `call_hash`: The hash of the call to be executed.",
                      "",
                      "NOTE: If this is the final approval, you will want to use `as_multi` instead.",
                      "",
                      "## Complexity",
                      "- `O(S)`.",
                      "- Up to one balance-reserve or unreserve operation.",
                      "- One passthrough operation, one insert, both `O(S)` where `S` is the number of",
                      "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.",
                      "- One encode & hash, both of complexity `O(S)`.",
                      "- Up to one binary search and insert (`O(logS + S)`).",
                      "- I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove.",
                      "- One event.",
                      "- Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit",
                      "  taken for its lifetime of `DepositBase + threshold * DepositFactor`."
                    ]
                  },
                  {
                    "name": "cancel_as_multi",
                    "fields": [
                      {
                        "name": "threshold",
                        "type": 93,
                        "typeName": "u16"
                      },
                      {
                        "name": "other_signatories",
                        "type": 118,
                        "typeName": "Vec<T::AccountId>"
                      },
                      {
                        "name": "timepoint",
                        "type": 186,
                        "typeName": "Timepoint<BlockNumberFor<T>>"
                      },
                      {
                        "name": "call_hash",
                        "type": 1,
                        "typeName": "[u8; 32]"
                      }
                    ],
                    "index": 3,
                    "docs": [
                      "Cancel a pre-existing, on-going multisig transaction. Any deposit reserved previously",
                      "for this operation will be unreserved on success.",
                      "",
                      "The dispatch origin for this call must be _Signed_.",
                      "",
                      "- `threshold`: The total number of approvals for this dispatch before it is executed.",
                      "- `other_signatories`: The accounts (other than the sender) who can approve this",
                      "dispatch. May not be empty.",
                      "- `timepoint`: The timepoint (block number and transaction index) of the first approval",
                      "transaction for this dispatch.",
                      "- `call_hash`: The hash of the call to be executed.",
                      "",
                      "## Complexity",
                      "- `O(S)`.",
                      "- Up to one balance-reserve or unreserve operation.",
                      "- One passthrough operation, one insert, both `O(S)` where `S` is the number of",
                      "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.",
                      "- One encode & hash, both of complexity `O(S)`.",
                      "- One event.",
                      "- I/O: 1 read `O(S)`, one remove.",
                      "- Storage: removes one item."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Contains a variant per dispatchable extrinsic that this pallet has."
            ]
          }
        },
        {
          "id": 185,
          "type": {
            "path": [
              "Option"
            ],
            "params": [
              {
                "name": "T",
                "type": 186
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "None",
                    "index": 0
                  },
                  {
                    "name": "Some",
                    "fields": [
                      {
                        "type": 186
                      }
                    ],
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 186,
          "type": {
            "path": [
              "pallet_multisig",
              "Timepoint"
            ],
            "params": [
              {
                "name": "BlockNumber",
                "type": 4
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "height",
                    "type": 4,
                    "typeName": "BlockNumber"
                  },
                  {
                    "name": "index",
                    "type": 4,
                    "typeName": "u32"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 187,
          "type": {
            "path": [
              "pallet_bounties",
              "pallet",
              "Call"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              },
              {
                "name": "I",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "propose_bounty",
                    "fields": [
                      {
                        "name": "value",
                        "type": 63,
                        "typeName": "BalanceOf<T, I>"
                      },
                      {
                        "name": "description",
                        "type": 14,
                        "typeName": "Vec<u8>"
                      }
                    ],
                    "index": 0,
                    "docs": [
                      "Propose a new bounty.",
                      "",
                      "The dispatch origin for this call must be _Signed_.",
                      "",
                      "Payment: `TipReportDepositBase` will be reserved from the origin account, as well as",
                      "`DataDepositPerByte` for each byte in `reason`. It will be unreserved upon approval,",
                      "or slashed when rejected.",
                      "",
                      "- `curator`: The curator account whom will manage this bounty.",
                      "- `fee`: The curator fee.",
                      "- `value`: The total payment amount of this bounty, curator fee included.",
                      "- `description`: The description of this bounty."
                    ]
                  },
                  {
                    "name": "approve_bounty",
                    "fields": [
                      {
                        "name": "bounty_id",
                        "type": 59,
                        "typeName": "BountyIndex"
                      }
                    ],
                    "index": 1,
                    "docs": [
                      "Approve a bounty proposal. At a later time, the bounty will be funded and become active",
                      "and the original deposit will be returned.",
                      "",
                      "May only be called from `T::SpendOrigin`.",
                      "",
                      "## Complexity",
                      "- O(1)."
                    ]
                  },
                  {
                    "name": "propose_curator",
                    "fields": [
                      {
                        "name": "bounty_id",
                        "type": 59,
                        "typeName": "BountyIndex"
                      },
                      {
                        "name": "curator",
                        "type": 115,
                        "typeName": "AccountIdLookupOf<T>"
                      },
                      {
                        "name": "fee",
                        "type": 63,
                        "typeName": "BalanceOf<T, I>"
                      }
                    ],
                    "index": 2,
                    "docs": [
                      "Propose a curator to a funded bounty.",
                      "",
                      "May only be called from `T::SpendOrigin`.",
                      "",
                      "## Complexity",
                      "- O(1)."
                    ]
                  },
                  {
                    "name": "unassign_curator",
                    "fields": [
                      {
                        "name": "bounty_id",
                        "type": 59,
                        "typeName": "BountyIndex"
                      }
                    ],
                    "index": 3,
                    "docs": [
                      "Unassign curator from a bounty.",
                      "",
                      "This function can only be called by the `RejectOrigin` a signed origin.",
                      "",
                      "If this function is called by the `RejectOrigin`, we assume that the curator is",
                      "malicious or inactive. As a result, we will slash the curator when possible.",
                      "",
                      "If the origin is the curator, we take this as a sign they are unable to do their job and",
                      "they willingly give up. We could slash them, but for now we allow them to recover their",
                      "deposit and exit without issue. (We may want to change this if it is abused.)",
                      "",
                      "Finally, the origin can be anyone if and only if the curator is \"inactive\". This allows",
                      "anyone in the community to call out that a curator is not doing their due diligence, and",
                      "we should pick a new curator. In this case the curator should also be slashed.",
                      "",
                      "## Complexity",
                      "- O(1)."
                    ]
                  },
                  {
                    "name": "accept_curator",
                    "fields": [
                      {
                        "name": "bounty_id",
                        "type": 59,
                        "typeName": "BountyIndex"
                      }
                    ],
                    "index": 4,
                    "docs": [
                      "Accept the curator role for a bounty.",
                      "A deposit will be reserved from curator and refund upon successful payout.",
                      "",
                      "May only be called from the curator.",
                      "",
                      "## Complexity",
                      "- O(1)."
                    ]
                  },
                  {
                    "name": "award_bounty",
                    "fields": [
                      {
                        "name": "bounty_id",
                        "type": 59,
                        "typeName": "BountyIndex"
                      },
                      {
                        "name": "beneficiary",
                        "type": 115,
                        "typeName": "AccountIdLookupOf<T>"
                      }
                    ],
                    "index": 5,
                    "docs": [
                      "Award bounty to a beneficiary account. The beneficiary will be able to claim the funds",
                      "after a delay.",
                      "",
                      "The dispatch origin for this call must be the curator of this bounty.",
                      "",
                      "- `bounty_id`: Bounty ID to award.",
                      "- `beneficiary`: The beneficiary account whom will receive the payout.",
                      "",
                      "## Complexity",
                      "- O(1)."
                    ]
                  },
                  {
                    "name": "claim_bounty",
                    "fields": [
                      {
                        "name": "bounty_id",
                        "type": 59,
                        "typeName": "BountyIndex"
                      }
                    ],
                    "index": 6,
                    "docs": [
                      "Claim the payout from an awarded bounty after payout delay.",
                      "",
                      "The dispatch origin for this call must be the beneficiary of this bounty.",
                      "",
                      "- `bounty_id`: Bounty ID to claim.",
                      "",
                      "## Complexity",
                      "- O(1)."
                    ]
                  },
                  {
                    "name": "close_bounty",
                    "fields": [
                      {
                        "name": "bounty_id",
                        "type": 59,
                        "typeName": "BountyIndex"
                      }
                    ],
                    "index": 7,
                    "docs": [
                      "Cancel a proposed or active bounty. All the funds will be sent to treasury and",
                      "the curator deposit will be unreserved if possible.",
                      "",
                      "Only `T::RejectOrigin` is able to cancel a bounty.",
                      "",
                      "- `bounty_id`: Bounty ID to cancel.",
                      "",
                      "## Complexity",
                      "- O(1)."
                    ]
                  },
                  {
                    "name": "extend_bounty_expiry",
                    "fields": [
                      {
                        "name": "bounty_id",
                        "type": 59,
                        "typeName": "BountyIndex"
                      },
                      {
                        "name": "remark",
                        "type": 14,
                        "typeName": "Vec<u8>"
                      }
                    ],
                    "index": 8,
                    "docs": [
                      "Extend the expiry time of an active bounty.",
                      "",
                      "The dispatch origin for this call must be the curator of this bounty.",
                      "",
                      "- `bounty_id`: Bounty ID to extend.",
                      "- `remark`: additional information.",
                      "",
                      "## Complexity",
                      "- O(1)."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Contains a variant per dispatchable extrinsic that this pallet has."
            ]
          }
        },
        {
          "id": 188,
          "type": {
            "path": [
              "pallet_child_bounties",
              "pallet",
              "Call"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "add_child_bounty",
                    "fields": [
                      {
                        "name": "parent_bounty_id",
                        "type": 59,
                        "typeName": "BountyIndex"
                      },
                      {
                        "name": "value",
                        "type": 63,
                        "typeName": "BalanceOf<T>"
                      },
                      {
                        "name": "description",
                        "type": 14,
                        "typeName": "Vec<u8>"
                      }
                    ],
                    "index": 0,
                    "docs": [
                      "Add a new child-bounty.",
                      "",
                      "The dispatch origin for this call must be the curator of parent",
                      "bounty and the parent bounty must be in \"active\" state.",
                      "",
                      "Child-bounty gets added successfully & fund gets transferred from",
                      "parent bounty to child-bounty account, if parent bounty has enough",
                      "funds, else the call fails.",
                      "",
                      "Upper bound to maximum number of active  child bounties that can be",
                      "added are managed via runtime trait config",
                      "[`Config::MaxActiveChildBountyCount`].",
                      "",
                      "If the call is success, the status of child-bounty is updated to",
                      "\"Added\".",
                      "",
                      "- `parent_bounty_id`: Index of parent bounty for which child-bounty is being added.",
                      "- `value`: Value for executing the proposal.",
                      "- `description`: Text description for the child-bounty."
                    ]
                  },
                  {
                    "name": "propose_curator",
                    "fields": [
                      {
                        "name": "parent_bounty_id",
                        "type": 59,
                        "typeName": "BountyIndex"
                      },
                      {
                        "name": "child_bounty_id",
                        "type": 59,
                        "typeName": "BountyIndex"
                      },
                      {
                        "name": "curator",
                        "type": 115,
                        "typeName": "AccountIdLookupOf<T>"
                      },
                      {
                        "name": "fee",
                        "type": 63,
                        "typeName": "BalanceOf<T>"
                      }
                    ],
                    "index": 1,
                    "docs": [
                      "Propose curator for funded child-bounty.",
                      "",
                      "The dispatch origin for this call must be curator of parent bounty.",
                      "",
                      "Parent bounty must be in active state, for this child-bounty call to",
                      "work.",
                      "",
                      "Child-bounty must be in \"Added\" state, for processing the call. And",
                      "state of child-bounty is moved to \"CuratorProposed\" on successful",
                      "call completion.",
                      "",
                      "- `parent_bounty_id`: Index of parent bounty.",
                      "- `child_bounty_id`: Index of child bounty.",
                      "- `curator`: Address of child-bounty curator.",
                      "- `fee`: payment fee to child-bounty curator for execution."
                    ]
                  },
                  {
                    "name": "accept_curator",
                    "fields": [
                      {
                        "name": "parent_bounty_id",
                        "type": 59,
                        "typeName": "BountyIndex"
                      },
                      {
                        "name": "child_bounty_id",
                        "type": 59,
                        "typeName": "BountyIndex"
                      }
                    ],
                    "index": 2,
                    "docs": [
                      "Accept the curator role for the child-bounty.",
                      "",
                      "The dispatch origin for this call must be the curator of this",
                      "child-bounty.",
                      "",
                      "A deposit will be reserved from the curator and refund upon",
                      "successful payout or cancellation.",
                      "",
                      "Fee for curator is deducted from curator fee of parent bounty.",
                      "",
                      "Parent bounty must be in active state, for this child-bounty call to",
                      "work.",
                      "",
                      "Child-bounty must be in \"CuratorProposed\" state, for processing the",
                      "call. And state of child-bounty is moved to \"Active\" on successful",
                      "call completion.",
                      "",
                      "- `parent_bounty_id`: Index of parent bounty.",
                      "- `child_bounty_id`: Index of child bounty."
                    ]
                  },
                  {
                    "name": "unassign_curator",
                    "fields": [
                      {
                        "name": "parent_bounty_id",
                        "type": 59,
                        "typeName": "BountyIndex"
                      },
                      {
                        "name": "child_bounty_id",
                        "type": 59,
                        "typeName": "BountyIndex"
                      }
                    ],
                    "index": 3,
                    "docs": [
                      "Unassign curator from a child-bounty.",
                      "",
                      "The dispatch origin for this call can be either `RejectOrigin`, or",
                      "the curator of the parent bounty, or any signed origin.",
                      "",
                      "For the origin other than T::RejectOrigin and the child-bounty",
                      "curator, parent bounty must be in active state, for this call to",
                      "work. We allow child-bounty curator and T::RejectOrigin to execute",
                      "this call irrespective of the parent bounty state.",
                      "",
                      "If this function is called by the `RejectOrigin` or the",
                      "parent bounty curator, we assume that the child-bounty curator is",
                      "malicious or inactive. As a result, child-bounty curator deposit is",
                      "slashed.",
                      "",
                      "If the origin is the child-bounty curator, we take this as a sign",
                      "that they are unable to do their job, and are willingly giving up.",
                      "We could slash the deposit, but for now we allow them to unreserve",
                      "their deposit and exit without issue. (We may want to change this if",
                      "it is abused.)",
                      "",
                      "Finally, the origin can be anyone iff the child-bounty curator is",
                      "\"inactive\". Expiry update due of parent bounty is used to estimate",
                      "inactive state of child-bounty curator.",
                      "",
                      "This allows anyone in the community to call out that a child-bounty",
                      "curator is not doing their due diligence, and we should pick a new",
                      "one. In this case the child-bounty curator deposit is slashed.",
                      "",
                      "State of child-bounty is moved to Added state on successful call",
                      "completion.",
                      "",
                      "- `parent_bounty_id`: Index of parent bounty.",
                      "- `child_bounty_id`: Index of child bounty."
                    ]
                  },
                  {
                    "name": "award_child_bounty",
                    "fields": [
                      {
                        "name": "parent_bounty_id",
                        "type": 59,
                        "typeName": "BountyIndex"
                      },
                      {
                        "name": "child_bounty_id",
                        "type": 59,
                        "typeName": "BountyIndex"
                      },
                      {
                        "name": "beneficiary",
                        "type": 115,
                        "typeName": "AccountIdLookupOf<T>"
                      }
                    ],
                    "index": 4,
                    "docs": [
                      "Award child-bounty to a beneficiary.",
                      "",
                      "The beneficiary will be able to claim the funds after a delay.",
                      "",
                      "The dispatch origin for this call must be the parent curator or",
                      "curator of this child-bounty.",
                      "",
                      "Parent bounty must be in active state, for this child-bounty call to",
                      "work.",
                      "",
                      "Child-bounty must be in active state, for processing the call. And",
                      "state of child-bounty is moved to \"PendingPayout\" on successful call",
                      "completion.",
                      "",
                      "- `parent_bounty_id`: Index of parent bounty.",
                      "- `child_bounty_id`: Index of child bounty.",
                      "- `beneficiary`: Beneficiary account."
                    ]
                  },
                  {
                    "name": "claim_child_bounty",
                    "fields": [
                      {
                        "name": "parent_bounty_id",
                        "type": 59,
                        "typeName": "BountyIndex"
                      },
                      {
                        "name": "child_bounty_id",
                        "type": 59,
                        "typeName": "BountyIndex"
                      }
                    ],
                    "index": 5,
                    "docs": [
                      "Claim the payout from an awarded child-bounty after payout delay.",
                      "",
                      "The dispatch origin for this call may be any signed origin.",
                      "",
                      "Call works independent of parent bounty state, No need for parent",
                      "bounty to be in active state.",
                      "",
                      "The Beneficiary is paid out with agreed bounty value. Curator fee is",
                      "paid & curator deposit is unreserved.",
                      "",
                      "Child-bounty must be in \"PendingPayout\" state, for processing the",
                      "call. And instance of child-bounty is removed from the state on",
                      "successful call completion.",
                      "",
                      "- `parent_bounty_id`: Index of parent bounty.",
                      "- `child_bounty_id`: Index of child bounty."
                    ]
                  },
                  {
                    "name": "close_child_bounty",
                    "fields": [
                      {
                        "name": "parent_bounty_id",
                        "type": 59,
                        "typeName": "BountyIndex"
                      },
                      {
                        "name": "child_bounty_id",
                        "type": 59,
                        "typeName": "BountyIndex"
                      }
                    ],
                    "index": 6,
                    "docs": [
                      "Cancel a proposed or active child-bounty. Child-bounty account funds",
                      "are transferred to parent bounty account. The child-bounty curator",
                      "deposit may be unreserved if possible.",
                      "",
                      "The dispatch origin for this call must be either parent curator or",
                      "`T::RejectOrigin`.",
                      "",
                      "If the state of child-bounty is `Active`, curator deposit is",
                      "unreserved.",
                      "",
                      "If the state of child-bounty is `PendingPayout`, call fails &",
                      "returns `PendingPayout` error.",
                      "",
                      "For the origin other than T::RejectOrigin, parent bounty must be in",
                      "active state, for this child-bounty call to work. For origin",
                      "T::RejectOrigin execution is forced.",
                      "",
                      "Instance of child-bounty is removed from the state on successful",
                      "call completion.",
                      "",
                      "- `parent_bounty_id`: Index of parent bounty.",
                      "- `child_bounty_id`: Index of child bounty."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Contains a variant per dispatchable extrinsic that this pallet has."
            ]
          }
        },
        {
          "id": 189,
          "type": {
            "path": [
              "pallet_election_provider_multi_phase",
              "pallet",
              "Call"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "submit_unsigned",
                    "fields": [
                      {
                        "name": "raw_solution",
                        "type": 190,
                        "typeName": "Box<RawSolution<SolutionOf<T::MinerConfig>>>"
                      },
                      {
                        "name": "witness",
                        "type": 243,
                        "typeName": "SolutionOrSnapshotSize"
                      }
                    ],
                    "index": 0,
                    "docs": [
                      "Submit a solution for the unsigned phase.",
                      "",
                      "The dispatch origin fo this call must be __none__.",
                      "",
                      "This submission is checked on the fly. Moreover, this unsigned solution is only",
                      "validated when submitted to the pool from the **local** node. Effectively, this means",
                      "that only active validators can submit this transaction when authoring a block (similar",
                      "to an inherent).",
                      "",
                      "To prevent any incorrect solution (and thus wasted time/weight), this transaction will",
                      "panic if the solution submitted by the validator is invalid in any way, effectively",
                      "putting their authoring reward at risk.",
                      "",
                      "No deposit or reward is associated with this submission."
                    ]
                  },
                  {
                    "name": "set_minimum_untrusted_score",
                    "fields": [
                      {
                        "name": "maybe_next_score",
                        "type": 244,
                        "typeName": "Option<ElectionScore>"
                      }
                    ],
                    "index": 1,
                    "docs": [
                      "Set a new value for `MinimumUntrustedScore`.",
                      "",
                      "Dispatch origin must be aligned with `T::ForceOrigin`.",
                      "",
                      "This check can be turned off by setting the value to `None`."
                    ]
                  },
                  {
                    "name": "set_emergency_election_result",
                    "fields": [
                      {
                        "name": "supports",
                        "type": 245,
                        "typeName": "Supports<T::AccountId>"
                      }
                    ],
                    "index": 2,
                    "docs": [
                      "Set a solution in the queue, to be handed out to the client of this pallet in the next",
                      "call to `ElectionProvider::elect`.",
                      "",
                      "This can only be set by `T::ForceOrigin`, and only when the phase is `Emergency`.",
                      "",
                      "The solution is not checked for any feasibility and is assumed to be trustworthy, as any",
                      "feasibility check itself can in principle cause the election process to fail (due to",
                      "memory/weight constrains)."
                    ]
                  },
                  {
                    "name": "submit",
                    "fields": [
                      {
                        "name": "raw_solution",
                        "type": 190,
                        "typeName": "Box<RawSolution<SolutionOf<T::MinerConfig>>>"
                      }
                    ],
                    "index": 3,
                    "docs": [
                      "Submit a solution for the signed phase.",
                      "",
                      "The dispatch origin fo this call must be __signed__.",
                      "",
                      "The solution is potentially queued, based on the claimed score and processed at the end",
                      "of the signed phase.",
                      "",
                      "A deposit is reserved and recorded for the solution. Based on the outcome, the solution",
                      "might be rewarded, slashed, or get all or a part of the deposit back."
                    ]
                  },
                  {
                    "name": "governance_fallback",
                    "fields": [
                      {
                        "name": "maybe_max_voters",
                        "type": 154,
                        "typeName": "Option<u32>"
                      },
                      {
                        "name": "maybe_max_targets",
                        "type": 154,
                        "typeName": "Option<u32>"
                      }
                    ],
                    "index": 4,
                    "docs": [
                      "Trigger the governance fallback.",
                      "",
                      "This can only be called when [`Phase::Emergency`] is enabled, as an alternative to",
                      "calling [`Call::set_emergency_election_result`]."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Contains a variant per dispatchable extrinsic that this pallet has."
            ]
          }
        },
        {
          "id": 190,
          "type": {
            "path": [
              "pallet_election_provider_multi_phase",
              "RawSolution"
            ],
            "params": [
              {
                "name": "S",
                "type": 191
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "solution",
                    "type": 191,
                    "typeName": "S"
                  },
                  {
                    "name": "score",
                    "type": 242,
                    "typeName": "ElectionScore"
                  },
                  {
                    "name": "round",
                    "type": 4,
                    "typeName": "u32"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 191,
          "type": {
            "path": [
              "polkadot_runtime",
              "NposCompactSolution16"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "votes1",
                    "type": 192
                  },
                  {
                    "name": "votes2",
                    "type": 195
                  },
                  {
                    "name": "votes3",
                    "type": 200
                  },
                  {
                    "name": "votes4",
                    "type": 203
                  },
                  {
                    "name": "votes5",
                    "type": 206
                  },
                  {
                    "name": "votes6",
                    "type": 209
                  },
                  {
                    "name": "votes7",
                    "type": 212
                  },
                  {
                    "name": "votes8",
                    "type": 215
                  },
                  {
                    "name": "votes9",
                    "type": 218
                  },
                  {
                    "name": "votes10",
                    "type": 221
                  },
                  {
                    "name": "votes11",
                    "type": 224
                  },
                  {
                    "name": "votes12",
                    "type": 227
                  },
                  {
                    "name": "votes13",
                    "type": 230
                  },
                  {
                    "name": "votes14",
                    "type": 233
                  },
                  {
                    "name": "votes15",
                    "type": 236
                  },
                  {
                    "name": "votes16",
                    "type": 239
                  }
                ]
              }
            }
          }
        },
        {
          "id": 192,
          "type": {
            "def": {
              "sequence": {
                "type": 193
              }
            }
          }
        },
        {
          "id": 193,
          "type": {
            "def": {
              "tuple": [
                59,
                194
              ]
            }
          }
        },
        {
          "id": 194,
          "type": {
            "def": {
              "compact": {
                "type": 93
              }
            }
          }
        },
        {
          "id": 195,
          "type": {
            "def": {
              "sequence": {
                "type": 196
              }
            }
          }
        },
        {
          "id": 196,
          "type": {
            "def": {
              "tuple": [
                59,
                197,
                194
              ]
            }
          }
        },
        {
          "id": 197,
          "type": {
            "def": {
              "tuple": [
                194,
                198
              ]
            }
          }
        },
        {
          "id": 198,
          "type": {
            "def": {
              "compact": {
                "type": 199
              }
            }
          }
        },
        {
          "id": 199,
          "type": {
            "path": [
              "sp_arithmetic",
              "per_things",
              "PerU16"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 93,
                    "typeName": "u16"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 200,
          "type": {
            "def": {
              "sequence": {
                "type": 201
              }
            }
          }
        },
        {
          "id": 201,
          "type": {
            "def": {
              "tuple": [
                59,
                202,
                194
              ]
            }
          }
        },
        {
          "id": 202,
          "type": {
            "def": {
              "array": {
                "len": 2,
                "type": 197
              }
            }
          }
        },
        {
          "id": 203,
          "type": {
            "def": {
              "sequence": {
                "type": 204
              }
            }
          }
        },
        {
          "id": 204,
          "type": {
            "def": {
              "tuple": [
                59,
                205,
                194
              ]
            }
          }
        },
        {
          "id": 205,
          "type": {
            "def": {
              "array": {
                "len": 3,
                "type": 197
              }
            }
          }
        },
        {
          "id": 206,
          "type": {
            "def": {
              "sequence": {
                "type": 207
              }
            }
          }
        },
        {
          "id": 207,
          "type": {
            "def": {
              "tuple": [
                59,
                208,
                194
              ]
            }
          }
        },
        {
          "id": 208,
          "type": {
            "def": {
              "array": {
                "len": 4,
                "type": 197
              }
            }
          }
        },
        {
          "id": 209,
          "type": {
            "def": {
              "sequence": {
                "type": 210
              }
            }
          }
        },
        {
          "id": 210,
          "type": {
            "def": {
              "tuple": [
                59,
                211,
                194
              ]
            }
          }
        },
        {
          "id": 211,
          "type": {
            "def": {
              "array": {
                "len": 5,
                "type": 197
              }
            }
          }
        },
        {
          "id": 212,
          "type": {
            "def": {
              "sequence": {
                "type": 213
              }
            }
          }
        },
        {
          "id": 213,
          "type": {
            "def": {
              "tuple": [
                59,
                214,
                194
              ]
            }
          }
        },
        {
          "id": 214,
          "type": {
            "def": {
              "array": {
                "len": 6,
                "type": 197
              }
            }
          }
        },
        {
          "id": 215,
          "type": {
            "def": {
              "sequence": {
                "type": 216
              }
            }
          }
        },
        {
          "id": 216,
          "type": {
            "def": {
              "tuple": [
                59,
                217,
                194
              ]
            }
          }
        },
        {
          "id": 217,
          "type": {
            "def": {
              "array": {
                "len": 7,
                "type": 197
              }
            }
          }
        },
        {
          "id": 218,
          "type": {
            "def": {
              "sequence": {
                "type": 219
              }
            }
          }
        },
        {
          "id": 219,
          "type": {
            "def": {
              "tuple": [
                59,
                220,
                194
              ]
            }
          }
        },
        {
          "id": 220,
          "type": {
            "def": {
              "array": {
                "len": 8,
                "type": 197
              }
            }
          }
        },
        {
          "id": 221,
          "type": {
            "def": {
              "sequence": {
                "type": 222
              }
            }
          }
        },
        {
          "id": 222,
          "type": {
            "def": {
              "tuple": [
                59,
                223,
                194
              ]
            }
          }
        },
        {
          "id": 223,
          "type": {
            "def": {
              "array": {
                "len": 9,
                "type": 197
              }
            }
          }
        },
        {
          "id": 224,
          "type": {
            "def": {
              "sequence": {
                "type": 225
              }
            }
          }
        },
        {
          "id": 225,
          "type": {
            "def": {
              "tuple": [
                59,
                226,
                194
              ]
            }
          }
        },
        {
          "id": 226,
          "type": {
            "def": {
              "array": {
                "len": 10,
                "type": 197
              }
            }
          }
        },
        {
          "id": 227,
          "type": {
            "def": {
              "sequence": {
                "type": 228
              }
            }
          }
        },
        {
          "id": 228,
          "type": {
            "def": {
              "tuple": [
                59,
                229,
                194
              ]
            }
          }
        },
        {
          "id": 229,
          "type": {
            "def": {
              "array": {
                "len": 11,
                "type": 197
              }
            }
          }
        },
        {
          "id": 230,
          "type": {
            "def": {
              "sequence": {
                "type": 231
              }
            }
          }
        },
        {
          "id": 231,
          "type": {
            "def": {
              "tuple": [
                59,
                232,
                194
              ]
            }
          }
        },
        {
          "id": 232,
          "type": {
            "def": {
              "array": {
                "len": 12,
                "type": 197
              }
            }
          }
        },
        {
          "id": 233,
          "type": {
            "def": {
              "sequence": {
                "type": 234
              }
            }
          }
        },
        {
          "id": 234,
          "type": {
            "def": {
              "tuple": [
                59,
                235,
                194
              ]
            }
          }
        },
        {
          "id": 235,
          "type": {
            "def": {
              "array": {
                "len": 13,
                "type": 197
              }
            }
          }
        },
        {
          "id": 236,
          "type": {
            "def": {
              "sequence": {
                "type": 237
              }
            }
          }
        },
        {
          "id": 237,
          "type": {
            "def": {
              "tuple": [
                59,
                238,
                194
              ]
            }
          }
        },
        {
          "id": 238,
          "type": {
            "def": {
              "array": {
                "len": 14,
                "type": 197
              }
            }
          }
        },
        {
          "id": 239,
          "type": {
            "def": {
              "sequence": {
                "type": 240
              }
            }
          }
        },
        {
          "id": 240,
          "type": {
            "def": {
              "tuple": [
                59,
                241,
                194
              ]
            }
          }
        },
        {
          "id": 241,
          "type": {
            "def": {
              "array": {
                "len": 15,
                "type": 197
              }
            }
          }
        },
        {
          "id": 242,
          "type": {
            "path": [
              "sp_npos_elections",
              "ElectionScore"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "minimal_stake",
                    "type": 6,
                    "typeName": "ExtendedBalance"
                  },
                  {
                    "name": "sum_stake",
                    "type": 6,
                    "typeName": "ExtendedBalance"
                  },
                  {
                    "name": "sum_stake_squared",
                    "type": 6,
                    "typeName": "ExtendedBalance"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 243,
          "type": {
            "path": [
              "pallet_election_provider_multi_phase",
              "SolutionOrSnapshotSize"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "voters",
                    "type": 59,
                    "typeName": "u32"
                  },
                  {
                    "name": "targets",
                    "type": 59,
                    "typeName": "u32"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 244,
          "type": {
            "path": [
              "Option"
            ],
            "params": [
              {
                "name": "T",
                "type": 242
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "None",
                    "index": 0
                  },
                  {
                    "name": "Some",
                    "fields": [
                      {
                        "type": 242
                      }
                    ],
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 245,
          "type": {
            "def": {
              "sequence": {
                "type": 246
              }
            }
          }
        },
        {
          "id": 246,
          "type": {
            "def": {
              "tuple": [
                0,
                247
              ]
            }
          }
        },
        {
          "id": 247,
          "type": {
            "path": [
              "sp_npos_elections",
              "Support"
            ],
            "params": [
              {
                "name": "AccountId",
                "type": 0
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "total",
                    "type": 6,
                    "typeName": "ExtendedBalance"
                  },
                  {
                    "name": "voters",
                    "type": 248,
                    "typeName": "Vec<(AccountId, ExtendedBalance)>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 248,
          "type": {
            "def": {
              "sequence": {
                "type": 249
              }
            }
          }
        },
        {
          "id": 249,
          "type": {
            "def": {
              "tuple": [
                0,
                6
              ]
            }
          }
        },
        {
          "id": 250,
          "type": {
            "path": [
              "pallet_bags_list",
              "pallet",
              "Call"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              },
              {
                "name": "I",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "rebag",
                    "fields": [
                      {
                        "name": "dislocated",
                        "type": 115,
                        "typeName": "AccountIdLookupOf<T>"
                      }
                    ],
                    "index": 0,
                    "docs": [
                      "Declare that some `dislocated` account has, through rewards or penalties, sufficiently",
                      "changed its score that it should properly fall into a different bag than its current",
                      "one.",
                      "",
                      "Anyone can call this function about any potentially dislocated account.",
                      "",
                      "Will always update the stored score of `dislocated` to the correct score, based on",
                      "`ScoreProvider`.",
                      "",
                      "If `dislocated` does not exists, it returns an error."
                    ]
                  },
                  {
                    "name": "put_in_front_of",
                    "fields": [
                      {
                        "name": "lighter",
                        "type": 115,
                        "typeName": "AccountIdLookupOf<T>"
                      }
                    ],
                    "index": 1,
                    "docs": [
                      "Move the caller's Id directly in front of `lighter`.",
                      "",
                      "The dispatch origin for this call must be _Signed_ and can only be called by the Id of",
                      "the account going in front of `lighter`. Fee is payed by the origin under all",
                      "circumstances.",
                      "",
                      "Only works if:",
                      "",
                      "- both nodes are within the same bag,",
                      "- and `origin` has a greater `Score` than `lighter`."
                    ]
                  },
                  {
                    "name": "put_in_front_of_other",
                    "fields": [
                      {
                        "name": "heavier",
                        "type": 115,
                        "typeName": "AccountIdLookupOf<T>"
                      },
                      {
                        "name": "lighter",
                        "type": 115,
                        "typeName": "AccountIdLookupOf<T>"
                      }
                    ],
                    "index": 2,
                    "docs": [
                      "Same as [`Pallet::put_in_front_of`], but it can be called by anyone.",
                      "",
                      "Fee is paid by the origin under all circumstances."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Contains a variant per dispatchable extrinsic that this pallet has."
            ]
          }
        },
        {
          "id": 251,
          "type": {
            "path": [
              "pallet_nomination_pools",
              "pallet",
              "Call"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "join",
                    "fields": [
                      {
                        "name": "amount",
                        "type": 63,
                        "typeName": "BalanceOf<T>"
                      },
                      {
                        "name": "pool_id",
                        "type": 4,
                        "typeName": "PoolId"
                      }
                    ],
                    "index": 0,
                    "docs": [
                      "Stake funds with a pool. The amount to bond is delegated (or transferred based on",
                      "[`adapter::StakeStrategyType`]) from the member to the pool account and immediately",
                      "increases the pool's bond.",
                      "",
                      "The method of transferring the amount to the pool account is determined by",
                      "[`adapter::StakeStrategyType`]. If the pool is configured to use",
                      "[`adapter::StakeStrategyType::Delegate`], the funds remain in the account of",
                      "the `origin`, while the pool gains the right to use these funds for staking.",
                      "",
                      "# Note",
                      "",
                      "* An account can only be a member of a single pool.",
                      "* An account cannot join the same pool multiple times.",
                      "* This call will *not* dust the member account, so the member must have at least",
                      "  `existential deposit + amount` in their account.",
                      "* Only a pool with [`PoolState::Open`] can be joined"
                    ]
                  },
                  {
                    "name": "bond_extra",
                    "fields": [
                      {
                        "name": "extra",
                        "type": 252,
                        "typeName": "BondExtra<BalanceOf<T>>"
                      }
                    ],
                    "index": 1,
                    "docs": [
                      "Bond `extra` more funds from `origin` into the pool to which they already belong.",
                      "",
                      "Additional funds can come from either the free balance of the account, of from the",
                      "accumulated rewards, see [`BondExtra`].",
                      "",
                      "Bonding extra funds implies an automatic payout of all pending rewards as well.",
                      "See `bond_extra_other` to bond pending rewards of `other` members."
                    ]
                  },
                  {
                    "name": "claim_payout",
                    "index": 2,
                    "docs": [
                      "A bonded member can use this to claim their payout based on the rewards that the pool",
                      "has accumulated since their last claimed payout (OR since joining if this is their first",
                      "time claiming rewards). The payout will be transferred to the member's account.",
                      "",
                      "The member will earn rewards pro rata based on the members stake vs the sum of the",
                      "members in the pools stake. Rewards do not \"expire\".",
                      "",
                      "See `claim_payout_other` to claim rewards on behalf of some `other` pool member."
                    ]
                  },
                  {
                    "name": "unbond",
                    "fields": [
                      {
                        "name": "member_account",
                        "type": 115,
                        "typeName": "AccountIdLookupOf<T>"
                      },
                      {
                        "name": "unbonding_points",
                        "type": 63,
                        "typeName": "BalanceOf<T>"
                      }
                    ],
                    "index": 3,
                    "docs": [
                      "Unbond up to `unbonding_points` of the `member_account`'s funds from the pool. It",
                      "implicitly collects the rewards one last time, since not doing so would mean some",
                      "rewards would be forfeited.",
                      "",
                      "Under certain conditions, this call can be dispatched permissionlessly (i.e. by any",
                      "account).",
                      "",
                      "# Conditions for a permissionless dispatch.",
                      "",
                      "* The pool is blocked and the caller is either the root or bouncer. This is refereed to",
                      "  as a kick.",
                      "* The pool is destroying and the member is not the depositor.",
                      "* The pool is destroying, the member is the depositor and no other members are in the",
                      "  pool.",
                      "",
                      "## Conditions for permissioned dispatch (i.e. the caller is also the",
                      "`member_account`):",
                      "",
                      "* The caller is not the depositor.",
                      "* The caller is the depositor, the pool is destroying and no other members are in the",
                      "  pool.",
                      "",
                      "# Note",
                      "",
                      "If there are too many unlocking chunks to unbond with the pool account,",
                      "[`Call::pool_withdraw_unbonded`] can be called to try and minimize unlocking chunks.",
                      "The [`StakingInterface::unbond`] will implicitly call [`Call::pool_withdraw_unbonded`]",
                      "to try to free chunks if necessary (ie. if unbound was called and no unlocking chunks",
                      "are available). However, it may not be possible to release the current unlocking chunks,",
                      "in which case, the result of this call will likely be the `NoMoreChunks` error from the",
                      "staking system."
                    ]
                  },
                  {
                    "name": "pool_withdraw_unbonded",
                    "fields": [
                      {
                        "name": "pool_id",
                        "type": 4,
                        "typeName": "PoolId"
                      },
                      {
                        "name": "num_slashing_spans",
                        "type": 4,
                        "typeName": "u32"
                      }
                    ],
                    "index": 4,
                    "docs": [
                      "Call `withdraw_unbonded` for the pools account. This call can be made by any account.",
                      "",
                      "This is useful if there are too many unlocking chunks to call `unbond`, and some",
                      "can be cleared by withdrawing. In the case there are too many unlocking chunks, the user",
                      "would probably see an error like `NoMoreChunks` emitted from the staking system when",
                      "they attempt to unbond."
                    ]
                  },
                  {
                    "name": "withdraw_unbonded",
                    "fields": [
                      {
                        "name": "member_account",
                        "type": 115,
                        "typeName": "AccountIdLookupOf<T>"
                      },
                      {
                        "name": "num_slashing_spans",
                        "type": 4,
                        "typeName": "u32"
                      }
                    ],
                    "index": 5,
                    "docs": [
                      "Withdraw unbonded funds from `member_account`. If no bonded funds can be unbonded, an",
                      "error is returned.",
                      "",
                      "Under certain conditions, this call can be dispatched permissionlessly (i.e. by any",
                      "account).",
                      "",
                      "# Conditions for a permissionless dispatch",
                      "",
                      "* The pool is in destroy mode and the target is not the depositor.",
                      "* The target is the depositor and they are the only member in the sub pools.",
                      "* The pool is blocked and the caller is either the root or bouncer.",
                      "",
                      "# Conditions for permissioned dispatch",
                      "",
                      "* The caller is the target and they are not the depositor.",
                      "",
                      "# Note",
                      "",
                      "- If the target is the depositor, the pool will be destroyed.",
                      "- If the pool has any pending slash, we also try to slash the member before letting them",
                      "withdraw. This calculation adds some weight overhead and is only defensive. In reality,",
                      "pool slashes must have been already applied via permissionless [`Call::apply_slash`]."
                    ]
                  },
                  {
                    "name": "create",
                    "fields": [
                      {
                        "name": "amount",
                        "type": 63,
                        "typeName": "BalanceOf<T>"
                      },
                      {
                        "name": "root",
                        "type": 115,
                        "typeName": "AccountIdLookupOf<T>"
                      },
                      {
                        "name": "nominator",
                        "type": 115,
                        "typeName": "AccountIdLookupOf<T>"
                      },
                      {
                        "name": "bouncer",
                        "type": 115,
                        "typeName": "AccountIdLookupOf<T>"
                      }
                    ],
                    "index": 6,
                    "docs": [
                      "Create a new delegation pool.",
                      "",
                      "# Arguments",
                      "",
                      "* `amount` - The amount of funds to delegate to the pool. This also acts of a sort of",
                      "  deposit since the pools creator cannot fully unbond funds until the pool is being",
                      "  destroyed.",
                      "* `index` - A disambiguation index for creating the account. Likely only useful when",
                      "  creating multiple pools in the same extrinsic.",
                      "* `root` - The account to set as [`PoolRoles::root`].",
                      "* `nominator` - The account to set as the [`PoolRoles::nominator`].",
                      "* `bouncer` - The account to set as the [`PoolRoles::bouncer`].",
                      "",
                      "# Note",
                      "",
                      "In addition to `amount`, the caller will transfer the existential deposit; so the caller",
                      "needs at have at least `amount + existential_deposit` transferable."
                    ]
                  },
                  {
                    "name": "create_with_pool_id",
                    "fields": [
                      {
                        "name": "amount",
                        "type": 63,
                        "typeName": "BalanceOf<T>"
                      },
                      {
                        "name": "root",
                        "type": 115,
                        "typeName": "AccountIdLookupOf<T>"
                      },
                      {
                        "name": "nominator",
                        "type": 115,
                        "typeName": "AccountIdLookupOf<T>"
                      },
                      {
                        "name": "bouncer",
                        "type": 115,
                        "typeName": "AccountIdLookupOf<T>"
                      },
                      {
                        "name": "pool_id",
                        "type": 4,
                        "typeName": "PoolId"
                      }
                    ],
                    "index": 7,
                    "docs": [
                      "Create a new delegation pool with a previously used pool id",
                      "",
                      "# Arguments",
                      "",
                      "same as `create` with the inclusion of",
                      "* `pool_id` - `A valid PoolId."
                    ]
                  },
                  {
                    "name": "nominate",
                    "fields": [
                      {
                        "name": "pool_id",
                        "type": 4,
                        "typeName": "PoolId"
                      },
                      {
                        "name": "validators",
                        "type": 118,
                        "typeName": "Vec<T::AccountId>"
                      }
                    ],
                    "index": 8,
                    "docs": [
                      "Nominate on behalf of the pool.",
                      "",
                      "The dispatch origin of this call must be signed by the pool nominator or the pool",
                      "root role.",
                      "",
                      "This directly forward the call to the staking pallet, on behalf of the pool bonded",
                      "account.",
                      "",
                      "# Note",
                      "",
                      "In addition to a `root` or `nominator` role of `origin`, pool's depositor needs to have",
                      "at least `depositor_min_bond` in the pool to start nominating."
                    ]
                  },
                  {
                    "name": "set_state",
                    "fields": [
                      {
                        "name": "pool_id",
                        "type": 4,
                        "typeName": "PoolId"
                      },
                      {
                        "name": "state",
                        "type": 253,
                        "typeName": "PoolState"
                      }
                    ],
                    "index": 9,
                    "docs": [
                      "Set a new state for the pool.",
                      "",
                      "If a pool is already in the `Destroying` state, then under no condition can its state",
                      "change again.",
                      "",
                      "The dispatch origin of this call must be either:",
                      "",
                      "1. signed by the bouncer, or the root role of the pool,",
                      "2. if the pool conditions to be open are NOT met (as described by `ok_to_be_open`), and",
                      "   then the state of the pool can be permissionlessly changed to `Destroying`."
                    ]
                  },
                  {
                    "name": "set_metadata",
                    "fields": [
                      {
                        "name": "pool_id",
                        "type": 4,
                        "typeName": "PoolId"
                      },
                      {
                        "name": "metadata",
                        "type": 14,
                        "typeName": "Vec<u8>"
                      }
                    ],
                    "index": 10,
                    "docs": [
                      "Set a new metadata for the pool.",
                      "",
                      "The dispatch origin of this call must be signed by the bouncer, or the root role of the",
                      "pool."
                    ]
                  },
                  {
                    "name": "set_configs",
                    "fields": [
                      {
                        "name": "min_join_bond",
                        "type": 254,
                        "typeName": "ConfigOp<BalanceOf<T>>"
                      },
                      {
                        "name": "min_create_bond",
                        "type": 254,
                        "typeName": "ConfigOp<BalanceOf<T>>"
                      },
                      {
                        "name": "max_pools",
                        "type": 255,
                        "typeName": "ConfigOp<u32>"
                      },
                      {
                        "name": "max_members",
                        "type": 255,
                        "typeName": "ConfigOp<u32>"
                      },
                      {
                        "name": "max_members_per_pool",
                        "type": 255,
                        "typeName": "ConfigOp<u32>"
                      },
                      {
                        "name": "global_max_commission",
                        "type": 256,
                        "typeName": "ConfigOp<Perbill>"
                      }
                    ],
                    "index": 11,
                    "docs": [
                      "Update configurations for the nomination pools. The origin for this call must be",
                      "[`Config::AdminOrigin`].",
                      "",
                      "# Arguments",
                      "",
                      "* `min_join_bond` - Set [`MinJoinBond`].",
                      "* `min_create_bond` - Set [`MinCreateBond`].",
                      "* `max_pools` - Set [`MaxPools`].",
                      "* `max_members` - Set [`MaxPoolMembers`].",
                      "* `max_members_per_pool` - Set [`MaxPoolMembersPerPool`].",
                      "* `global_max_commission` - Set [`GlobalMaxCommission`]."
                    ]
                  },
                  {
                    "name": "update_roles",
                    "fields": [
                      {
                        "name": "pool_id",
                        "type": 4,
                        "typeName": "PoolId"
                      },
                      {
                        "name": "new_root",
                        "type": 257,
                        "typeName": "ConfigOp<T::AccountId>"
                      },
                      {
                        "name": "new_nominator",
                        "type": 257,
                        "typeName": "ConfigOp<T::AccountId>"
                      },
                      {
                        "name": "new_bouncer",
                        "type": 257,
                        "typeName": "ConfigOp<T::AccountId>"
                      }
                    ],
                    "index": 12,
                    "docs": [
                      "Update the roles of the pool.",
                      "",
                      "The root is the only entity that can change any of the roles, including itself,",
                      "excluding the depositor, who can never change.",
                      "",
                      "It emits an event, notifying UIs of the role change. This event is quite relevant to",
                      "most pool members and they should be informed of changes to pool roles."
                    ]
                  },
                  {
                    "name": "chill",
                    "fields": [
                      {
                        "name": "pool_id",
                        "type": 4,
                        "typeName": "PoolId"
                      }
                    ],
                    "index": 13,
                    "docs": [
                      "Chill on behalf of the pool.",
                      "",
                      "The dispatch origin of this call can be signed by the pool nominator or the pool",
                      "root role, same as [`Pallet::nominate`].",
                      "",
                      "Under certain conditions, this call can be dispatched permissionlessly (i.e. by any",
                      "account).",
                      "",
                      "# Conditions for a permissionless dispatch:",
                      "* When pool depositor has less than `MinNominatorBond` staked, otherwise  pool members",
                      "  are unable to unbond.",
                      "",
                      "# Conditions for permissioned dispatch:",
                      "* The caller has a nominator or root role of the pool.",
                      "This directly forward the call to the staking pallet, on behalf of the pool bonded",
                      "account."
                    ]
                  },
                  {
                    "name": "bond_extra_other",
                    "fields": [
                      {
                        "name": "member",
                        "type": 115,
                        "typeName": "AccountIdLookupOf<T>"
                      },
                      {
                        "name": "extra",
                        "type": 252,
                        "typeName": "BondExtra<BalanceOf<T>>"
                      }
                    ],
                    "index": 14,
                    "docs": [
                      "`origin` bonds funds from `extra` for some pool member `member` into their respective",
                      "pools.",
                      "",
                      "`origin` can bond extra funds from free balance or pending rewards when `origin ==",
                      "other`.",
                      "",
                      "In the case of `origin != other`, `origin` can only bond extra pending rewards of",
                      "`other` members assuming set_claim_permission for the given member is",
                      "`PermissionlessCompound` or `PermissionlessAll`."
                    ]
                  },
                  {
                    "name": "set_claim_permission",
                    "fields": [
                      {
                        "name": "permission",
                        "type": 258,
                        "typeName": "ClaimPermission"
                      }
                    ],
                    "index": 15,
                    "docs": [
                      "Allows a pool member to set a claim permission to allow or disallow permissionless",
                      "bonding and withdrawing.",
                      "",
                      "# Arguments",
                      "",
                      "* `origin` - Member of a pool.",
                      "* `permission` - The permission to be applied."
                    ]
                  },
                  {
                    "name": "claim_payout_other",
                    "fields": [
                      {
                        "name": "other",
                        "type": 0,
                        "typeName": "T::AccountId"
                      }
                    ],
                    "index": 16,
                    "docs": [
                      "`origin` can claim payouts on some pool member `other`'s behalf.",
                      "",
                      "Pool member `other` must have a `PermissionlessWithdraw` or `PermissionlessAll` claim",
                      "permission for this call to be successful."
                    ]
                  },
                  {
                    "name": "set_commission",
                    "fields": [
                      {
                        "name": "pool_id",
                        "type": 4,
                        "typeName": "PoolId"
                      },
                      {
                        "name": "new_commission",
                        "type": 259,
                        "typeName": "Option<(Perbill, T::AccountId)>"
                      }
                    ],
                    "index": 17,
                    "docs": [
                      "Set the commission of a pool.",
                      "Both a commission percentage and a commission payee must be provided in the `current`",
                      "tuple. Where a `current` of `None` is provided, any current commission will be removed.",
                      "",
                      "- If a `None` is supplied to `new_commission`, existing commission will be removed."
                    ]
                  },
                  {
                    "name": "set_commission_max",
                    "fields": [
                      {
                        "name": "pool_id",
                        "type": 4,
                        "typeName": "PoolId"
                      },
                      {
                        "name": "max_commission",
                        "type": 43,
                        "typeName": "Perbill"
                      }
                    ],
                    "index": 18,
                    "docs": [
                      "Set the maximum commission of a pool.",
                      "",
                      "- Initial max can be set to any `Perbill`, and only smaller values thereafter.",
                      "- Current commission will be lowered in the event it is higher than a new max",
                      "  commission."
                    ]
                  },
                  {
                    "name": "set_commission_change_rate",
                    "fields": [
                      {
                        "name": "pool_id",
                        "type": 4,
                        "typeName": "PoolId"
                      },
                      {
                        "name": "change_rate",
                        "type": 261,
                        "typeName": "CommissionChangeRate<BlockNumberFor<T>>"
                      }
                    ],
                    "index": 19,
                    "docs": [
                      "Set the commission change rate for a pool.",
                      "",
                      "Initial change rate is not bounded, whereas subsequent updates can only be more",
                      "restrictive than the current."
                    ]
                  },
                  {
                    "name": "claim_commission",
                    "fields": [
                      {
                        "name": "pool_id",
                        "type": 4,
                        "typeName": "PoolId"
                      }
                    ],
                    "index": 20,
                    "docs": [
                      "Claim pending commission.",
                      "",
                      "The dispatch origin of this call must be signed by the `root` role of the pool. Pending",
                      "commission is paid out and added to total claimed commission`. Total pending commission",
                      "is reset to zero. the current."
                    ]
                  },
                  {
                    "name": "adjust_pool_deposit",
                    "fields": [
                      {
                        "name": "pool_id",
                        "type": 4,
                        "typeName": "PoolId"
                      }
                    ],
                    "index": 21,
                    "docs": [
                      "Top up the deficit or withdraw the excess ED from the pool.",
                      "",
                      "When a pool is created, the pool depositor transfers ED to the reward account of the",
                      "pool. ED is subject to change and over time, the deposit in the reward account may be",
                      "insufficient to cover the ED deficit of the pool or vice-versa where there is excess",
                      "deposit to the pool. This call allows anyone to adjust the ED deposit of the",
                      "pool by either topping up the deficit or claiming the excess."
                    ]
                  },
                  {
                    "name": "set_commission_claim_permission",
                    "fields": [
                      {
                        "name": "pool_id",
                        "type": 4,
                        "typeName": "PoolId"
                      },
                      {
                        "name": "permission",
                        "type": 262,
                        "typeName": "Option<CommissionClaimPermission<T::AccountId>>"
                      }
                    ],
                    "index": 22,
                    "docs": [
                      "Set or remove a pool's commission claim permission.",
                      "",
                      "Determines who can claim the pool's pending commission. Only the `Root` role of the pool",
                      "is able to configure commission claim permissions."
                    ]
                  },
                  {
                    "name": "apply_slash",
                    "fields": [
                      {
                        "name": "member_account",
                        "type": 115,
                        "typeName": "AccountIdLookupOf<T>"
                      }
                    ],
                    "index": 23,
                    "docs": [
                      "Apply a pending slash on a member.",
                      "",
                      "Fails unless [`crate::pallet::Config::StakeAdapter`] is of strategy type:",
                      "[`adapter::StakeStrategyType::Delegate`].",
                      "",
                      "The pending slash amount of the member must be equal or more than `ExistentialDeposit`.",
                      "This call can be dispatched permissionlessly (i.e. by any account). If the execution",
                      "is successful, fee is refunded and caller may be rewarded with a part of the slash",
                      "based on the [`crate::pallet::Config::StakeAdapter`] configuration."
                    ]
                  },
                  {
                    "name": "migrate_delegation",
                    "fields": [
                      {
                        "name": "member_account",
                        "type": 115,
                        "typeName": "AccountIdLookupOf<T>"
                      }
                    ],
                    "index": 24,
                    "docs": [
                      "Migrates delegated funds from the pool account to the `member_account`.",
                      "",
                      "Fails unless [`crate::pallet::Config::StakeAdapter`] is of strategy type:",
                      "[`adapter::StakeStrategyType::Delegate`].",
                      "",
                      "This is a permission-less call and refunds any fee if claim is successful.",
                      "",
                      "If the pool has migrated to delegation based staking, the staked tokens of pool members",
                      "can be moved and held in their own account. See [`adapter::DelegateStake`]"
                    ]
                  },
                  {
                    "name": "migrate_pool_to_delegate_stake",
                    "fields": [
                      {
                        "name": "pool_id",
                        "type": 4,
                        "typeName": "PoolId"
                      }
                    ],
                    "index": 25,
                    "docs": [
                      "Migrate pool from [`adapter::StakeStrategyType::Transfer`] to",
                      "[`adapter::StakeStrategyType::Delegate`].",
                      "",
                      "Fails unless [`crate::pallet::Config::StakeAdapter`] is of strategy type:",
                      "[`adapter::StakeStrategyType::Delegate`].",
                      "",
                      "This call can be dispatched permissionlessly, and refunds any fee if successful.",
                      "",
                      "If the pool has already migrated to delegation based staking, this call will fail."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Contains a variant per dispatchable extrinsic that this pallet has."
            ]
          }
        },
        {
          "id": 252,
          "type": {
            "path": [
              "pallet_nomination_pools",
              "BondExtra"
            ],
            "params": [
              {
                "name": "Balance",
                "type": 6
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "FreeBalance",
                    "fields": [
                      {
                        "type": 6,
                        "typeName": "Balance"
                      }
                    ],
                    "index": 0
                  },
                  {
                    "name": "Rewards",
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 253,
          "type": {
            "path": [
              "pallet_nomination_pools",
              "PoolState"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Open",
                    "index": 0
                  },
                  {
                    "name": "Blocked",
                    "index": 1
                  },
                  {
                    "name": "Destroying",
                    "index": 2
                  }
                ]
              }
            }
          }
        },
        {
          "id": 254,
          "type": {
            "path": [
              "pallet_nomination_pools",
              "ConfigOp"
            ],
            "params": [
              {
                "name": "T",
                "type": 6
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Noop",
                    "index": 0
                  },
                  {
                    "name": "Set",
                    "fields": [
                      {
                        "type": 6,
                        "typeName": "T"
                      }
                    ],
                    "index": 1
                  },
                  {
                    "name": "Remove",
                    "index": 2
                  }
                ]
              }
            }
          }
        },
        {
          "id": 255,
          "type": {
            "path": [
              "pallet_nomination_pools",
              "ConfigOp"
            ],
            "params": [
              {
                "name": "T",
                "type": 4
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Noop",
                    "index": 0
                  },
                  {
                    "name": "Set",
                    "fields": [
                      {
                        "type": 4,
                        "typeName": "T"
                      }
                    ],
                    "index": 1
                  },
                  {
                    "name": "Remove",
                    "index": 2
                  }
                ]
              }
            }
          }
        },
        {
          "id": 256,
          "type": {
            "path": [
              "pallet_nomination_pools",
              "ConfigOp"
            ],
            "params": [
              {
                "name": "T",
                "type": 43
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Noop",
                    "index": 0
                  },
                  {
                    "name": "Set",
                    "fields": [
                      {
                        "type": 43,
                        "typeName": "T"
                      }
                    ],
                    "index": 1
                  },
                  {
                    "name": "Remove",
                    "index": 2
                  }
                ]
              }
            }
          }
        },
        {
          "id": 257,
          "type": {
            "path": [
              "pallet_nomination_pools",
              "ConfigOp"
            ],
            "params": [
              {
                "name": "T",
                "type": 0
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Noop",
                    "index": 0
                  },
                  {
                    "name": "Set",
                    "fields": [
                      {
                        "type": 0,
                        "typeName": "T"
                      }
                    ],
                    "index": 1
                  },
                  {
                    "name": "Remove",
                    "index": 2
                  }
                ]
              }
            }
          }
        },
        {
          "id": 258,
          "type": {
            "path": [
              "pallet_nomination_pools",
              "ClaimPermission"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Permissioned",
                    "index": 0
                  },
                  {
                    "name": "PermissionlessCompound",
                    "index": 1
                  },
                  {
                    "name": "PermissionlessWithdraw",
                    "index": 2
                  },
                  {
                    "name": "PermissionlessAll",
                    "index": 3
                  }
                ]
              }
            }
          }
        },
        {
          "id": 259,
          "type": {
            "path": [
              "Option"
            ],
            "params": [
              {
                "name": "T",
                "type": 260
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "None",
                    "index": 0
                  },
                  {
                    "name": "Some",
                    "fields": [
                      {
                        "type": 260
                      }
                    ],
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 260,
          "type": {
            "def": {
              "tuple": [
                43,
                0
              ]
            }
          }
        },
        {
          "id": 261,
          "type": {
            "path": [
              "pallet_nomination_pools",
              "CommissionChangeRate"
            ],
            "params": [
              {
                "name": "BlockNumber",
                "type": 4
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "max_increase",
                    "type": 43,
                    "typeName": "Perbill"
                  },
                  {
                    "name": "min_delay",
                    "type": 4,
                    "typeName": "BlockNumber"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 262,
          "type": {
            "path": [
              "Option"
            ],
            "params": [
              {
                "name": "T",
                "type": 263
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "None",
                    "index": 0
                  },
                  {
                    "name": "Some",
                    "fields": [
                      {
                        "type": 263
                      }
                    ],
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 263,
          "type": {
            "path": [
              "pallet_nomination_pools",
              "CommissionClaimPermission"
            ],
            "params": [
              {
                "name": "AccountId",
                "type": 0
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Permissionless",
                    "index": 0
                  },
                  {
                    "name": "Account",
                    "fields": [
                      {
                        "type": 0,
                        "typeName": "AccountId"
                      }
                    ],
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 264,
          "type": {
            "path": [
              "pallet_fast_unstake",
              "pallet",
              "Call"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "register_fast_unstake",
                    "index": 0,
                    "docs": [
                      "Register oneself for fast-unstake.",
                      "",
                      "## Dispatch Origin",
                      "",
                      "The dispatch origin of this call must be *signed* by whoever is permitted to call",
                      "unbond funds by the staking system. See [`Config::Staking`].",
                      "",
                      "## Details",
                      "",
                      "The stash associated with the origin must have no ongoing unlocking chunks. If",
                      "successful, this will fully unbond and chill the stash. Then, it will enqueue the stash",
                      "to be checked in further blocks.",
                      "",
                      "If by the time this is called, the stash is actually eligible for fast-unstake, then",
                      "they are guaranteed to remain eligible, because the call will chill them as well.",
                      "",
                      "If the check works, the entire staking data is removed, i.e. the stash is fully",
                      "unstaked.",
                      "",
                      "If the check fails, the stash remains chilled and waiting for being unbonded as in with",
                      "the normal staking system, but they lose part of their unbonding chunks due to consuming",
                      "the chain's resources.",
                      "",
                      "## Events",
                      "",
                      "Some events from the staking and currency system might be emitted."
                    ]
                  },
                  {
                    "name": "deregister",
                    "index": 1,
                    "docs": [
                      "Deregister oneself from the fast-unstake.",
                      "",
                      "## Dispatch Origin",
                      "",
                      "The dispatch origin of this call must be *signed* by whoever is permitted to call",
                      "unbond funds by the staking system. See [`Config::Staking`].",
                      "",
                      "## Details",
                      "",
                      "This is useful if one is registered, they are still waiting, and they change their mind.",
                      "",
                      "Note that the associated stash is still fully unbonded and chilled as a consequence of",
                      "calling [`Pallet::register_fast_unstake`]. Therefore, this should probably be followed",
                      "by a call to `rebond` in the staking system.",
                      "",
                      "## Events",
                      "",
                      "Some events from the staking and currency system might be emitted."
                    ]
                  },
                  {
                    "name": "control",
                    "fields": [
                      {
                        "name": "eras_to_check",
                        "type": 4,
                        "typeName": "EraIndex"
                      }
                    ],
                    "index": 2,
                    "docs": [
                      "Control the operation of this pallet.",
                      "",
                      "## Dispatch Origin",
                      "",
                      "The dispatch origin of this call must be [`Config::ControlOrigin`].",
                      "",
                      "## Details",
                      "",
                      "Can set the number of eras to check per block, and potentially other admin work.",
                      "",
                      "## Events",
                      "",
                      "No events are emitted from this dispatch."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Contains a variant per dispatchable extrinsic that this pallet has."
            ]
          }
        },
        {
          "id": 265,
          "type": {
            "path": [
              "polkadot_runtime_parachains",
              "configuration",
              "pallet",
              "Call"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "set_validation_upgrade_cooldown",
                    "fields": [
                      {
                        "name": "new",
                        "type": 4,
                        "typeName": "BlockNumberFor<T>"
                      }
                    ],
                    "index": 0,
                    "docs": [
                      "Set the validation upgrade cooldown."
                    ]
                  },
                  {
                    "name": "set_validation_upgrade_delay",
                    "fields": [
                      {
                        "name": "new",
                        "type": 4,
                        "typeName": "BlockNumberFor<T>"
                      }
                    ],
                    "index": 1,
                    "docs": [
                      "Set the validation upgrade delay."
                    ]
                  },
                  {
                    "name": "set_code_retention_period",
                    "fields": [
                      {
                        "name": "new",
                        "type": 4,
                        "typeName": "BlockNumberFor<T>"
                      }
                    ],
                    "index": 2,
                    "docs": [
                      "Set the acceptance period for an included candidate."
                    ]
                  },
                  {
                    "name": "set_max_code_size",
                    "fields": [
                      {
                        "name": "new",
                        "type": 4,
                        "typeName": "u32"
                      }
                    ],
                    "index": 3,
                    "docs": [
                      "Set the max validation code size for incoming upgrades."
                    ]
                  },
                  {
                    "name": "set_max_pov_size",
                    "fields": [
                      {
                        "name": "new",
                        "type": 4,
                        "typeName": "u32"
                      }
                    ],
                    "index": 4,
                    "docs": [
                      "Set the max POV block size for incoming upgrades."
                    ]
                  },
                  {
                    "name": "set_max_head_data_size",
                    "fields": [
                      {
                        "name": "new",
                        "type": 4,
                        "typeName": "u32"
                      }
                    ],
                    "index": 5,
                    "docs": [
                      "Set the max head data size for paras."
                    ]
                  },
                  {
                    "name": "set_coretime_cores",
                    "fields": [
                      {
                        "name": "new",
                        "type": 4,
                        "typeName": "u32"
                      }
                    ],
                    "index": 6,
                    "docs": [
                      "Set the number of coretime execution cores.",
                      "",
                      "NOTE: that this configuration is managed by the coretime chain. Only manually change",
                      "this, if you really know what you are doing!"
                    ]
                  },
                  {
                    "name": "set_max_availability_timeouts",
                    "fields": [
                      {
                        "name": "new",
                        "type": 4,
                        "typeName": "u32"
                      }
                    ],
                    "index": 7,
                    "docs": [
                      "Set the max number of times a claim may timeout on a core before it is abandoned"
                    ]
                  },
                  {
                    "name": "set_group_rotation_frequency",
                    "fields": [
                      {
                        "name": "new",
                        "type": 4,
                        "typeName": "BlockNumberFor<T>"
                      }
                    ],
                    "index": 8,
                    "docs": [
                      "Set the parachain validator-group rotation frequency"
                    ]
                  },
                  {
                    "name": "set_paras_availability_period",
                    "fields": [
                      {
                        "name": "new",
                        "type": 4,
                        "typeName": "BlockNumberFor<T>"
                      }
                    ],
                    "index": 9,
                    "docs": [
                      "Set the availability period for paras."
                    ]
                  },
                  {
                    "name": "set_scheduling_lookahead",
                    "fields": [
                      {
                        "name": "new",
                        "type": 4,
                        "typeName": "u32"
                      }
                    ],
                    "index": 11,
                    "docs": [
                      "Set the scheduling lookahead, in expected number of blocks at peak throughput."
                    ]
                  },
                  {
                    "name": "set_max_validators_per_core",
                    "fields": [
                      {
                        "name": "new",
                        "type": 154,
                        "typeName": "Option<u32>"
                      }
                    ],
                    "index": 12,
                    "docs": [
                      "Set the maximum number of validators to assign to any core."
                    ]
                  },
                  {
                    "name": "set_max_validators",
                    "fields": [
                      {
                        "name": "new",
                        "type": 154,
                        "typeName": "Option<u32>"
                      }
                    ],
                    "index": 13,
                    "docs": [
                      "Set the maximum number of validators to use in parachain consensus."
                    ]
                  },
                  {
                    "name": "set_dispute_period",
                    "fields": [
                      {
                        "name": "new",
                        "type": 4,
                        "typeName": "SessionIndex"
                      }
                    ],
                    "index": 14,
                    "docs": [
                      "Set the dispute period, in number of sessions to keep for disputes."
                    ]
                  },
                  {
                    "name": "set_dispute_post_conclusion_acceptance_period",
                    "fields": [
                      {
                        "name": "new",
                        "type": 4,
                        "typeName": "BlockNumberFor<T>"
                      }
                    ],
                    "index": 15,
                    "docs": [
                      "Set the dispute post conclusion acceptance period."
                    ]
                  },
                  {
                    "name": "set_no_show_slots",
                    "fields": [
                      {
                        "name": "new",
                        "type": 4,
                        "typeName": "u32"
                      }
                    ],
                    "index": 18,
                    "docs": [
                      "Set the no show slots, in number of number of consensus slots.",
                      "Must be at least 1."
                    ]
                  },
                  {
                    "name": "set_n_delay_tranches",
                    "fields": [
                      {
                        "name": "new",
                        "type": 4,
                        "typeName": "u32"
                      }
                    ],
                    "index": 19,
                    "docs": [
                      "Set the total number of delay tranches."
                    ]
                  },
                  {
                    "name": "set_zeroth_delay_tranche_width",
                    "fields": [
                      {
                        "name": "new",
                        "type": 4,
                        "typeName": "u32"
                      }
                    ],
                    "index": 20,
                    "docs": [
                      "Set the zeroth delay tranche width."
                    ]
                  },
                  {
                    "name": "set_needed_approvals",
                    "fields": [
                      {
                        "name": "new",
                        "type": 4,
                        "typeName": "u32"
                      }
                    ],
                    "index": 21,
                    "docs": [
                      "Set the number of validators needed to approve a block."
                    ]
                  },
                  {
                    "name": "set_relay_vrf_modulo_samples",
                    "fields": [
                      {
                        "name": "new",
                        "type": 4,
                        "typeName": "u32"
                      }
                    ],
                    "index": 22,
                    "docs": [
                      "Set the number of samples to do of the `RelayVRFModulo` approval assignment criterion."
                    ]
                  },
                  {
                    "name": "set_max_upward_queue_count",
                    "fields": [
                      {
                        "name": "new",
                        "type": 4,
                        "typeName": "u32"
                      }
                    ],
                    "index": 23,
                    "docs": [
                      "Sets the maximum items that can present in a upward dispatch queue at once."
                    ]
                  },
                  {
                    "name": "set_max_upward_queue_size",
                    "fields": [
                      {
                        "name": "new",
                        "type": 4,
                        "typeName": "u32"
                      }
                    ],
                    "index": 24,
                    "docs": [
                      "Sets the maximum total size of items that can present in a upward dispatch queue at",
                      "once."
                    ]
                  },
                  {
                    "name": "set_max_downward_message_size",
                    "fields": [
                      {
                        "name": "new",
                        "type": 4,
                        "typeName": "u32"
                      }
                    ],
                    "index": 25,
                    "docs": [
                      "Set the critical downward message size."
                    ]
                  },
                  {
                    "name": "set_max_upward_message_size",
                    "fields": [
                      {
                        "name": "new",
                        "type": 4,
                        "typeName": "u32"
                      }
                    ],
                    "index": 27,
                    "docs": [
                      "Sets the maximum size of an upward message that can be sent by a candidate."
                    ]
                  },
                  {
                    "name": "set_max_upward_message_num_per_candidate",
                    "fields": [
                      {
                        "name": "new",
                        "type": 4,
                        "typeName": "u32"
                      }
                    ],
                    "index": 28,
                    "docs": [
                      "Sets the maximum number of messages that a candidate can contain."
                    ]
                  },
                  {
                    "name": "set_hrmp_open_request_ttl",
                    "fields": [
                      {
                        "name": "new",
                        "type": 4,
                        "typeName": "u32"
                      }
                    ],
                    "index": 29,
                    "docs": [
                      "Sets the number of sessions after which an HRMP open channel request expires."
                    ]
                  },
                  {
                    "name": "set_hrmp_sender_deposit",
                    "fields": [
                      {
                        "name": "new",
                        "type": 6,
                        "typeName": "Balance"
                      }
                    ],
                    "index": 30,
                    "docs": [
                      "Sets the amount of funds that the sender should provide for opening an HRMP channel."
                    ]
                  },
                  {
                    "name": "set_hrmp_recipient_deposit",
                    "fields": [
                      {
                        "name": "new",
                        "type": 6,
                        "typeName": "Balance"
                      }
                    ],
                    "index": 31,
                    "docs": [
                      "Sets the amount of funds that the recipient should provide for accepting opening an HRMP",
                      "channel."
                    ]
                  },
                  {
                    "name": "set_hrmp_channel_max_capacity",
                    "fields": [
                      {
                        "name": "new",
                        "type": 4,
                        "typeName": "u32"
                      }
                    ],
                    "index": 32,
                    "docs": [
                      "Sets the maximum number of messages allowed in an HRMP channel at once."
                    ]
                  },
                  {
                    "name": "set_hrmp_channel_max_total_size",
                    "fields": [
                      {
                        "name": "new",
                        "type": 4,
                        "typeName": "u32"
                      }
                    ],
                    "index": 33,
                    "docs": [
                      "Sets the maximum total size of messages in bytes allowed in an HRMP channel at once."
                    ]
                  },
                  {
                    "name": "set_hrmp_max_parachain_inbound_channels",
                    "fields": [
                      {
                        "name": "new",
                        "type": 4,
                        "typeName": "u32"
                      }
                    ],
                    "index": 34,
                    "docs": [
                      "Sets the maximum number of inbound HRMP channels a parachain is allowed to accept."
                    ]
                  },
                  {
                    "name": "set_hrmp_channel_max_message_size",
                    "fields": [
                      {
                        "name": "new",
                        "type": 4,
                        "typeName": "u32"
                      }
                    ],
                    "index": 36,
                    "docs": [
                      "Sets the maximum size of a message that could ever be put into an HRMP channel."
                    ]
                  },
                  {
                    "name": "set_hrmp_max_parachain_outbound_channels",
                    "fields": [
                      {
                        "name": "new",
                        "type": 4,
                        "typeName": "u32"
                      }
                    ],
                    "index": 37,
                    "docs": [
                      "Sets the maximum number of outbound HRMP channels a parachain is allowed to open."
                    ]
                  },
                  {
                    "name": "set_hrmp_max_message_num_per_candidate",
                    "fields": [
                      {
                        "name": "new",
                        "type": 4,
                        "typeName": "u32"
                      }
                    ],
                    "index": 39,
                    "docs": [
                      "Sets the maximum number of outbound HRMP messages can be sent by a candidate."
                    ]
                  },
                  {
                    "name": "set_pvf_voting_ttl",
                    "fields": [
                      {
                        "name": "new",
                        "type": 4,
                        "typeName": "SessionIndex"
                      }
                    ],
                    "index": 42,
                    "docs": [
                      "Set the number of session changes after which a PVF pre-checking voting is rejected."
                    ]
                  },
                  {
                    "name": "set_minimum_validation_upgrade_delay",
                    "fields": [
                      {
                        "name": "new",
                        "type": 4,
                        "typeName": "BlockNumberFor<T>"
                      }
                    ],
                    "index": 43,
                    "docs": [
                      "Sets the minimum delay between announcing the upgrade block for a parachain until the",
                      "upgrade taking place.",
                      "",
                      "See the field documentation for information and constraints for the new value."
                    ]
                  },
                  {
                    "name": "set_bypass_consistency_check",
                    "fields": [
                      {
                        "name": "new",
                        "type": 8,
                        "typeName": "bool"
                      }
                    ],
                    "index": 44,
                    "docs": [
                      "Setting this to true will disable consistency checks for the configuration setters.",
                      "Use with caution."
                    ]
                  },
                  {
                    "name": "set_async_backing_params",
                    "fields": [
                      {
                        "name": "new",
                        "type": 266,
                        "typeName": "AsyncBackingParams"
                      }
                    ],
                    "index": 45,
                    "docs": [
                      "Set the asynchronous backing parameters."
                    ]
                  },
                  {
                    "name": "set_executor_params",
                    "fields": [
                      {
                        "name": "new",
                        "type": 267,
                        "typeName": "ExecutorParams"
                      }
                    ],
                    "index": 46,
                    "docs": [
                      "Set PVF executor parameters."
                    ]
                  },
                  {
                    "name": "set_on_demand_base_fee",
                    "fields": [
                      {
                        "name": "new",
                        "type": 6,
                        "typeName": "Balance"
                      }
                    ],
                    "index": 47,
                    "docs": [
                      "Set the on demand (parathreads) base fee."
                    ]
                  },
                  {
                    "name": "set_on_demand_fee_variability",
                    "fields": [
                      {
                        "name": "new",
                        "type": 43,
                        "typeName": "Perbill"
                      }
                    ],
                    "index": 48,
                    "docs": [
                      "Set the on demand (parathreads) fee variability."
                    ]
                  },
                  {
                    "name": "set_on_demand_queue_max_size",
                    "fields": [
                      {
                        "name": "new",
                        "type": 4,
                        "typeName": "u32"
                      }
                    ],
                    "index": 49,
                    "docs": [
                      "Set the on demand (parathreads) queue max size."
                    ]
                  },
                  {
                    "name": "set_on_demand_target_queue_utilization",
                    "fields": [
                      {
                        "name": "new",
                        "type": 43,
                        "typeName": "Perbill"
                      }
                    ],
                    "index": 50,
                    "docs": [
                      "Set the on demand (parathreads) fee variability."
                    ]
                  },
                  {
                    "name": "set_on_demand_ttl",
                    "fields": [
                      {
                        "name": "new",
                        "type": 4,
                        "typeName": "BlockNumberFor<T>"
                      }
                    ],
                    "index": 51,
                    "docs": [
                      "Set the on demand (parathreads) ttl in the claimqueue."
                    ]
                  },
                  {
                    "name": "set_minimum_backing_votes",
                    "fields": [
                      {
                        "name": "new",
                        "type": 4,
                        "typeName": "u32"
                      }
                    ],
                    "index": 52,
                    "docs": [
                      "Set the minimum backing votes threshold."
                    ]
                  },
                  {
                    "name": "set_node_feature",
                    "fields": [
                      {
                        "name": "index",
                        "type": 2,
                        "typeName": "u8"
                      },
                      {
                        "name": "value",
                        "type": 8,
                        "typeName": "bool"
                      }
                    ],
                    "index": 53,
                    "docs": [
                      "Set/Unset a node feature."
                    ]
                  },
                  {
                    "name": "set_approval_voting_params",
                    "fields": [
                      {
                        "name": "new",
                        "type": 272,
                        "typeName": "ApprovalVotingParams"
                      }
                    ],
                    "index": 54,
                    "docs": [
                      "Set approval-voting-params."
                    ]
                  },
                  {
                    "name": "set_scheduler_params",
                    "fields": [
                      {
                        "name": "new",
                        "type": 273,
                        "typeName": "SchedulerParams<BlockNumberFor<T>>"
                      }
                    ],
                    "index": 55,
                    "docs": [
                      "Set scheduler-params."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Contains a variant per dispatchable extrinsic that this pallet has."
            ]
          }
        },
        {
          "id": 266,
          "type": {
            "path": [
              "polkadot_primitives",
              "v8",
              "async_backing",
              "AsyncBackingParams"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "max_candidate_depth",
                    "type": 4,
                    "typeName": "u32"
                  },
                  {
                    "name": "allowed_ancestry_len",
                    "type": 4,
                    "typeName": "u32"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 267,
          "type": {
            "path": [
              "polkadot_primitives",
              "v8",
              "executor_params",
              "ExecutorParams"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 268,
                    "typeName": "Vec<ExecutorParam>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 268,
          "type": {
            "def": {
              "sequence": {
                "type": 269
              }
            }
          }
        },
        {
          "id": 269,
          "type": {
            "path": [
              "polkadot_primitives",
              "v8",
              "executor_params",
              "ExecutorParam"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "MaxMemoryPages",
                    "fields": [
                      {
                        "type": 4,
                        "typeName": "u32"
                      }
                    ],
                    "index": 1
                  },
                  {
                    "name": "StackLogicalMax",
                    "fields": [
                      {
                        "type": 4,
                        "typeName": "u32"
                      }
                    ],
                    "index": 2
                  },
                  {
                    "name": "StackNativeMax",
                    "fields": [
                      {
                        "type": 4,
                        "typeName": "u32"
                      }
                    ],
                    "index": 3
                  },
                  {
                    "name": "PrecheckingMaxMemory",
                    "fields": [
                      {
                        "type": 12,
                        "typeName": "u64"
                      }
                    ],
                    "index": 4
                  },
                  {
                    "name": "PvfPrepTimeout",
                    "fields": [
                      {
                        "type": 270,
                        "typeName": "PvfPrepKind"
                      },
                      {
                        "type": 12,
                        "typeName": "u64"
                      }
                    ],
                    "index": 5
                  },
                  {
                    "name": "PvfExecTimeout",
                    "fields": [
                      {
                        "type": 271,
                        "typeName": "PvfExecKind"
                      },
                      {
                        "type": 12,
                        "typeName": "u64"
                      }
                    ],
                    "index": 6
                  },
                  {
                    "name": "WasmExtBulkMemory",
                    "index": 7
                  }
                ]
              }
            }
          }
        },
        {
          "id": 270,
          "type": {
            "path": [
              "polkadot_primitives",
              "v8",
              "PvfPrepKind"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Precheck",
                    "index": 0
                  },
                  {
                    "name": "Prepare",
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 271,
          "type": {
            "path": [
              "polkadot_primitives",
              "v8",
              "PvfExecKind"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Backing",
                    "index": 0
                  },
                  {
                    "name": "Approval",
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 272,
          "type": {
            "path": [
              "polkadot_primitives",
              "v8",
              "ApprovalVotingParams"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "max_approval_coalesce_count",
                    "type": 4,
                    "typeName": "u32"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 273,
          "type": {
            "path": [
              "polkadot_primitives",
              "v8",
              "SchedulerParams"
            ],
            "params": [
              {
                "name": "BlockNumber",
                "type": 4
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "group_rotation_frequency",
                    "type": 4,
                    "typeName": "BlockNumber"
                  },
                  {
                    "name": "paras_availability_period",
                    "type": 4,
                    "typeName": "BlockNumber"
                  },
                  {
                    "name": "max_validators_per_core",
                    "type": 154,
                    "typeName": "Option<u32>"
                  },
                  {
                    "name": "lookahead",
                    "type": 4,
                    "typeName": "u32"
                  },
                  {
                    "name": "num_cores",
                    "type": 4,
                    "typeName": "u32"
                  },
                  {
                    "name": "max_availability_timeouts",
                    "type": 4,
                    "typeName": "u32"
                  },
                  {
                    "name": "on_demand_queue_max_size",
                    "type": 4,
                    "typeName": "u32"
                  },
                  {
                    "name": "on_demand_target_queue_utilization",
                    "type": 43,
                    "typeName": "Perbill"
                  },
                  {
                    "name": "on_demand_fee_variability",
                    "type": 43,
                    "typeName": "Perbill"
                  },
                  {
                    "name": "on_demand_base_fee",
                    "type": 6,
                    "typeName": "Balance"
                  },
                  {
                    "name": "ttl",
                    "type": 4,
                    "typeName": "BlockNumber"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 274,
          "type": {
            "path": [
              "polkadot_runtime_parachains",
              "shared",
              "pallet",
              "Call"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {}
            },
            "docs": [
              "Contains a variant per dispatchable extrinsic that this pallet has."
            ]
          }
        },
        {
          "id": 275,
          "type": {
            "path": [
              "polkadot_runtime_parachains",
              "inclusion",
              "pallet",
              "Call"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {}
            },
            "docs": [
              "Contains a variant per dispatchable extrinsic that this pallet has."
            ]
          }
        },
        {
          "id": 276,
          "type": {
            "path": [
              "polkadot_runtime_parachains",
              "paras_inherent",
              "pallet",
              "Call"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "enter",
                    "fields": [
                      {
                        "name": "data",
                        "type": 277,
                        "typeName": "ParachainsInherentData<HeaderFor<T>>"
                      }
                    ],
                    "index": 0,
                    "docs": [
                      "Enter the paras inherent. This will process bitfields and backed candidates."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Contains a variant per dispatchable extrinsic that this pallet has."
            ]
          }
        },
        {
          "id": 277,
          "type": {
            "path": [
              "polkadot_primitives",
              "v8",
              "InherentData"
            ],
            "params": [
              {
                "name": "HDR",
                "type": 106
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "bitfields",
                    "type": 278,
                    "typeName": "UncheckedSignedAvailabilityBitfields"
                  },
                  {
                    "name": "backed_candidates",
                    "type": 285,
                    "typeName": "Vec<BackedCandidate<HDR::Hash>>"
                  },
                  {
                    "name": "disputes",
                    "type": 302,
                    "typeName": "MultiDisputeStatementSet"
                  },
                  {
                    "name": "parent_header",
                    "type": 106,
                    "typeName": "HDR"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 278,
          "type": {
            "def": {
              "sequence": {
                "type": 279
              }
            }
          }
        },
        {
          "id": 279,
          "type": {
            "path": [
              "polkadot_primitives",
              "v8",
              "signed",
              "UncheckedSigned"
            ],
            "params": [
              {
                "name": "Payload",
                "type": 280
              },
              {
                "name": "RealPayload",
                "type": 280
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "payload",
                    "type": 280,
                    "typeName": "Payload"
                  },
                  {
                    "name": "validator_index",
                    "type": 283,
                    "typeName": "ValidatorIndex"
                  },
                  {
                    "name": "signature",
                    "type": 284,
                    "typeName": "ValidatorSignature"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 280,
          "type": {
            "path": [
              "polkadot_primitives",
              "v8",
              "AvailabilityBitfield"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 281,
                    "typeName": "BitVec<u8, bitvec::order::Lsb0>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 281,
          "type": {
            "def": {
              "bitsequence": {
                "bit_store_type": 2,
                "bit_order_type": 282
              }
            }
          }
        },
        {
          "id": 282,
          "type": {
            "path": [
              "bitvec",
              "order",
              "Lsb0"
            ],
            "def": {
              "composite": {}
            }
          }
        },
        {
          "id": 283,
          "type": {
            "path": [
              "polkadot_primitives",
              "v8",
              "ValidatorIndex"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 4,
                    "typeName": "u32"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 284,
          "type": {
            "path": [
              "polkadot_primitives",
              "v8",
              "validator_app",
              "Signature"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 148,
                    "typeName": "sr25519::Signature"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 285,
          "type": {
            "def": {
              "sequence": {
                "type": 286
              }
            }
          }
        },
        {
          "id": 286,
          "type": {
            "path": [
              "polkadot_primitives",
              "v8",
              "BackedCandidate"
            ],
            "params": [
              {
                "name": "H",
                "type": 13
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "candidate",
                    "type": 287,
                    "typeName": "CommittedCandidateReceipt<H>"
                  },
                  {
                    "name": "validity_votes",
                    "type": 300,
                    "typeName": "Vec<ValidityAttestation>"
                  },
                  {
                    "name": "validator_indices",
                    "type": 281,
                    "typeName": "BitVec<u8, bitvec::order::Lsb0>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 287,
          "type": {
            "path": [
              "polkadot_primitives",
              "v8",
              "CommittedCandidateReceipt"
            ],
            "params": [
              {
                "name": "H",
                "type": 13
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "descriptor",
                    "type": 288,
                    "typeName": "CandidateDescriptor<H>"
                  },
                  {
                    "name": "commitments",
                    "type": 292,
                    "typeName": "CandidateCommitments"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 288,
          "type": {
            "path": [
              "polkadot_primitives",
              "v8",
              "CandidateDescriptor"
            ],
            "params": [
              {
                "name": "H",
                "type": 13
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "para_id",
                    "type": 163,
                    "typeName": "Id"
                  },
                  {
                    "name": "relay_parent",
                    "type": 13,
                    "typeName": "H"
                  },
                  {
                    "name": "collator",
                    "type": 289,
                    "typeName": "CollatorId"
                  },
                  {
                    "name": "persisted_validation_data_hash",
                    "type": 13,
                    "typeName": "Hash"
                  },
                  {
                    "name": "pov_hash",
                    "type": 13,
                    "typeName": "Hash"
                  },
                  {
                    "name": "erasure_root",
                    "type": 13,
                    "typeName": "Hash"
                  },
                  {
                    "name": "signature",
                    "type": 290,
                    "typeName": "CollatorSignature"
                  },
                  {
                    "name": "para_head",
                    "type": 13,
                    "typeName": "Hash"
                  },
                  {
                    "name": "validation_code_hash",
                    "type": 291,
                    "typeName": "ValidationCodeHash"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 289,
          "type": {
            "path": [
              "polkadot_primitives",
              "v8",
              "collator_app",
              "Public"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 1,
                    "typeName": "sr25519::Public"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 290,
          "type": {
            "path": [
              "polkadot_primitives",
              "v8",
              "collator_app",
              "Signature"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 148,
                    "typeName": "sr25519::Signature"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 291,
          "type": {
            "path": [
              "polkadot_parachain_primitives",
              "primitives",
              "ValidationCodeHash"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 13,
                    "typeName": "Hash"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 292,
          "type": {
            "path": [
              "polkadot_primitives",
              "v8",
              "CandidateCommitments"
            ],
            "params": [
              {
                "name": "N",
                "type": 4
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "upward_messages",
                    "type": 293,
                    "typeName": "UpwardMessages"
                  },
                  {
                    "name": "horizontal_messages",
                    "type": 294,
                    "typeName": "HorizontalMessages"
                  },
                  {
                    "name": "new_validation_code",
                    "type": 297,
                    "typeName": "Option<ValidationCode>"
                  },
                  {
                    "name": "head_data",
                    "type": 299,
                    "typeName": "HeadData"
                  },
                  {
                    "name": "processed_downward_messages",
                    "type": 4,
                    "typeName": "u32"
                  },
                  {
                    "name": "hrmp_watermark",
                    "type": 4,
                    "typeName": "N"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 293,
          "type": {
            "path": [
              "bounded_collections",
              "bounded_vec",
              "BoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 14
              },
              {
                "name": "S",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 99,
                    "typeName": "Vec<T>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 294,
          "type": {
            "path": [
              "bounded_collections",
              "bounded_vec",
              "BoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 295
              },
              {
                "name": "S",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 296,
                    "typeName": "Vec<T>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 295,
          "type": {
            "path": [
              "polkadot_core_primitives",
              "OutboundHrmpMessage"
            ],
            "params": [
              {
                "name": "Id",
                "type": 163
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "recipient",
                    "type": 163,
                    "typeName": "Id"
                  },
                  {
                    "name": "data",
                    "type": 14,
                    "typeName": "alloc::vec::Vec<u8>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 296,
          "type": {
            "def": {
              "sequence": {
                "type": 295
              }
            }
          }
        },
        {
          "id": 297,
          "type": {
            "path": [
              "Option"
            ],
            "params": [
              {
                "name": "T",
                "type": 298
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "None",
                    "index": 0
                  },
                  {
                    "name": "Some",
                    "fields": [
                      {
                        "type": 298
                      }
                    ],
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 298,
          "type": {
            "path": [
              "polkadot_parachain_primitives",
              "primitives",
              "ValidationCode"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 14,
                    "typeName": "Vec<u8>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 299,
          "type": {
            "path": [
              "polkadot_parachain_primitives",
              "primitives",
              "HeadData"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 14,
                    "typeName": "Vec<u8>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 300,
          "type": {
            "def": {
              "sequence": {
                "type": 301
              }
            }
          }
        },
        {
          "id": 301,
          "type": {
            "path": [
              "polkadot_primitives",
              "v8",
              "ValidityAttestation"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Implicit",
                    "fields": [
                      {
                        "type": 284,
                        "typeName": "ValidatorSignature"
                      }
                    ],
                    "index": 1
                  },
                  {
                    "name": "Explicit",
                    "fields": [
                      {
                        "type": 284,
                        "typeName": "ValidatorSignature"
                      }
                    ],
                    "index": 2
                  }
                ]
              }
            }
          }
        },
        {
          "id": 302,
          "type": {
            "def": {
              "sequence": {
                "type": 303
              }
            }
          }
        },
        {
          "id": 303,
          "type": {
            "path": [
              "polkadot_primitives",
              "v8",
              "DisputeStatementSet"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "candidate_hash",
                    "type": 304,
                    "typeName": "CandidateHash"
                  },
                  {
                    "name": "session",
                    "type": 4,
                    "typeName": "SessionIndex"
                  },
                  {
                    "name": "statements",
                    "type": 305,
                    "typeName": "Vec<(DisputeStatement, ValidatorIndex, ValidatorSignature)>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 304,
          "type": {
            "path": [
              "polkadot_core_primitives",
              "CandidateHash"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 13,
                    "typeName": "Hash"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 305,
          "type": {
            "def": {
              "sequence": {
                "type": 306
              }
            }
          }
        },
        {
          "id": 306,
          "type": {
            "def": {
              "tuple": [
                307,
                283,
                284
              ]
            }
          }
        },
        {
          "id": 307,
          "type": {
            "path": [
              "polkadot_primitives",
              "v8",
              "DisputeStatement"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Valid",
                    "fields": [
                      {
                        "type": 308,
                        "typeName": "ValidDisputeStatementKind"
                      }
                    ],
                    "index": 0
                  },
                  {
                    "name": "Invalid",
                    "fields": [
                      {
                        "type": 310,
                        "typeName": "InvalidDisputeStatementKind"
                      }
                    ],
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 308,
          "type": {
            "path": [
              "polkadot_primitives",
              "v8",
              "ValidDisputeStatementKind"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Explicit",
                    "index": 0
                  },
                  {
                    "name": "BackingSeconded",
                    "fields": [
                      {
                        "type": 13,
                        "typeName": "Hash"
                      }
                    ],
                    "index": 1
                  },
                  {
                    "name": "BackingValid",
                    "fields": [
                      {
                        "type": 13,
                        "typeName": "Hash"
                      }
                    ],
                    "index": 2
                  },
                  {
                    "name": "ApprovalChecking",
                    "index": 3
                  },
                  {
                    "name": "ApprovalCheckingMultipleCandidates",
                    "fields": [
                      {
                        "type": 309,
                        "typeName": "Vec<CandidateHash>"
                      }
                    ],
                    "index": 4
                  }
                ]
              }
            }
          }
        },
        {
          "id": 309,
          "type": {
            "def": {
              "sequence": {
                "type": 304
              }
            }
          }
        },
        {
          "id": 310,
          "type": {
            "path": [
              "polkadot_primitives",
              "v8",
              "InvalidDisputeStatementKind"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Explicit",
                    "index": 0
                  }
                ]
              }
            }
          }
        },
        {
          "id": 311,
          "type": {
            "path": [
              "polkadot_runtime_parachains",
              "paras",
              "pallet",
              "Call"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "force_set_current_code",
                    "fields": [
                      {
                        "name": "para",
                        "type": 163,
                        "typeName": "ParaId"
                      },
                      {
                        "name": "new_code",
                        "type": 298,
                        "typeName": "ValidationCode"
                      }
                    ],
                    "index": 0,
                    "docs": [
                      "Set the storage for the parachain validation code immediately."
                    ]
                  },
                  {
                    "name": "force_set_current_head",
                    "fields": [
                      {
                        "name": "para",
                        "type": 163,
                        "typeName": "ParaId"
                      },
                      {
                        "name": "new_head",
                        "type": 299,
                        "typeName": "HeadData"
                      }
                    ],
                    "index": 1,
                    "docs": [
                      "Set the storage for the current parachain head data immediately."
                    ]
                  },
                  {
                    "name": "force_schedule_code_upgrade",
                    "fields": [
                      {
                        "name": "para",
                        "type": 163,
                        "typeName": "ParaId"
                      },
                      {
                        "name": "new_code",
                        "type": 298,
                        "typeName": "ValidationCode"
                      },
                      {
                        "name": "relay_parent_number",
                        "type": 4,
                        "typeName": "BlockNumberFor<T>"
                      }
                    ],
                    "index": 2,
                    "docs": [
                      "Schedule an upgrade as if it was scheduled in the given relay parent block."
                    ]
                  },
                  {
                    "name": "force_note_new_head",
                    "fields": [
                      {
                        "name": "para",
                        "type": 163,
                        "typeName": "ParaId"
                      },
                      {
                        "name": "new_head",
                        "type": 299,
                        "typeName": "HeadData"
                      }
                    ],
                    "index": 3,
                    "docs": [
                      "Note a new block head for para within the context of the current block."
                    ]
                  },
                  {
                    "name": "force_queue_action",
                    "fields": [
                      {
                        "name": "para",
                        "type": 163,
                        "typeName": "ParaId"
                      }
                    ],
                    "index": 4,
                    "docs": [
                      "Put a parachain directly into the next session's action queue.",
                      "We can't queue it any sooner than this without going into the",
                      "initializer..."
                    ]
                  },
                  {
                    "name": "add_trusted_validation_code",
                    "fields": [
                      {
                        "name": "validation_code",
                        "type": 298,
                        "typeName": "ValidationCode"
                      }
                    ],
                    "index": 5,
                    "docs": [
                      "Adds the validation code to the storage.",
                      "",
                      "The code will not be added if it is already present. Additionally, if PVF pre-checking",
                      "is running for that code, it will be instantly accepted.",
                      "",
                      "Otherwise, the code will be added into the storage. Note that the code will be added",
                      "into storage with reference count 0. This is to account the fact that there are no users",
                      "for this code yet. The caller will have to make sure that this code eventually gets",
                      "used by some parachain or removed from the storage to avoid storage leaks. For the",
                      "latter prefer to use the `poke_unused_validation_code` dispatchable to raw storage",
                      "manipulation.",
                      "",
                      "This function is mainly meant to be used for upgrading parachains that do not follow",
                      "the go-ahead signal while the PVF pre-checking feature is enabled."
                    ]
                  },
                  {
                    "name": "poke_unused_validation_code",
                    "fields": [
                      {
                        "name": "validation_code_hash",
                        "type": 291,
                        "typeName": "ValidationCodeHash"
                      }
                    ],
                    "index": 6,
                    "docs": [
                      "Remove the validation code from the storage iff the reference count is 0.",
                      "",
                      "This is better than removing the storage directly, because it will not remove the code",
                      "that was suddenly got used by some parachain while this dispatchable was pending",
                      "dispatching."
                    ]
                  },
                  {
                    "name": "include_pvf_check_statement",
                    "fields": [
                      {
                        "name": "stmt",
                        "type": 312,
                        "typeName": "PvfCheckStatement"
                      },
                      {
                        "name": "signature",
                        "type": 284,
                        "typeName": "ValidatorSignature"
                      }
                    ],
                    "index": 7,
                    "docs": [
                      "Includes a statement for a PVF pre-checking vote. Potentially, finalizes the vote and",
                      "enacts the results if that was the last vote before achieving the supermajority."
                    ]
                  },
                  {
                    "name": "force_set_most_recent_context",
                    "fields": [
                      {
                        "name": "para",
                        "type": 163,
                        "typeName": "ParaId"
                      },
                      {
                        "name": "context",
                        "type": 4,
                        "typeName": "BlockNumberFor<T>"
                      }
                    ],
                    "index": 8,
                    "docs": [
                      "Set the storage for the current parachain head data immediately."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Contains a variant per dispatchable extrinsic that this pallet has."
            ]
          }
        },
        {
          "id": 312,
          "type": {
            "path": [
              "polkadot_primitives",
              "v8",
              "PvfCheckStatement"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "accept",
                    "type": 8,
                    "typeName": "bool"
                  },
                  {
                    "name": "subject",
                    "type": 291,
                    "typeName": "ValidationCodeHash"
                  },
                  {
                    "name": "session_index",
                    "type": 4,
                    "typeName": "SessionIndex"
                  },
                  {
                    "name": "validator_index",
                    "type": 283,
                    "typeName": "ValidatorIndex"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 313,
          "type": {
            "path": [
              "polkadot_runtime_parachains",
              "initializer",
              "pallet",
              "Call"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "force_approve",
                    "fields": [
                      {
                        "name": "up_to",
                        "type": 4,
                        "typeName": "BlockNumber"
                      }
                    ],
                    "index": 0,
                    "docs": [
                      "Issue a signal to the consensus engine to forcibly act as though all parachain",
                      "blocks in all relay chain blocks up to and including the given number in the current",
                      "chain are valid and should be finalized."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Contains a variant per dispatchable extrinsic that this pallet has."
            ]
          }
        },
        {
          "id": 314,
          "type": {
            "path": [
              "polkadot_runtime_parachains",
              "hrmp",
              "pallet",
              "Call"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "hrmp_init_open_channel",
                    "fields": [
                      {
                        "name": "recipient",
                        "type": 163,
                        "typeName": "ParaId"
                      },
                      {
                        "name": "proposed_max_capacity",
                        "type": 4,
                        "typeName": "u32"
                      },
                      {
                        "name": "proposed_max_message_size",
                        "type": 4,
                        "typeName": "u32"
                      }
                    ],
                    "index": 0,
                    "docs": [
                      "Initiate opening a channel from a parachain to a given recipient with given channel",
                      "parameters.",
                      "",
                      "- `proposed_max_capacity` - specifies how many messages can be in the channel at once.",
                      "- `proposed_max_message_size` - specifies the maximum size of the messages.",
                      "",
                      "These numbers are a subject to the relay-chain configuration limits.",
                      "",
                      "The channel can be opened only after the recipient confirms it and only on a session",
                      "change."
                    ]
                  },
                  {
                    "name": "hrmp_accept_open_channel",
                    "fields": [
                      {
                        "name": "sender",
                        "type": 163,
                        "typeName": "ParaId"
                      }
                    ],
                    "index": 1,
                    "docs": [
                      "Accept a pending open channel request from the given sender.",
                      "",
                      "The channel will be opened only on the next session boundary."
                    ]
                  },
                  {
                    "name": "hrmp_close_channel",
                    "fields": [
                      {
                        "name": "channel_id",
                        "type": 315,
                        "typeName": "HrmpChannelId"
                      }
                    ],
                    "index": 2,
                    "docs": [
                      "Initiate unilateral closing of a channel. The origin must be either the sender or the",
                      "recipient in the channel being closed.",
                      "",
                      "The closure can only happen on a session change."
                    ]
                  },
                  {
                    "name": "force_clean_hrmp",
                    "fields": [
                      {
                        "name": "para",
                        "type": 163,
                        "typeName": "ParaId"
                      },
                      {
                        "name": "num_inbound",
                        "type": 4,
                        "typeName": "u32"
                      },
                      {
                        "name": "num_outbound",
                        "type": 4,
                        "typeName": "u32"
                      }
                    ],
                    "index": 3,
                    "docs": [
                      "This extrinsic triggers the cleanup of all the HRMP storage items that a para may have.",
                      "Normally this happens once per session, but this allows you to trigger the cleanup",
                      "immediately for a specific parachain.",
                      "",
                      "Number of inbound and outbound channels for `para` must be provided as witness data.",
                      "",
                      "Origin must be the `ChannelManager`."
                    ]
                  },
                  {
                    "name": "force_process_hrmp_open",
                    "fields": [
                      {
                        "name": "channels",
                        "type": 4,
                        "typeName": "u32"
                      }
                    ],
                    "index": 4,
                    "docs": [
                      "Force process HRMP open channel requests.",
                      "",
                      "If there are pending HRMP open channel requests, you can use this function to process",
                      "all of those requests immediately.",
                      "",
                      "Total number of opening channels must be provided as witness data.",
                      "",
                      "Origin must be the `ChannelManager`."
                    ]
                  },
                  {
                    "name": "force_process_hrmp_close",
                    "fields": [
                      {
                        "name": "channels",
                        "type": 4,
                        "typeName": "u32"
                      }
                    ],
                    "index": 5,
                    "docs": [
                      "Force process HRMP close channel requests.",
                      "",
                      "If there are pending HRMP close channel requests, you can use this function to process",
                      "all of those requests immediately.",
                      "",
                      "Total number of closing channels must be provided as witness data.",
                      "",
                      "Origin must be the `ChannelManager`."
                    ]
                  },
                  {
                    "name": "hrmp_cancel_open_request",
                    "fields": [
                      {
                        "name": "channel_id",
                        "type": 315,
                        "typeName": "HrmpChannelId"
                      },
                      {
                        "name": "open_requests",
                        "type": 4,
                        "typeName": "u32"
                      }
                    ],
                    "index": 6,
                    "docs": [
                      "This cancels a pending open channel request. It can be canceled by either of the sender",
                      "or the recipient for that request. The origin must be either of those.",
                      "",
                      "The cancellation happens immediately. It is not possible to cancel the request if it is",
                      "already accepted.",
                      "",
                      "Total number of open requests (i.e. `HrmpOpenChannelRequestsList`) must be provided as",
                      "witness data."
                    ]
                  },
                  {
                    "name": "force_open_hrmp_channel",
                    "fields": [
                      {
                        "name": "sender",
                        "type": 163,
                        "typeName": "ParaId"
                      },
                      {
                        "name": "recipient",
                        "type": 163,
                        "typeName": "ParaId"
                      },
                      {
                        "name": "max_capacity",
                        "type": 4,
                        "typeName": "u32"
                      },
                      {
                        "name": "max_message_size",
                        "type": 4,
                        "typeName": "u32"
                      }
                    ],
                    "index": 7,
                    "docs": [
                      "Open a channel from a `sender` to a `recipient` `ParaId`. Although opened by governance,",
                      "the `max_capacity` and `max_message_size` are still subject to the Relay Chain's",
                      "configured limits.",
                      "",
                      "Expected use is when one (and only one) of the `ParaId`s involved in the channel is",
                      "governed by the system, e.g. a system parachain.",
                      "",
                      "Origin must be the `ChannelManager`."
                    ]
                  },
                  {
                    "name": "establish_system_channel",
                    "fields": [
                      {
                        "name": "sender",
                        "type": 163,
                        "typeName": "ParaId"
                      },
                      {
                        "name": "recipient",
                        "type": 163,
                        "typeName": "ParaId"
                      }
                    ],
                    "index": 8,
                    "docs": [
                      "Establish an HRMP channel between two system chains. If the channel does not already",
                      "exist, the transaction fees will be refunded to the caller. The system does not take",
                      "deposits for channels between system chains, and automatically sets the message number",
                      "and size limits to the maximum allowed by the network's configuration.",
                      "",
                      "Arguments:",
                      "",
                      "- `sender`: A system chain, `ParaId`.",
                      "- `recipient`: A system chain, `ParaId`.",
                      "",
                      "Any signed origin can call this function, but _both_ inputs MUST be system chains. If",
                      "the channel does not exist yet, there is no fee."
                    ]
                  },
                  {
                    "name": "poke_channel_deposits",
                    "fields": [
                      {
                        "name": "sender",
                        "type": 163,
                        "typeName": "ParaId"
                      },
                      {
                        "name": "recipient",
                        "type": 163,
                        "typeName": "ParaId"
                      }
                    ],
                    "index": 9,
                    "docs": [
                      "Update the deposits held for an HRMP channel to the latest `Configuration`. Channels",
                      "with system chains do not require a deposit.",
                      "",
                      "Arguments:",
                      "",
                      "- `sender`: A chain, `ParaId`.",
                      "- `recipient`: A chain, `ParaId`.",
                      "",
                      "Any signed origin can call this function."
                    ]
                  },
                  {
                    "name": "establish_channel_with_system",
                    "fields": [
                      {
                        "name": "target_system_chain",
                        "type": 163,
                        "typeName": "ParaId"
                      }
                    ],
                    "index": 10,
                    "docs": [
                      "Establish a bidirectional HRMP channel between a parachain and a system chain.",
                      "",
                      "Arguments:",
                      "",
                      "- `target_system_chain`: A system chain, `ParaId`.",
                      "",
                      "The origin needs to be the parachain origin."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Contains a variant per dispatchable extrinsic that this pallet has."
            ]
          }
        },
        {
          "id": 315,
          "type": {
            "path": [
              "polkadot_parachain_primitives",
              "primitives",
              "HrmpChannelId"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "sender",
                    "type": 163,
                    "typeName": "Id"
                  },
                  {
                    "name": "recipient",
                    "type": 163,
                    "typeName": "Id"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 316,
          "type": {
            "path": [
              "polkadot_runtime_parachains",
              "disputes",
              "pallet",
              "Call"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "force_unfreeze",
                    "index": 0
                  }
                ]
              }
            },
            "docs": [
              "Contains a variant per dispatchable extrinsic that this pallet has."
            ]
          }
        },
        {
          "id": 317,
          "type": {
            "path": [
              "polkadot_runtime_parachains",
              "disputes",
              "slashing",
              "pallet",
              "Call"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "report_dispute_lost_unsigned",
                    "fields": [
                      {
                        "name": "dispute_proof",
                        "type": 318,
                        "typeName": "Box<DisputeProof>"
                      },
                      {
                        "name": "key_owner_proof",
                        "type": 109,
                        "typeName": "T::KeyOwnerProof"
                      }
                    ],
                    "index": 0
                  }
                ]
              }
            },
            "docs": [
              "Contains a variant per dispatchable extrinsic that this pallet has."
            ]
          }
        },
        {
          "id": 318,
          "type": {
            "path": [
              "polkadot_primitives",
              "v8",
              "slashing",
              "DisputeProof"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "time_slot",
                    "type": 319,
                    "typeName": "DisputesTimeSlot"
                  },
                  {
                    "name": "kind",
                    "type": 320,
                    "typeName": "SlashingOffenceKind"
                  },
                  {
                    "name": "validator_index",
                    "type": 283,
                    "typeName": "ValidatorIndex"
                  },
                  {
                    "name": "validator_id",
                    "type": 137,
                    "typeName": "ValidatorId"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 319,
          "type": {
            "path": [
              "polkadot_primitives",
              "v8",
              "slashing",
              "DisputesTimeSlot"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "session_index",
                    "type": 4,
                    "typeName": "SessionIndex"
                  },
                  {
                    "name": "candidate_hash",
                    "type": 304,
                    "typeName": "CandidateHash"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 320,
          "type": {
            "path": [
              "polkadot_primitives",
              "v8",
              "slashing",
              "SlashingOffenceKind"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "ForInvalid",
                    "index": 0
                  },
                  {
                    "name": "AgainstValid",
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 321,
          "type": {
            "path": [
              "polkadot_runtime_parachains",
              "on_demand",
              "pallet",
              "Call"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "place_order_allow_death",
                    "fields": [
                      {
                        "name": "max_amount",
                        "type": 6,
                        "typeName": "BalanceOf<T>"
                      },
                      {
                        "name": "para_id",
                        "type": 163,
                        "typeName": "ParaId"
                      }
                    ],
                    "index": 0,
                    "docs": [
                      "Create a single on demand core order.",
                      "Will use the spot price for the current block and will reap the account if needed.",
                      "",
                      "Parameters:",
                      "- `origin`: The sender of the call, funds will be withdrawn from this account.",
                      "- `max_amount`: The maximum balance to withdraw from the origin to place an order.",
                      "- `para_id`: A `ParaId` the origin wants to provide blockspace for.",
                      "",
                      "Errors:",
                      "- `InsufficientBalance`: from the Currency implementation",
                      "- `QueueFull`",
                      "- `SpotPriceHigherThanMaxAmount`",
                      "",
                      "Events:",
                      "- `OnDemandOrderPlaced`"
                    ]
                  },
                  {
                    "name": "place_order_keep_alive",
                    "fields": [
                      {
                        "name": "max_amount",
                        "type": 6,
                        "typeName": "BalanceOf<T>"
                      },
                      {
                        "name": "para_id",
                        "type": 163,
                        "typeName": "ParaId"
                      }
                    ],
                    "index": 1,
                    "docs": [
                      "Same as the [`place_order_allow_death`](Self::place_order_allow_death) call , but with a",
                      "check that placing the order will not reap the account.",
                      "",
                      "Parameters:",
                      "- `origin`: The sender of the call, funds will be withdrawn from this account.",
                      "- `max_amount`: The maximum balance to withdraw from the origin to place an order.",
                      "- `para_id`: A `ParaId` the origin wants to provide blockspace for.",
                      "",
                      "Errors:",
                      "- `InsufficientBalance`: from the Currency implementation",
                      "- `QueueFull`",
                      "- `SpotPriceHigherThanMaxAmount`",
                      "",
                      "Events:",
                      "- `OnDemandOrderPlaced`"
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Contains a variant per dispatchable extrinsic that this pallet has."
            ]
          }
        },
        {
          "id": 322,
          "type": {
            "path": [
              "polkadot_runtime_common",
              "paras_registrar",
              "pallet",
              "Call"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "register",
                    "fields": [
                      {
                        "name": "id",
                        "type": 163,
                        "typeName": "ParaId"
                      },
                      {
                        "name": "genesis_head",
                        "type": 299,
                        "typeName": "HeadData"
                      },
                      {
                        "name": "validation_code",
                        "type": 298,
                        "typeName": "ValidationCode"
                      }
                    ],
                    "index": 0,
                    "docs": [
                      "Register head data and validation code for a reserved Para Id.",
                      "",
                      "## Arguments",
                      "- `origin`: Must be called by a `Signed` origin.",
                      "- `id`: The para ID. Must be owned/managed by the `origin` signing account.",
                      "- `genesis_head`: The genesis head data of the parachain/thread.",
                      "- `validation_code`: The initial validation code of the parachain/thread.",
                      "",
                      "## Deposits/Fees",
                      "The account with the originating signature must reserve a deposit.",
                      "",
                      "The deposit is required to cover the costs associated with storing the genesis head",
                      "data and the validation code.",
                      "This accounts for the potential to store validation code of a size up to the",
                      "`max_code_size`, as defined in the configuration pallet",
                      "",
                      "Anything already reserved previously for this para ID is accounted for.",
                      "",
                      "## Events",
                      "The `Registered` event is emitted in case of success."
                    ]
                  },
                  {
                    "name": "force_register",
                    "fields": [
                      {
                        "name": "who",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "deposit",
                        "type": 6,
                        "typeName": "BalanceOf<T>"
                      },
                      {
                        "name": "id",
                        "type": 163,
                        "typeName": "ParaId"
                      },
                      {
                        "name": "genesis_head",
                        "type": 299,
                        "typeName": "HeadData"
                      },
                      {
                        "name": "validation_code",
                        "type": 298,
                        "typeName": "ValidationCode"
                      }
                    ],
                    "index": 1,
                    "docs": [
                      "Force the registration of a Para Id on the relay chain.",
                      "",
                      "This function must be called by a Root origin.",
                      "",
                      "The deposit taken can be specified for this registration. Any `ParaId`",
                      "can be registered, including sub-1000 IDs which are System Parachains."
                    ]
                  },
                  {
                    "name": "deregister",
                    "fields": [
                      {
                        "name": "id",
                        "type": 163,
                        "typeName": "ParaId"
                      }
                    ],
                    "index": 2,
                    "docs": [
                      "Deregister a Para Id, freeing all data and returning any deposit.",
                      "",
                      "The caller must be Root, the `para` owner, or the `para` itself. The para must be an",
                      "on-demand parachain."
                    ]
                  },
                  {
                    "name": "swap",
                    "fields": [
                      {
                        "name": "id",
                        "type": 163,
                        "typeName": "ParaId"
                      },
                      {
                        "name": "other",
                        "type": 163,
                        "typeName": "ParaId"
                      }
                    ],
                    "index": 3,
                    "docs": [
                      "Swap a lease holding parachain with another parachain, either on-demand or lease",
                      "holding.",
                      "",
                      "The origin must be Root, the `para` owner, or the `para` itself.",
                      "",
                      "The swap will happen only if there is already an opposite swap pending. If there is not,",
                      "the swap will be stored in the pending swaps map, ready for a later confirmatory swap.",
                      "",
                      "The `ParaId`s remain mapped to the same head data and code so external code can rely on",
                      "`ParaId` to be a long-term identifier of a notional \"parachain\". However, their",
                      "scheduling info (i.e. whether they're an on-demand parachain or lease holding",
                      "parachain), auction information and the auction deposit are switched."
                    ]
                  },
                  {
                    "name": "remove_lock",
                    "fields": [
                      {
                        "name": "para",
                        "type": 163,
                        "typeName": "ParaId"
                      }
                    ],
                    "index": 4,
                    "docs": [
                      "Remove a manager lock from a para. This will allow the manager of a",
                      "previously locked para to deregister or swap a para without using governance.",
                      "",
                      "Can only be called by the Root origin or the parachain."
                    ]
                  },
                  {
                    "name": "reserve",
                    "index": 5,
                    "docs": [
                      "Reserve a Para Id on the relay chain.",
                      "",
                      "This function will reserve a new Para Id to be owned/managed by the origin account.",
                      "The origin account is able to register head data and validation code using `register` to",
                      "create an on-demand parachain. Using the Slots pallet, an on-demand parachain can then",
                      "be upgraded to a lease holding parachain.",
                      "",
                      "## Arguments",
                      "- `origin`: Must be called by a `Signed` origin. Becomes the manager/owner of the new",
                      "  para ID.",
                      "",
                      "## Deposits/Fees",
                      "The origin must reserve a deposit of `ParaDeposit` for the registration.",
                      "",
                      "## Events",
                      "The `Reserved` event is emitted in case of success, which provides the ID reserved for",
                      "use."
                    ]
                  },
                  {
                    "name": "add_lock",
                    "fields": [
                      {
                        "name": "para",
                        "type": 163,
                        "typeName": "ParaId"
                      }
                    ],
                    "index": 6,
                    "docs": [
                      "Add a manager lock from a para. This will prevent the manager of a",
                      "para to deregister or swap a para.",
                      "",
                      "Can be called by Root, the parachain, or the parachain manager if the parachain is",
                      "unlocked."
                    ]
                  },
                  {
                    "name": "schedule_code_upgrade",
                    "fields": [
                      {
                        "name": "para",
                        "type": 163,
                        "typeName": "ParaId"
                      },
                      {
                        "name": "new_code",
                        "type": 298,
                        "typeName": "ValidationCode"
                      }
                    ],
                    "index": 7,
                    "docs": [
                      "Schedule a parachain upgrade.",
                      "",
                      "This will kick off a check of `new_code` by all validators. After the majority of the",
                      "validators have reported on the validity of the code, the code will either be enacted",
                      "or the upgrade will be rejected. If the code will be enacted, the current code of the",
                      "parachain will be overwritten directly. This means that any PoV will be checked by this",
                      "new code. The parachain itself will not be informed explicitly that the validation code",
                      "has changed.",
                      "",
                      "Can be called by Root, the parachain, or the parachain manager if the parachain is",
                      "unlocked."
                    ]
                  },
                  {
                    "name": "set_current_head",
                    "fields": [
                      {
                        "name": "para",
                        "type": 163,
                        "typeName": "ParaId"
                      },
                      {
                        "name": "new_head",
                        "type": 299,
                        "typeName": "HeadData"
                      }
                    ],
                    "index": 8,
                    "docs": [
                      "Set the parachain's current head.",
                      "",
                      "Can be called by Root, the parachain, or the parachain manager if the parachain is",
                      "unlocked."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Contains a variant per dispatchable extrinsic that this pallet has."
            ]
          }
        },
        {
          "id": 323,
          "type": {
            "path": [
              "polkadot_runtime_common",
              "slots",
              "pallet",
              "Call"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "force_lease",
                    "fields": [
                      {
                        "name": "para",
                        "type": 163,
                        "typeName": "ParaId"
                      },
                      {
                        "name": "leaser",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "amount",
                        "type": 6,
                        "typeName": "BalanceOf<T>"
                      },
                      {
                        "name": "period_begin",
                        "type": 4,
                        "typeName": "LeasePeriodOf<T>"
                      },
                      {
                        "name": "period_count",
                        "type": 4,
                        "typeName": "LeasePeriodOf<T>"
                      }
                    ],
                    "index": 0,
                    "docs": [
                      "Just a connect into the `lease_out` call, in case Root wants to force some lease to",
                      "happen independently of any other on-chain mechanism to use it.",
                      "",
                      "The dispatch origin for this call must match `T::ForceOrigin`."
                    ]
                  },
                  {
                    "name": "clear_all_leases",
                    "fields": [
                      {
                        "name": "para",
                        "type": 163,
                        "typeName": "ParaId"
                      }
                    ],
                    "index": 1,
                    "docs": [
                      "Clear all leases for a Para Id, refunding any deposits back to the original owners.",
                      "",
                      "The dispatch origin for this call must match `T::ForceOrigin`."
                    ]
                  },
                  {
                    "name": "trigger_onboard",
                    "fields": [
                      {
                        "name": "para",
                        "type": 163,
                        "typeName": "ParaId"
                      }
                    ],
                    "index": 2,
                    "docs": [
                      "Try to onboard a parachain that has a lease for the current lease period.",
                      "",
                      "This function can be useful if there was some state issue with a para that should",
                      "have onboarded, but was unable to. As long as they have a lease period, we can",
                      "let them onboard from here.",
                      "",
                      "Origin must be signed, but can be called by anyone."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Contains a variant per dispatchable extrinsic that this pallet has."
            ]
          }
        },
        {
          "id": 324,
          "type": {
            "path": [
              "polkadot_runtime_common",
              "auctions",
              "pallet",
              "Call"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "new_auction",
                    "fields": [
                      {
                        "name": "duration",
                        "type": 59,
                        "typeName": "BlockNumberFor<T>"
                      },
                      {
                        "name": "lease_period_index",
                        "type": 59,
                        "typeName": "LeasePeriodOf<T>"
                      }
                    ],
                    "index": 0,
                    "docs": [
                      "Create a new auction.",
                      "",
                      "This can only happen when there isn't already an auction in progress and may only be",
                      "called by the root origin. Accepts the `duration` of this auction and the",
                      "`lease_period_index` of the initial lease period of the four that are to be auctioned."
                    ]
                  },
                  {
                    "name": "bid",
                    "fields": [
                      {
                        "name": "para",
                        "type": 325,
                        "typeName": "ParaId"
                      },
                      {
                        "name": "auction_index",
                        "type": 59,
                        "typeName": "AuctionIndex"
                      },
                      {
                        "name": "first_slot",
                        "type": 59,
                        "typeName": "LeasePeriodOf<T>"
                      },
                      {
                        "name": "last_slot",
                        "type": 59,
                        "typeName": "LeasePeriodOf<T>"
                      },
                      {
                        "name": "amount",
                        "type": 63,
                        "typeName": "BalanceOf<T>"
                      }
                    ],
                    "index": 1,
                    "docs": [
                      "Make a new bid from an account (including a parachain account) for deploying a new",
                      "parachain.",
                      "",
                      "Multiple simultaneous bids from the same bidder are allowed only as long as all active",
                      "bids overlap each other (i.e. are mutually exclusive). Bids cannot be redacted.",
                      "",
                      "- `sub` is the sub-bidder ID, allowing for multiple competing bids to be made by (and",
                      "funded by) the same account.",
                      "- `auction_index` is the index of the auction to bid on. Should just be the present",
                      "value of `AuctionCounter`.",
                      "- `first_slot` is the first lease period index of the range to bid on. This is the",
                      "absolute lease period index value, not an auction-specific offset.",
                      "- `last_slot` is the last lease period index of the range to bid on. This is the",
                      "absolute lease period index value, not an auction-specific offset.",
                      "- `amount` is the amount to bid to be held as deposit for the parachain should the",
                      "bid win. This amount is held throughout the range."
                    ]
                  },
                  {
                    "name": "cancel_auction",
                    "index": 2,
                    "docs": [
                      "Cancel an in-progress auction.",
                      "",
                      "Can only be called by Root origin."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Contains a variant per dispatchable extrinsic that this pallet has."
            ]
          }
        },
        {
          "id": 325,
          "type": {
            "def": {
              "compact": {
                "type": 163
              }
            }
          }
        },
        {
          "id": 326,
          "type": {
            "path": [
              "polkadot_runtime_common",
              "crowdloan",
              "pallet",
              "Call"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "create",
                    "fields": [
                      {
                        "name": "index",
                        "type": 325,
                        "typeName": "ParaId"
                      },
                      {
                        "name": "cap",
                        "type": 63,
                        "typeName": "BalanceOf<T>"
                      },
                      {
                        "name": "first_period",
                        "type": 59,
                        "typeName": "LeasePeriodOf<T>"
                      },
                      {
                        "name": "last_period",
                        "type": 59,
                        "typeName": "LeasePeriodOf<T>"
                      },
                      {
                        "name": "end",
                        "type": 59,
                        "typeName": "BlockNumberFor<T>"
                      },
                      {
                        "name": "verifier",
                        "type": 327,
                        "typeName": "Option<MultiSigner>"
                      }
                    ],
                    "index": 0,
                    "docs": [
                      "Create a new crowdloaning campaign for a parachain slot with the given lease period",
                      "range.",
                      "",
                      "This applies a lock to your parachain configuration, ensuring that it cannot be changed",
                      "by the parachain manager."
                    ]
                  },
                  {
                    "name": "contribute",
                    "fields": [
                      {
                        "name": "index",
                        "type": 325,
                        "typeName": "ParaId"
                      },
                      {
                        "name": "value",
                        "type": 63,
                        "typeName": "BalanceOf<T>"
                      },
                      {
                        "name": "signature",
                        "type": 329,
                        "typeName": "Option<MultiSignature>"
                      }
                    ],
                    "index": 1,
                    "docs": [
                      "Contribute to a crowd sale. This will transfer some balance over to fund a parachain",
                      "slot. It will be withdrawable when the crowdloan has ended and the funds are unused."
                    ]
                  },
                  {
                    "name": "withdraw",
                    "fields": [
                      {
                        "name": "who",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "index",
                        "type": 325,
                        "typeName": "ParaId"
                      }
                    ],
                    "index": 2,
                    "docs": [
                      "Withdraw full balance of a specific contributor.",
                      "",
                      "Origin must be signed, but can come from anyone.",
                      "",
                      "The fund must be either in, or ready for, retirement. For a fund to be *in* retirement,",
                      "then the retirement flag must be set. For a fund to be ready for retirement, then:",
                      "- it must not already be in retirement;",
                      "- the amount of raised funds must be bigger than the _free_ balance of the account;",
                      "- and either:",
                      "  - the block number must be at least `end`; or",
                      "  - the current lease period must be greater than the fund's `last_period`.",
                      "",
                      "In this case, the fund's retirement flag is set and its `end` is reset to the current",
                      "block number.",
                      "",
                      "- `who`: The account whose contribution should be withdrawn.",
                      "- `index`: The parachain to whose crowdloan the contribution was made."
                    ]
                  },
                  {
                    "name": "refund",
                    "fields": [
                      {
                        "name": "index",
                        "type": 325,
                        "typeName": "ParaId"
                      }
                    ],
                    "index": 3,
                    "docs": [
                      "Automatically refund contributors of an ended crowdloan.",
                      "Due to weight restrictions, this function may need to be called multiple",
                      "times to fully refund all users. We will refund `RemoveKeysLimit` users at a time.",
                      "",
                      "Origin must be signed, but can come from anyone."
                    ]
                  },
                  {
                    "name": "dissolve",
                    "fields": [
                      {
                        "name": "index",
                        "type": 325,
                        "typeName": "ParaId"
                      }
                    ],
                    "index": 4,
                    "docs": [
                      "Remove a fund after the retirement period has ended and all funds have been returned."
                    ]
                  },
                  {
                    "name": "edit",
                    "fields": [
                      {
                        "name": "index",
                        "type": 325,
                        "typeName": "ParaId"
                      },
                      {
                        "name": "cap",
                        "type": 63,
                        "typeName": "BalanceOf<T>"
                      },
                      {
                        "name": "first_period",
                        "type": 59,
                        "typeName": "LeasePeriodOf<T>"
                      },
                      {
                        "name": "last_period",
                        "type": 59,
                        "typeName": "LeasePeriodOf<T>"
                      },
                      {
                        "name": "end",
                        "type": 59,
                        "typeName": "BlockNumberFor<T>"
                      },
                      {
                        "name": "verifier",
                        "type": 327,
                        "typeName": "Option<MultiSigner>"
                      }
                    ],
                    "index": 5,
                    "docs": [
                      "Edit the configuration for an in-progress crowdloan.",
                      "",
                      "Can only be called by Root origin."
                    ]
                  },
                  {
                    "name": "add_memo",
                    "fields": [
                      {
                        "name": "index",
                        "type": 163,
                        "typeName": "ParaId"
                      },
                      {
                        "name": "memo",
                        "type": 14,
                        "typeName": "Vec<u8>"
                      }
                    ],
                    "index": 6,
                    "docs": [
                      "Add an optional memo to an existing crowdloan contribution.",
                      "",
                      "Origin must be Signed, and the user must have contributed to the crowdloan."
                    ]
                  },
                  {
                    "name": "poke",
                    "fields": [
                      {
                        "name": "index",
                        "type": 163,
                        "typeName": "ParaId"
                      }
                    ],
                    "index": 7,
                    "docs": [
                      "Poke the fund into `NewRaise`",
                      "",
                      "Origin must be Signed, and the fund has non-zero raise."
                    ]
                  },
                  {
                    "name": "contribute_all",
                    "fields": [
                      {
                        "name": "index",
                        "type": 325,
                        "typeName": "ParaId"
                      },
                      {
                        "name": "signature",
                        "type": 329,
                        "typeName": "Option<MultiSignature>"
                      }
                    ],
                    "index": 8,
                    "docs": [
                      "Contribute your entire balance to a crowd sale. This will transfer the entire balance of",
                      "a user over to fund a parachain slot. It will be withdrawable when the crowdloan has",
                      "ended and the funds are unused."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Contains a variant per dispatchable extrinsic that this pallet has."
            ]
          }
        },
        {
          "id": 327,
          "type": {
            "path": [
              "Option"
            ],
            "params": [
              {
                "name": "T",
                "type": 328
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "None",
                    "index": 0
                  },
                  {
                    "name": "Some",
                    "fields": [
                      {
                        "type": 328
                      }
                    ],
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 328,
          "type": {
            "path": [
              "sp_runtime",
              "MultiSigner"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Ed25519",
                    "fields": [
                      {
                        "type": 1,
                        "typeName": "ed25519::Public"
                      }
                    ],
                    "index": 0
                  },
                  {
                    "name": "Sr25519",
                    "fields": [
                      {
                        "type": 1,
                        "typeName": "sr25519::Public"
                      }
                    ],
                    "index": 1
                  },
                  {
                    "name": "Ecdsa",
                    "fields": [
                      {
                        "type": 141,
                        "typeName": "ecdsa::Public"
                      }
                    ],
                    "index": 2
                  }
                ]
              }
            }
          }
        },
        {
          "id": 329,
          "type": {
            "path": [
              "Option"
            ],
            "params": [
              {
                "name": "T",
                "type": 330
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "None",
                    "index": 0
                  },
                  {
                    "name": "Some",
                    "fields": [
                      {
                        "type": 330
                      }
                    ],
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 330,
          "type": {
            "path": [
              "sp_runtime",
              "MultiSignature"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Ed25519",
                    "fields": [
                      {
                        "type": 148,
                        "typeName": "ed25519::Signature"
                      }
                    ],
                    "index": 0
                  },
                  {
                    "name": "Sr25519",
                    "fields": [
                      {
                        "type": 148,
                        "typeName": "sr25519::Signature"
                      }
                    ],
                    "index": 1
                  },
                  {
                    "name": "Ecdsa",
                    "fields": [
                      {
                        "type": 171,
                        "typeName": "ecdsa::Signature"
                      }
                    ],
                    "index": 2
                  }
                ]
              }
            }
          }
        },
        {
          "id": 331,
          "type": {
            "path": [
              "polkadot_runtime_parachains",
              "coretime",
              "pallet",
              "Call"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "request_core_count",
                    "fields": [
                      {
                        "name": "count",
                        "type": 93,
                        "typeName": "u16"
                      }
                    ],
                    "index": 1,
                    "docs": [
                      "Request the configuration to be updated with the specified number of cores. Warning:",
                      "Since this only schedules a configuration update, it takes two sessions to come into",
                      "effect.",
                      "",
                      "- `origin`: Root or the Coretime Chain",
                      "- `count`: total number of cores"
                    ]
                  },
                  {
                    "name": "request_revenue_at",
                    "fields": [
                      {
                        "name": "when",
                        "type": 4,
                        "typeName": "BlockNumber"
                      }
                    ],
                    "index": 2,
                    "docs": [
                      "Request to claim the instantaneous coretime sales revenue starting from the block it was",
                      "last claimed until and up to the block specified. The claimed amount value is sent back",
                      "to the Coretime chain in a `notify_revenue` message. At the same time, the amount is",
                      "teleported to the Coretime chain."
                    ]
                  },
                  {
                    "name": "assign_core",
                    "fields": [
                      {
                        "name": "core",
                        "type": 93,
                        "typeName": "BrokerCoreIndex"
                      },
                      {
                        "name": "begin",
                        "type": 4,
                        "typeName": "BlockNumberFor<T>"
                      },
                      {
                        "name": "assignment",
                        "type": 332,
                        "typeName": "Vec<(CoreAssignment, PartsOf57600)>"
                      },
                      {
                        "name": "end_hint",
                        "type": 154,
                        "typeName": "Option<BlockNumberFor<T>>"
                      }
                    ],
                    "index": 4,
                    "docs": [
                      "Receive instructions from the `ExternalBrokerOrigin`, detailing how a specific core is",
                      "to be used.",
                      "",
                      "Parameters:",
                      "-`origin`: The `ExternalBrokerOrigin`, assumed to be the coretime chain.",
                      "-`core`: The core that should be scheduled.",
                      "-`begin`: The starting blockheight of the instruction.",
                      "-`assignment`: How the blockspace should be utilised.",
                      "-`end_hint`: An optional hint as to when this particular set of instructions will end."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Contains a variant per dispatchable extrinsic that this pallet has."
            ]
          }
        },
        {
          "id": 332,
          "type": {
            "def": {
              "sequence": {
                "type": 333
              }
            }
          }
        },
        {
          "id": 333,
          "type": {
            "def": {
              "tuple": [
                334,
                335
              ]
            }
          }
        },
        {
          "id": 334,
          "type": {
            "path": [
              "pallet_broker",
              "coretime_interface",
              "CoreAssignment"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Idle",
                    "index": 0
                  },
                  {
                    "name": "Pool",
                    "index": 1
                  },
                  {
                    "name": "Task",
                    "fields": [
                      {
                        "type": 4,
                        "typeName": "TaskId"
                      }
                    ],
                    "index": 2
                  }
                ]
              }
            }
          }
        },
        {
          "id": 335,
          "type": {
            "path": [
              "polkadot_runtime_parachains",
              "assigner_coretime",
              "PartsOf57600"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 93,
                    "typeName": "u16"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 336,
          "type": {
            "path": [
              "pallet_state_trie_migration",
              "pallet",
              "Call"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "control_auto_migration",
                    "fields": [
                      {
                        "name": "maybe_config",
                        "type": 337,
                        "typeName": "Option<MigrationLimits>"
                      }
                    ],
                    "index": 0,
                    "docs": [
                      "Control the automatic migration.",
                      "",
                      "The dispatch origin of this call must be [`Config::ControlOrigin`]."
                    ]
                  },
                  {
                    "name": "continue_migrate",
                    "fields": [
                      {
                        "name": "limits",
                        "type": 338,
                        "typeName": "MigrationLimits"
                      },
                      {
                        "name": "real_size_upper",
                        "type": 4,
                        "typeName": "u32"
                      },
                      {
                        "name": "witness_task",
                        "type": 339,
                        "typeName": "MigrationTask<T>"
                      }
                    ],
                    "index": 1,
                    "docs": [
                      "Continue the migration for the given `limits`.",
                      "",
                      "The dispatch origin of this call can be any signed account.",
                      "",
                      "This transaction has NO MONETARY INCENTIVES. calling it will not reward anyone. Albeit,",
                      "Upon successful execution, the transaction fee is returned.",
                      "",
                      "The (potentially over-estimated) of the byte length of all the data read must be",
                      "provided for up-front fee-payment and weighing. In essence, the caller is guaranteeing",
                      "that executing the current `MigrationTask` with the given `limits` will not exceed",
                      "`real_size_upper` bytes of read data.",
                      "",
                      "The `witness_task` is merely a helper to prevent the caller from being slashed or",
                      "generally trigger a migration that they do not intend. This parameter is just a message",
                      "from caller, saying that they believed `witness_task` was the last state of the",
                      "migration, and they only wish for their transaction to do anything, if this assumption",
                      "holds. In case `witness_task` does not match, the transaction fails.",
                      "",
                      "Based on the documentation of [`MigrationTask::migrate_until_exhaustion`], the",
                      "recommended way of doing this is to pass a `limit` that only bounds `count`, as the",
                      "`size` limit can always be overwritten."
                    ]
                  },
                  {
                    "name": "migrate_custom_top",
                    "fields": [
                      {
                        "name": "keys",
                        "type": 99,
                        "typeName": "Vec<Vec<u8>>"
                      },
                      {
                        "name": "witness_size",
                        "type": 4,
                        "typeName": "u32"
                      }
                    ],
                    "index": 2,
                    "docs": [
                      "Migrate the list of top keys by iterating each of them one by one.",
                      "",
                      "This does not affect the global migration process tracker ([`MigrationProcess`]), and",
                      "should only be used in case any keys are leftover due to a bug."
                    ]
                  },
                  {
                    "name": "migrate_custom_child",
                    "fields": [
                      {
                        "name": "root",
                        "type": 14,
                        "typeName": "Vec<u8>"
                      },
                      {
                        "name": "child_keys",
                        "type": 99,
                        "typeName": "Vec<Vec<u8>>"
                      },
                      {
                        "name": "total_size",
                        "type": 4,
                        "typeName": "u32"
                      }
                    ],
                    "index": 3,
                    "docs": [
                      "Migrate the list of child keys by iterating each of them one by one.",
                      "",
                      "All of the given child keys must be present under one `child_root`.",
                      "",
                      "This does not affect the global migration process tracker ([`MigrationProcess`]), and",
                      "should only be used in case any keys are leftover due to a bug."
                    ]
                  },
                  {
                    "name": "set_signed_max_limits",
                    "fields": [
                      {
                        "name": "limits",
                        "type": 338,
                        "typeName": "MigrationLimits"
                      }
                    ],
                    "index": 4,
                    "docs": [
                      "Set the maximum limit of the signed migration."
                    ]
                  },
                  {
                    "name": "force_set_progress",
                    "fields": [
                      {
                        "name": "progress_top",
                        "type": 340,
                        "typeName": "ProgressOf<T>"
                      },
                      {
                        "name": "progress_child",
                        "type": 340,
                        "typeName": "ProgressOf<T>"
                      }
                    ],
                    "index": 5,
                    "docs": [
                      "Forcefully set the progress the running migration.",
                      "",
                      "This is only useful in one case: the next key to migrate is too big to be migrated with",
                      "a signed account, in a parachain context, and we simply want to skip it. A reasonable",
                      "example of this would be `:code:`, which is both very expensive to migrate, and commonly",
                      "used, so probably it is already migrated.",
                      "",
                      "In case you mess things up, you can also, in principle, use this to reset the migration",
                      "process."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Contains a variant per dispatchable extrinsic that this pallet has."
            ]
          }
        },
        {
          "id": 337,
          "type": {
            "path": [
              "Option"
            ],
            "params": [
              {
                "name": "T",
                "type": 338
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "None",
                    "index": 0
                  },
                  {
                    "name": "Some",
                    "fields": [
                      {
                        "type": 338
                      }
                    ],
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 338,
          "type": {
            "path": [
              "pallet_state_trie_migration",
              "pallet",
              "MigrationLimits"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "size",
                    "type": 4,
                    "typeName": "u32"
                  },
                  {
                    "name": "item",
                    "type": 4,
                    "typeName": "u32"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 339,
          "type": {
            "path": [
              "pallet_state_trie_migration",
              "pallet",
              "MigrationTask"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "progress_top",
                    "type": 340,
                    "typeName": "ProgressOf<T>"
                  },
                  {
                    "name": "progress_child",
                    "type": 340,
                    "typeName": "ProgressOf<T>"
                  },
                  {
                    "name": "size",
                    "type": 4,
                    "typeName": "u32"
                  },
                  {
                    "name": "top_items",
                    "type": 4,
                    "typeName": "u32"
                  },
                  {
                    "name": "child_items",
                    "type": 4,
                    "typeName": "u32"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 340,
          "type": {
            "path": [
              "pallet_state_trie_migration",
              "pallet",
              "Progress"
            ],
            "params": [
              {
                "name": "MaxKeyLen",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "ToStart",
                    "index": 0
                  },
                  {
                    "name": "LastKey",
                    "fields": [
                      {
                        "type": 341,
                        "typeName": "BoundedVec<u8, MaxKeyLen>"
                      }
                    ],
                    "index": 1
                  },
                  {
                    "name": "Complete",
                    "index": 2
                  }
                ]
              }
            }
          }
        },
        {
          "id": 341,
          "type": {
            "path": [
              "bounded_collections",
              "bounded_vec",
              "BoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 2
              },
              {
                "name": "S",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 14,
                    "typeName": "Vec<T>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 342,
          "type": {
            "path": [
              "pallet_xcm",
              "pallet",
              "Call"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "send",
                    "fields": [
                      {
                        "name": "dest",
                        "type": 81,
                        "typeName": "Box<VersionedLocation>"
                      },
                      {
                        "name": "message",
                        "type": 343,
                        "typeName": "Box<VersionedXcm<()>>"
                      }
                    ],
                    "index": 0
                  },
                  {
                    "name": "teleport_assets",
                    "fields": [
                      {
                        "name": "dest",
                        "type": 81,
                        "typeName": "Box<VersionedLocation>"
                      },
                      {
                        "name": "beneficiary",
                        "type": 81,
                        "typeName": "Box<VersionedLocation>"
                      },
                      {
                        "name": "assets",
                        "type": 407,
                        "typeName": "Box<VersionedAssets>"
                      },
                      {
                        "name": "fee_asset_item",
                        "type": 4,
                        "typeName": "u32"
                      }
                    ],
                    "index": 1,
                    "docs": [
                      "Teleport some assets from the local chain to some destination chain.",
                      "",
                      "**This function is deprecated: Use `limited_teleport_assets` instead.**",
                      "",
                      "Fee payment on the destination side is made from the asset in the `assets` vector of",
                      "index `fee_asset_item`. The weight limit for fees is not provided and thus is unlimited,",
                      "with all fees taken as needed from the asset.",
                      "",
                      "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
                      "- `dest`: Destination context for the assets. Will typically be `[Parent,",
                      "  Parachain(..)]` to send from parachain to parachain, or `[Parachain(..)]` to send from",
                      "  relay to parachain.",
                      "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will",
                      "  generally be an `AccountId32` value.",
                      "- `assets`: The assets to be withdrawn. This should include the assets used to pay the",
                      "  fee on the `dest` chain.",
                      "- `fee_asset_item`: The index into `assets` of the item which should be used to pay",
                      "  fees."
                    ]
                  },
                  {
                    "name": "reserve_transfer_assets",
                    "fields": [
                      {
                        "name": "dest",
                        "type": 81,
                        "typeName": "Box<VersionedLocation>"
                      },
                      {
                        "name": "beneficiary",
                        "type": 81,
                        "typeName": "Box<VersionedLocation>"
                      },
                      {
                        "name": "assets",
                        "type": 407,
                        "typeName": "Box<VersionedAssets>"
                      },
                      {
                        "name": "fee_asset_item",
                        "type": 4,
                        "typeName": "u32"
                      }
                    ],
                    "index": 2,
                    "docs": [
                      "Transfer some assets from the local chain to the destination chain through their local,",
                      "destination or remote reserve.",
                      "",
                      "`assets` must have same reserve location and may not be teleportable to `dest`.",
                      " - `assets` have local reserve: transfer assets to sovereign account of destination",
                      "   chain and forward a notification XCM to `dest` to mint and deposit reserve-based",
                      "   assets to `beneficiary`.",
                      " - `assets` have destination reserve: burn local assets and forward a notification to",
                      "   `dest` chain to withdraw the reserve assets from this chain's sovereign account and",
                      "   deposit them to `beneficiary`.",
                      " - `assets` have remote reserve: burn local assets, forward XCM to reserve chain to move",
                      "   reserves from this chain's SA to `dest` chain's SA, and forward another XCM to `dest`",
                      "   to mint and deposit reserve-based assets to `beneficiary`.",
                      "",
                      "**This function is deprecated: Use `limited_reserve_transfer_assets` instead.**",
                      "",
                      "Fee payment on the destination side is made from the asset in the `assets` vector of",
                      "index `fee_asset_item`. The weight limit for fees is not provided and thus is unlimited,",
                      "with all fees taken as needed from the asset.",
                      "",
                      "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
                      "- `dest`: Destination context for the assets. Will typically be `[Parent,",
                      "  Parachain(..)]` to send from parachain to parachain, or `[Parachain(..)]` to send from",
                      "  relay to parachain.",
                      "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will",
                      "  generally be an `AccountId32` value.",
                      "- `assets`: The assets to be withdrawn. This should include the assets used to pay the",
                      "  fee on the `dest` (and possibly reserve) chains.",
                      "- `fee_asset_item`: The index into `assets` of the item which should be used to pay",
                      "  fees."
                    ]
                  },
                  {
                    "name": "execute",
                    "fields": [
                      {
                        "name": "message",
                        "type": 408,
                        "typeName": "Box<VersionedXcm<<T as Config>::RuntimeCall>>"
                      },
                      {
                        "name": "max_weight",
                        "type": 10,
                        "typeName": "Weight"
                      }
                    ],
                    "index": 3,
                    "docs": [
                      "Execute an XCM message from a local, signed, origin.",
                      "",
                      "An event is deposited indicating whether `msg` could be executed completely or only",
                      "partially.",
                      "",
                      "No more than `max_weight` will be used in its attempted execution. If this is less than",
                      "the maximum amount of weight that the message could take to be executed, then no",
                      "execution attempt will be made."
                    ]
                  },
                  {
                    "name": "force_xcm_version",
                    "fields": [
                      {
                        "name": "location",
                        "type": 67,
                        "typeName": "Box<Location>"
                      },
                      {
                        "name": "version",
                        "type": 4,
                        "typeName": "XcmVersion"
                      }
                    ],
                    "index": 4,
                    "docs": [
                      "Extoll that a particular destination can be communicated with through a particular",
                      "version of XCM.",
                      "",
                      "- `origin`: Must be an origin specified by AdminOrigin.",
                      "- `location`: The destination that is being described.",
                      "- `xcm_version`: The latest version of XCM that `location` supports."
                    ]
                  },
                  {
                    "name": "force_default_xcm_version",
                    "fields": [
                      {
                        "name": "maybe_xcm_version",
                        "type": 154,
                        "typeName": "Option<XcmVersion>"
                      }
                    ],
                    "index": 5,
                    "docs": [
                      "Set a safe XCM version (the version that XCM should be encoded with if the most recent",
                      "version a destination can accept is unknown).",
                      "",
                      "- `origin`: Must be an origin specified by AdminOrigin.",
                      "- `maybe_xcm_version`: The default XCM encoding version, or `None` to disable."
                    ]
                  },
                  {
                    "name": "force_subscribe_version_notify",
                    "fields": [
                      {
                        "name": "location",
                        "type": 81,
                        "typeName": "Box<VersionedLocation>"
                      }
                    ],
                    "index": 6,
                    "docs": [
                      "Ask a location to notify us regarding their XCM version and any changes to it.",
                      "",
                      "- `origin`: Must be an origin specified by AdminOrigin.",
                      "- `location`: The location to which we should subscribe for XCM version notifications."
                    ]
                  },
                  {
                    "name": "force_unsubscribe_version_notify",
                    "fields": [
                      {
                        "name": "location",
                        "type": 81,
                        "typeName": "Box<VersionedLocation>"
                      }
                    ],
                    "index": 7,
                    "docs": [
                      "Require that a particular destination should no longer notify us regarding any XCM",
                      "version changes.",
                      "",
                      "- `origin`: Must be an origin specified by AdminOrigin.",
                      "- `location`: The location to which we are currently subscribed for XCM version",
                      "  notifications which we no longer desire."
                    ]
                  },
                  {
                    "name": "limited_reserve_transfer_assets",
                    "fields": [
                      {
                        "name": "dest",
                        "type": 81,
                        "typeName": "Box<VersionedLocation>"
                      },
                      {
                        "name": "beneficiary",
                        "type": 81,
                        "typeName": "Box<VersionedLocation>"
                      },
                      {
                        "name": "assets",
                        "type": 407,
                        "typeName": "Box<VersionedAssets>"
                      },
                      {
                        "name": "fee_asset_item",
                        "type": 4,
                        "typeName": "u32"
                      },
                      {
                        "name": "weight_limit",
                        "type": 388,
                        "typeName": "WeightLimit"
                      }
                    ],
                    "index": 8,
                    "docs": [
                      "Transfer some assets from the local chain to the destination chain through their local,",
                      "destination or remote reserve.",
                      "",
                      "`assets` must have same reserve location and may not be teleportable to `dest`.",
                      " - `assets` have local reserve: transfer assets to sovereign account of destination",
                      "   chain and forward a notification XCM to `dest` to mint and deposit reserve-based",
                      "   assets to `beneficiary`.",
                      " - `assets` have destination reserve: burn local assets and forward a notification to",
                      "   `dest` chain to withdraw the reserve assets from this chain's sovereign account and",
                      "   deposit them to `beneficiary`.",
                      " - `assets` have remote reserve: burn local assets, forward XCM to reserve chain to move",
                      "   reserves from this chain's SA to `dest` chain's SA, and forward another XCM to `dest`",
                      "   to mint and deposit reserve-based assets to `beneficiary`.",
                      "",
                      "Fee payment on the destination side is made from the asset in the `assets` vector of",
                      "index `fee_asset_item`, up to enough to pay for `weight_limit` of weight. If more weight",
                      "is needed than `weight_limit`, then the operation will fail and the sent assets may be",
                      "at risk.",
                      "",
                      "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
                      "- `dest`: Destination context for the assets. Will typically be `[Parent,",
                      "  Parachain(..)]` to send from parachain to parachain, or `[Parachain(..)]` to send from",
                      "  relay to parachain.",
                      "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will",
                      "  generally be an `AccountId32` value.",
                      "- `assets`: The assets to be withdrawn. This should include the assets used to pay the",
                      "  fee on the `dest` (and possibly reserve) chains.",
                      "- `fee_asset_item`: The index into `assets` of the item which should be used to pay",
                      "  fees.",
                      "- `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase."
                    ]
                  },
                  {
                    "name": "limited_teleport_assets",
                    "fields": [
                      {
                        "name": "dest",
                        "type": 81,
                        "typeName": "Box<VersionedLocation>"
                      },
                      {
                        "name": "beneficiary",
                        "type": 81,
                        "typeName": "Box<VersionedLocation>"
                      },
                      {
                        "name": "assets",
                        "type": 407,
                        "typeName": "Box<VersionedAssets>"
                      },
                      {
                        "name": "fee_asset_item",
                        "type": 4,
                        "typeName": "u32"
                      },
                      {
                        "name": "weight_limit",
                        "type": 388,
                        "typeName": "WeightLimit"
                      }
                    ],
                    "index": 9,
                    "docs": [
                      "Teleport some assets from the local chain to some destination chain.",
                      "",
                      "Fee payment on the destination side is made from the asset in the `assets` vector of",
                      "index `fee_asset_item`, up to enough to pay for `weight_limit` of weight. If more weight",
                      "is needed than `weight_limit`, then the operation will fail and the sent assets may be",
                      "at risk.",
                      "",
                      "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
                      "- `dest`: Destination context for the assets. Will typically be `[Parent,",
                      "  Parachain(..)]` to send from parachain to parachain, or `[Parachain(..)]` to send from",
                      "  relay to parachain.",
                      "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will",
                      "  generally be an `AccountId32` value.",
                      "- `assets`: The assets to be withdrawn. This should include the assets used to pay the",
                      "  fee on the `dest` chain.",
                      "- `fee_asset_item`: The index into `assets` of the item which should be used to pay",
                      "  fees.",
                      "- `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase."
                    ]
                  },
                  {
                    "name": "force_suspension",
                    "fields": [
                      {
                        "name": "suspended",
                        "type": 8,
                        "typeName": "bool"
                      }
                    ],
                    "index": 10,
                    "docs": [
                      "Set or unset the global suspension state of the XCM executor.",
                      "",
                      "- `origin`: Must be an origin specified by AdminOrigin.",
                      "- `suspended`: `true` to suspend, `false` to resume."
                    ]
                  },
                  {
                    "name": "transfer_assets",
                    "fields": [
                      {
                        "name": "dest",
                        "type": 81,
                        "typeName": "Box<VersionedLocation>"
                      },
                      {
                        "name": "beneficiary",
                        "type": 81,
                        "typeName": "Box<VersionedLocation>"
                      },
                      {
                        "name": "assets",
                        "type": 407,
                        "typeName": "Box<VersionedAssets>"
                      },
                      {
                        "name": "fee_asset_item",
                        "type": 4,
                        "typeName": "u32"
                      },
                      {
                        "name": "weight_limit",
                        "type": 388,
                        "typeName": "WeightLimit"
                      }
                    ],
                    "index": 11,
                    "docs": [
                      "Transfer some assets from the local chain to the destination chain through their local,",
                      "destination or remote reserve, or through teleports.",
                      "",
                      "Fee payment on the destination side is made from the asset in the `assets` vector of",
                      "index `fee_asset_item` (hence referred to as `fees`), up to enough to pay for",
                      "`weight_limit` of weight. If more weight is needed than `weight_limit`, then the",
                      "operation will fail and the sent assets may be at risk.",
                      "",
                      "`assets` (excluding `fees`) must have same reserve location or otherwise be teleportable",
                      "to `dest`, no limitations imposed on `fees`.",
                      " - for local reserve: transfer assets to sovereign account of destination chain and",
                      "   forward a notification XCM to `dest` to mint and deposit reserve-based assets to",
                      "   `beneficiary`.",
                      " - for destination reserve: burn local assets and forward a notification to `dest` chain",
                      "   to withdraw the reserve assets from this chain's sovereign account and deposit them",
                      "   to `beneficiary`.",
                      " - for remote reserve: burn local assets, forward XCM to reserve chain to move reserves",
                      "   from this chain's SA to `dest` chain's SA, and forward another XCM to `dest` to mint",
                      "   and deposit reserve-based assets to `beneficiary`.",
                      " - for teleports: burn local assets and forward XCM to `dest` chain to mint/teleport",
                      "   assets and deposit them to `beneficiary`.",
                      "",
                      "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
                      "- `dest`: Destination context for the assets. Will typically be `X2(Parent,",
                      "  Parachain(..))` to send from parachain to parachain, or `X1(Parachain(..))` to send",
                      "  from relay to parachain.",
                      "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will",
                      "  generally be an `AccountId32` value.",
                      "- `assets`: The assets to be withdrawn. This should include the assets used to pay the",
                      "  fee on the `dest` (and possibly reserve) chains.",
                      "- `fee_asset_item`: The index into `assets` of the item which should be used to pay",
                      "  fees.",
                      "- `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase."
                    ]
                  },
                  {
                    "name": "claim_assets",
                    "fields": [
                      {
                        "name": "assets",
                        "type": 407,
                        "typeName": "Box<VersionedAssets>"
                      },
                      {
                        "name": "beneficiary",
                        "type": 81,
                        "typeName": "Box<VersionedLocation>"
                      }
                    ],
                    "index": 12,
                    "docs": [
                      "Claims assets trapped on this pallet because of leftover assets during XCM execution.",
                      "",
                      "- `origin`: Anyone can call this extrinsic.",
                      "- `assets`: The exact assets that were trapped. Use the version to specify what version",
                      "was the latest when they were trapped.",
                      "- `beneficiary`: The location/account where the claimed assets will be deposited."
                    ]
                  },
                  {
                    "name": "transfer_assets_using_type_and_then",
                    "fields": [
                      {
                        "name": "dest",
                        "type": 81,
                        "typeName": "Box<VersionedLocation>"
                      },
                      {
                        "name": "assets",
                        "type": 407,
                        "typeName": "Box<VersionedAssets>"
                      },
                      {
                        "name": "assets_transfer_type",
                        "type": 419,
                        "typeName": "Box<TransferType>"
                      },
                      {
                        "name": "remote_fees_id",
                        "type": 420,
                        "typeName": "Box<VersionedAssetId>"
                      },
                      {
                        "name": "fees_transfer_type",
                        "type": 419,
                        "typeName": "Box<TransferType>"
                      },
                      {
                        "name": "custom_xcm_on_dest",
                        "type": 343,
                        "typeName": "Box<VersionedXcm<()>>"
                      },
                      {
                        "name": "weight_limit",
                        "type": 388,
                        "typeName": "WeightLimit"
                      }
                    ],
                    "index": 13,
                    "docs": [
                      "Transfer assets from the local chain to the destination chain using explicit transfer",
                      "types for assets and fees.",
                      "",
                      "`assets` must have same reserve location or may be teleportable to `dest`. Caller must",
                      "provide the `assets_transfer_type` to be used for `assets`:",
                      " - `TransferType::LocalReserve`: transfer assets to sovereign account of destination",
                      "   chain and forward a notification XCM to `dest` to mint and deposit reserve-based",
                      "   assets to `beneficiary`.",
                      " - `TransferType::DestinationReserve`: burn local assets and forward a notification to",
                      "   `dest` chain to withdraw the reserve assets from this chain's sovereign account and",
                      "   deposit them to `beneficiary`.",
                      " - `TransferType::RemoteReserve(reserve)`: burn local assets, forward XCM to `reserve`",
                      "   chain to move reserves from this chain's SA to `dest` chain's SA, and forward another",
                      "   XCM to `dest` to mint and deposit reserve-based assets to `beneficiary`. Typically",
                      "   the remote `reserve` is Asset Hub.",
                      " - `TransferType::Teleport`: burn local assets and forward XCM to `dest` chain to",
                      "   mint/teleport assets and deposit them to `beneficiary`.",
                      "",
                      "On the destination chain, as well as any intermediary hops, `BuyExecution` is used to",
                      "buy execution using transferred `assets` identified by `remote_fees_id`.",
                      "Make sure enough of the specified `remote_fees_id` asset is included in the given list",
                      "of `assets`. `remote_fees_id` should be enough to pay for `weight_limit`. If more weight",
                      "is needed than `weight_limit`, then the operation will fail and the sent assets may be",
                      "at risk.",
                      "",
                      "`remote_fees_id` may use different transfer type than rest of `assets` and can be",
                      "specified through `fees_transfer_type`.",
                      "",
                      "The caller needs to specify what should happen to the transferred assets once they reach",
                      "the `dest` chain. This is done through the `custom_xcm_on_dest` parameter, which",
                      "contains the instructions to execute on `dest` as a final step.",
                      "  This is usually as simple as:",
                      "  `Xcm(vec![DepositAsset { assets: Wild(AllCounted(assets.len())), beneficiary }])`,",
                      "  but could be something more exotic like sending the `assets` even further.",
                      "",
                      "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
                      "- `dest`: Destination context for the assets. Will typically be `[Parent,",
                      "  Parachain(..)]` to send from parachain to parachain, or `[Parachain(..)]` to send from",
                      "  relay to parachain, or `(parents: 2, (GlobalConsensus(..), ..))` to send from",
                      "  parachain across a bridge to another ecosystem destination.",
                      "- `assets`: The assets to be withdrawn. This should include the assets used to pay the",
                      "  fee on the `dest` (and possibly reserve) chains.",
                      "- `assets_transfer_type`: The XCM `TransferType` used to transfer the `assets`.",
                      "- `remote_fees_id`: One of the included `assets` to be used to pay fees.",
                      "- `fees_transfer_type`: The XCM `TransferType` used to transfer the `fees` assets.",
                      "- `custom_xcm_on_dest`: The XCM to be executed on `dest` chain as the last step of the",
                      "  transfer, which also determines what happens to the assets on the destination chain.",
                      "- `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Contains a variant per dispatchable extrinsic that this pallet has."
            ]
          }
        },
        {
          "id": 343,
          "type": {
            "path": [
              "xcm",
              "VersionedXcm"
            ],
            "params": [
              {
                "name": "RuntimeCall",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "V2",
                    "fields": [
                      {
                        "type": 344,
                        "typeName": "v2::Xcm<RuntimeCall>"
                      }
                    ],
                    "index": 2
                  },
                  {
                    "name": "V3",
                    "fields": [
                      {
                        "type": 364,
                        "typeName": "v3::Xcm<RuntimeCall>"
                      }
                    ],
                    "index": 3
                  },
                  {
                    "name": "V4",
                    "fields": [
                      {
                        "type": 389,
                        "typeName": "v4::Xcm<RuntimeCall>"
                      }
                    ],
                    "index": 4
                  }
                ]
              }
            }
          }
        },
        {
          "id": 344,
          "type": {
            "path": [
              "xcm",
              "v2",
              "Xcm"
            ],
            "params": [
              {
                "name": "RuntimeCall",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 345,
                    "typeName": "Vec<Instruction<RuntimeCall>>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 345,
          "type": {
            "def": {
              "sequence": {
                "type": 346
              }
            }
          }
        },
        {
          "id": 346,
          "type": {
            "path": [
              "xcm",
              "v2",
              "Instruction"
            ],
            "params": [
              {
                "name": "RuntimeCall",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "WithdrawAsset",
                    "fields": [
                      {
                        "type": 347,
                        "typeName": "MultiAssets"
                      }
                    ],
                    "index": 0
                  },
                  {
                    "name": "ReserveAssetDeposited",
                    "fields": [
                      {
                        "type": 347,
                        "typeName": "MultiAssets"
                      }
                    ],
                    "index": 1
                  },
                  {
                    "name": "ReceiveTeleportedAsset",
                    "fields": [
                      {
                        "type": 347,
                        "typeName": "MultiAssets"
                      }
                    ],
                    "index": 2
                  },
                  {
                    "name": "QueryResponse",
                    "fields": [
                      {
                        "name": "query_id",
                        "type": 11,
                        "typeName": "QueryId"
                      },
                      {
                        "name": "response",
                        "type": 354,
                        "typeName": "Response"
                      },
                      {
                        "name": "max_weight",
                        "type": 11,
                        "typeName": "u64"
                      }
                    ],
                    "index": 3
                  },
                  {
                    "name": "TransferAsset",
                    "fields": [
                      {
                        "name": "assets",
                        "type": 347,
                        "typeName": "MultiAssets"
                      },
                      {
                        "name": "beneficiary",
                        "type": 82,
                        "typeName": "MultiLocation"
                      }
                    ],
                    "index": 4
                  },
                  {
                    "name": "TransferReserveAsset",
                    "fields": [
                      {
                        "name": "assets",
                        "type": 347,
                        "typeName": "MultiAssets"
                      },
                      {
                        "name": "dest",
                        "type": 82,
                        "typeName": "MultiLocation"
                      },
                      {
                        "name": "xcm",
                        "type": 344,
                        "typeName": "Xcm<()>"
                      }
                    ],
                    "index": 5
                  },
                  {
                    "name": "Transact",
                    "fields": [
                      {
                        "name": "origin_type",
                        "type": 358,
                        "typeName": "OriginKind"
                      },
                      {
                        "name": "require_weight_at_most",
                        "type": 11,
                        "typeName": "u64"
                      },
                      {
                        "name": "call",
                        "type": 359,
                        "typeName": "DoubleEncoded<RuntimeCall>"
                      }
                    ],
                    "index": 6
                  },
                  {
                    "name": "HrmpNewChannelOpenRequest",
                    "fields": [
                      {
                        "name": "sender",
                        "type": 59,
                        "typeName": "u32"
                      },
                      {
                        "name": "max_message_size",
                        "type": 59,
                        "typeName": "u32"
                      },
                      {
                        "name": "max_capacity",
                        "type": 59,
                        "typeName": "u32"
                      }
                    ],
                    "index": 7
                  },
                  {
                    "name": "HrmpChannelAccepted",
                    "fields": [
                      {
                        "name": "recipient",
                        "type": 59,
                        "typeName": "u32"
                      }
                    ],
                    "index": 8
                  },
                  {
                    "name": "HrmpChannelClosing",
                    "fields": [
                      {
                        "name": "initiator",
                        "type": 59,
                        "typeName": "u32"
                      },
                      {
                        "name": "sender",
                        "type": 59,
                        "typeName": "u32"
                      },
                      {
                        "name": "recipient",
                        "type": 59,
                        "typeName": "u32"
                      }
                    ],
                    "index": 9
                  },
                  {
                    "name": "ClearOrigin",
                    "index": 10
                  },
                  {
                    "name": "DescendOrigin",
                    "fields": [
                      {
                        "type": 83,
                        "typeName": "InteriorMultiLocation"
                      }
                    ],
                    "index": 11
                  },
                  {
                    "name": "ReportError",
                    "fields": [
                      {
                        "name": "query_id",
                        "type": 11,
                        "typeName": "QueryId"
                      },
                      {
                        "name": "dest",
                        "type": 82,
                        "typeName": "MultiLocation"
                      },
                      {
                        "name": "max_response_weight",
                        "type": 11,
                        "typeName": "u64"
                      }
                    ],
                    "index": 12
                  },
                  {
                    "name": "DepositAsset",
                    "fields": [
                      {
                        "name": "assets",
                        "type": 360,
                        "typeName": "MultiAssetFilter"
                      },
                      {
                        "name": "max_assets",
                        "type": 59,
                        "typeName": "u32"
                      },
                      {
                        "name": "beneficiary",
                        "type": 82,
                        "typeName": "MultiLocation"
                      }
                    ],
                    "index": 13
                  },
                  {
                    "name": "DepositReserveAsset",
                    "fields": [
                      {
                        "name": "assets",
                        "type": 360,
                        "typeName": "MultiAssetFilter"
                      },
                      {
                        "name": "max_assets",
                        "type": 59,
                        "typeName": "u32"
                      },
                      {
                        "name": "dest",
                        "type": 82,
                        "typeName": "MultiLocation"
                      },
                      {
                        "name": "xcm",
                        "type": 344,
                        "typeName": "Xcm<()>"
                      }
                    ],
                    "index": 14
                  },
                  {
                    "name": "ExchangeAsset",
                    "fields": [
                      {
                        "name": "give",
                        "type": 360,
                        "typeName": "MultiAssetFilter"
                      },
                      {
                        "name": "receive",
                        "type": 347,
                        "typeName": "MultiAssets"
                      }
                    ],
                    "index": 15
                  },
                  {
                    "name": "InitiateReserveWithdraw",
                    "fields": [
                      {
                        "name": "assets",
                        "type": 360,
                        "typeName": "MultiAssetFilter"
                      },
                      {
                        "name": "reserve",
                        "type": 82,
                        "typeName": "MultiLocation"
                      },
                      {
                        "name": "xcm",
                        "type": 344,
                        "typeName": "Xcm<()>"
                      }
                    ],
                    "index": 16
                  },
                  {
                    "name": "InitiateTeleport",
                    "fields": [
                      {
                        "name": "assets",
                        "type": 360,
                        "typeName": "MultiAssetFilter"
                      },
                      {
                        "name": "dest",
                        "type": 82,
                        "typeName": "MultiLocation"
                      },
                      {
                        "name": "xcm",
                        "type": 344,
                        "typeName": "Xcm<()>"
                      }
                    ],
                    "index": 17
                  },
                  {
                    "name": "QueryHolding",
                    "fields": [
                      {
                        "name": "query_id",
                        "type": 11,
                        "typeName": "QueryId"
                      },
                      {
                        "name": "dest",
                        "type": 82,
                        "typeName": "MultiLocation"
                      },
                      {
                        "name": "assets",
                        "type": 360,
                        "typeName": "MultiAssetFilter"
                      },
                      {
                        "name": "max_response_weight",
                        "type": 11,
                        "typeName": "u64"
                      }
                    ],
                    "index": 18
                  },
                  {
                    "name": "BuyExecution",
                    "fields": [
                      {
                        "name": "fees",
                        "type": 349,
                        "typeName": "MultiAsset"
                      },
                      {
                        "name": "weight_limit",
                        "type": 363,
                        "typeName": "WeightLimit"
                      }
                    ],
                    "index": 19
                  },
                  {
                    "name": "RefundSurplus",
                    "index": 20
                  },
                  {
                    "name": "SetErrorHandler",
                    "fields": [
                      {
                        "type": 344,
                        "typeName": "Xcm<RuntimeCall>"
                      }
                    ],
                    "index": 21
                  },
                  {
                    "name": "SetAppendix",
                    "fields": [
                      {
                        "type": 344,
                        "typeName": "Xcm<RuntimeCall>"
                      }
                    ],
                    "index": 22
                  },
                  {
                    "name": "ClearError",
                    "index": 23
                  },
                  {
                    "name": "ClaimAsset",
                    "fields": [
                      {
                        "name": "assets",
                        "type": 347,
                        "typeName": "MultiAssets"
                      },
                      {
                        "name": "ticket",
                        "type": 82,
                        "typeName": "MultiLocation"
                      }
                    ],
                    "index": 24
                  },
                  {
                    "name": "Trap",
                    "fields": [
                      {
                        "type": 11,
                        "typeName": "u64"
                      }
                    ],
                    "index": 25
                  },
                  {
                    "name": "SubscribeVersion",
                    "fields": [
                      {
                        "name": "query_id",
                        "type": 11,
                        "typeName": "QueryId"
                      },
                      {
                        "name": "max_response_weight",
                        "type": 11,
                        "typeName": "u64"
                      }
                    ],
                    "index": 26
                  },
                  {
                    "name": "UnsubscribeVersion",
                    "index": 27
                  }
                ]
              }
            }
          }
        },
        {
          "id": 347,
          "type": {
            "path": [
              "xcm",
              "v2",
              "multiasset",
              "MultiAssets"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 348,
                    "typeName": "Vec<MultiAsset>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 348,
          "type": {
            "def": {
              "sequence": {
                "type": 349
              }
            }
          }
        },
        {
          "id": 349,
          "type": {
            "path": [
              "xcm",
              "v2",
              "multiasset",
              "MultiAsset"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "id",
                    "type": 350,
                    "typeName": "AssetId"
                  },
                  {
                    "name": "fun",
                    "type": 351,
                    "typeName": "Fungibility"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 350,
          "type": {
            "path": [
              "xcm",
              "v2",
              "multiasset",
              "AssetId"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Concrete",
                    "fields": [
                      {
                        "type": 82,
                        "typeName": "MultiLocation"
                      }
                    ],
                    "index": 0
                  },
                  {
                    "name": "Abstract",
                    "fields": [
                      {
                        "type": 14,
                        "typeName": "Vec<u8>"
                      }
                    ],
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 351,
          "type": {
            "path": [
              "xcm",
              "v2",
              "multiasset",
              "Fungibility"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Fungible",
                    "fields": [
                      {
                        "type": 63,
                        "typeName": "u128"
                      }
                    ],
                    "index": 0
                  },
                  {
                    "name": "NonFungible",
                    "fields": [
                      {
                        "type": 352,
                        "typeName": "AssetInstance"
                      }
                    ],
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 352,
          "type": {
            "path": [
              "xcm",
              "v2",
              "multiasset",
              "AssetInstance"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Undefined",
                    "index": 0
                  },
                  {
                    "name": "Index",
                    "fields": [
                      {
                        "type": 63,
                        "typeName": "u128"
                      }
                    ],
                    "index": 1
                  },
                  {
                    "name": "Array4",
                    "fields": [
                      {
                        "type": 18,
                        "typeName": "[u8; 4]"
                      }
                    ],
                    "index": 2
                  },
                  {
                    "name": "Array8",
                    "fields": [
                      {
                        "type": 353,
                        "typeName": "[u8; 8]"
                      }
                    ],
                    "index": 3
                  },
                  {
                    "name": "Array16",
                    "fields": [
                      {
                        "type": 48,
                        "typeName": "[u8; 16]"
                      }
                    ],
                    "index": 4
                  },
                  {
                    "name": "Array32",
                    "fields": [
                      {
                        "type": 1,
                        "typeName": "[u8; 32]"
                      }
                    ],
                    "index": 5
                  },
                  {
                    "name": "Blob",
                    "fields": [
                      {
                        "type": 14,
                        "typeName": "Vec<u8>"
                      }
                    ],
                    "index": 6
                  }
                ]
              }
            }
          }
        },
        {
          "id": 353,
          "type": {
            "def": {
              "array": {
                "len": 8,
                "type": 2
              }
            }
          }
        },
        {
          "id": 354,
          "type": {
            "path": [
              "xcm",
              "v2",
              "Response"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Null",
                    "index": 0
                  },
                  {
                    "name": "Assets",
                    "fields": [
                      {
                        "type": 347,
                        "typeName": "MultiAssets"
                      }
                    ],
                    "index": 1
                  },
                  {
                    "name": "ExecutionResult",
                    "fields": [
                      {
                        "type": 355,
                        "typeName": "Option<(u32, Error)>"
                      }
                    ],
                    "index": 2
                  },
                  {
                    "name": "Version",
                    "fields": [
                      {
                        "type": 4,
                        "typeName": "super::Version"
                      }
                    ],
                    "index": 3
                  }
                ]
              }
            }
          }
        },
        {
          "id": 355,
          "type": {
            "path": [
              "Option"
            ],
            "params": [
              {
                "name": "T",
                "type": 356
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "None",
                    "index": 0
                  },
                  {
                    "name": "Some",
                    "fields": [
                      {
                        "type": 356
                      }
                    ],
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 356,
          "type": {
            "def": {
              "tuple": [
                4,
                357
              ]
            }
          }
        },
        {
          "id": 357,
          "type": {
            "path": [
              "xcm",
              "v2",
              "traits",
              "Error"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Overflow",
                    "index": 0
                  },
                  {
                    "name": "Unimplemented",
                    "index": 1
                  },
                  {
                    "name": "UntrustedReserveLocation",
                    "index": 2
                  },
                  {
                    "name": "UntrustedTeleportLocation",
                    "index": 3
                  },
                  {
                    "name": "MultiLocationFull",
                    "index": 4
                  },
                  {
                    "name": "MultiLocationNotInvertible",
                    "index": 5
                  },
                  {
                    "name": "BadOrigin",
                    "index": 6
                  },
                  {
                    "name": "InvalidLocation",
                    "index": 7
                  },
                  {
                    "name": "AssetNotFound",
                    "index": 8
                  },
                  {
                    "name": "FailedToTransactAsset",
                    "index": 9
                  },
                  {
                    "name": "NotWithdrawable",
                    "index": 10
                  },
                  {
                    "name": "LocationCannotHold",
                    "index": 11
                  },
                  {
                    "name": "ExceedsMaxMessageSize",
                    "index": 12
                  },
                  {
                    "name": "DestinationUnsupported",
                    "index": 13
                  },
                  {
                    "name": "Transport",
                    "index": 14
                  },
                  {
                    "name": "Unroutable",
                    "index": 15
                  },
                  {
                    "name": "UnknownClaim",
                    "index": 16
                  },
                  {
                    "name": "FailedToDecode",
                    "index": 17
                  },
                  {
                    "name": "MaxWeightInvalid",
                    "index": 18
                  },
                  {
                    "name": "NotHoldingFees",
                    "index": 19
                  },
                  {
                    "name": "TooExpensive",
                    "index": 20
                  },
                  {
                    "name": "Trap",
                    "fields": [
                      {
                        "type": 12,
                        "typeName": "u64"
                      }
                    ],
                    "index": 21
                  },
                  {
                    "name": "UnhandledXcmVersion",
                    "index": 22
                  },
                  {
                    "name": "WeightLimitReached",
                    "fields": [
                      {
                        "type": 12,
                        "typeName": "Weight"
                      }
                    ],
                    "index": 23
                  },
                  {
                    "name": "Barrier",
                    "index": 24
                  },
                  {
                    "name": "WeightNotComputable",
                    "index": 25
                  }
                ]
              }
            }
          }
        },
        {
          "id": 358,
          "type": {
            "path": [
              "xcm",
              "v2",
              "OriginKind"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Native",
                    "index": 0
                  },
                  {
                    "name": "SovereignAccount",
                    "index": 1
                  },
                  {
                    "name": "Superuser",
                    "index": 2
                  },
                  {
                    "name": "Xcm",
                    "index": 3
                  }
                ]
              }
            }
          }
        },
        {
          "id": 359,
          "type": {
            "path": [
              "xcm",
              "double_encoded",
              "DoubleEncoded"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "encoded",
                    "type": 14,
                    "typeName": "Vec<u8>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 360,
          "type": {
            "path": [
              "xcm",
              "v2",
              "multiasset",
              "MultiAssetFilter"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Definite",
                    "fields": [
                      {
                        "type": 347,
                        "typeName": "MultiAssets"
                      }
                    ],
                    "index": 0
                  },
                  {
                    "name": "Wild",
                    "fields": [
                      {
                        "type": 361,
                        "typeName": "WildMultiAsset"
                      }
                    ],
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 361,
          "type": {
            "path": [
              "xcm",
              "v2",
              "multiasset",
              "WildMultiAsset"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "All",
                    "index": 0
                  },
                  {
                    "name": "AllOf",
                    "fields": [
                      {
                        "name": "id",
                        "type": 350,
                        "typeName": "AssetId"
                      },
                      {
                        "name": "fun",
                        "type": 362,
                        "typeName": "WildFungibility"
                      }
                    ],
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 362,
          "type": {
            "path": [
              "xcm",
              "v2",
              "multiasset",
              "WildFungibility"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Fungible",
                    "index": 0
                  },
                  {
                    "name": "NonFungible",
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 363,
          "type": {
            "path": [
              "xcm",
              "v2",
              "WeightLimit"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Unlimited",
                    "index": 0
                  },
                  {
                    "name": "Limited",
                    "fields": [
                      {
                        "type": 11,
                        "typeName": "u64"
                      }
                    ],
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 364,
          "type": {
            "path": [
              "xcm",
              "v3",
              "Xcm"
            ],
            "params": [
              {
                "name": "Call",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 365,
                    "typeName": "Vec<Instruction<Call>>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 365,
          "type": {
            "def": {
              "sequence": {
                "type": 366
              }
            }
          }
        },
        {
          "id": 366,
          "type": {
            "path": [
              "xcm",
              "v3",
              "Instruction"
            ],
            "params": [
              {
                "name": "Call",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "WithdrawAsset",
                    "fields": [
                      {
                        "type": 367,
                        "typeName": "MultiAssets"
                      }
                    ],
                    "index": 0
                  },
                  {
                    "name": "ReserveAssetDeposited",
                    "fields": [
                      {
                        "type": 367,
                        "typeName": "MultiAssets"
                      }
                    ],
                    "index": 1
                  },
                  {
                    "name": "ReceiveTeleportedAsset",
                    "fields": [
                      {
                        "type": 367,
                        "typeName": "MultiAssets"
                      }
                    ],
                    "index": 2
                  },
                  {
                    "name": "QueryResponse",
                    "fields": [
                      {
                        "name": "query_id",
                        "type": 11,
                        "typeName": "QueryId"
                      },
                      {
                        "name": "response",
                        "type": 372,
                        "typeName": "Response"
                      },
                      {
                        "name": "max_weight",
                        "type": 10,
                        "typeName": "Weight"
                      },
                      {
                        "name": "querier",
                        "type": 382,
                        "typeName": "Option<MultiLocation>"
                      }
                    ],
                    "index": 3
                  },
                  {
                    "name": "TransferAsset",
                    "fields": [
                      {
                        "name": "assets",
                        "type": 367,
                        "typeName": "MultiAssets"
                      },
                      {
                        "name": "beneficiary",
                        "type": 56,
                        "typeName": "MultiLocation"
                      }
                    ],
                    "index": 4
                  },
                  {
                    "name": "TransferReserveAsset",
                    "fields": [
                      {
                        "name": "assets",
                        "type": 367,
                        "typeName": "MultiAssets"
                      },
                      {
                        "name": "dest",
                        "type": 56,
                        "typeName": "MultiLocation"
                      },
                      {
                        "name": "xcm",
                        "type": 364,
                        "typeName": "Xcm<()>"
                      }
                    ],
                    "index": 5
                  },
                  {
                    "name": "Transact",
                    "fields": [
                      {
                        "name": "origin_kind",
                        "type": 383,
                        "typeName": "OriginKind"
                      },
                      {
                        "name": "require_weight_at_most",
                        "type": 10,
                        "typeName": "Weight"
                      },
                      {
                        "name": "call",
                        "type": 359,
                        "typeName": "DoubleEncoded<Call>"
                      }
                    ],
                    "index": 6
                  },
                  {
                    "name": "HrmpNewChannelOpenRequest",
                    "fields": [
                      {
                        "name": "sender",
                        "type": 59,
                        "typeName": "u32"
                      },
                      {
                        "name": "max_message_size",
                        "type": 59,
                        "typeName": "u32"
                      },
                      {
                        "name": "max_capacity",
                        "type": 59,
                        "typeName": "u32"
                      }
                    ],
                    "index": 7
                  },
                  {
                    "name": "HrmpChannelAccepted",
                    "fields": [
                      {
                        "name": "recipient",
                        "type": 59,
                        "typeName": "u32"
                      }
                    ],
                    "index": 8
                  },
                  {
                    "name": "HrmpChannelClosing",
                    "fields": [
                      {
                        "name": "initiator",
                        "type": 59,
                        "typeName": "u32"
                      },
                      {
                        "name": "sender",
                        "type": 59,
                        "typeName": "u32"
                      },
                      {
                        "name": "recipient",
                        "type": 59,
                        "typeName": "u32"
                      }
                    ],
                    "index": 9
                  },
                  {
                    "name": "ClearOrigin",
                    "index": 10
                  },
                  {
                    "name": "DescendOrigin",
                    "fields": [
                      {
                        "type": 57,
                        "typeName": "InteriorMultiLocation"
                      }
                    ],
                    "index": 11
                  },
                  {
                    "name": "ReportError",
                    "fields": [
                      {
                        "type": 384,
                        "typeName": "QueryResponseInfo"
                      }
                    ],
                    "index": 12
                  },
                  {
                    "name": "DepositAsset",
                    "fields": [
                      {
                        "name": "assets",
                        "type": 385,
                        "typeName": "MultiAssetFilter"
                      },
                      {
                        "name": "beneficiary",
                        "type": 56,
                        "typeName": "MultiLocation"
                      }
                    ],
                    "index": 13
                  },
                  {
                    "name": "DepositReserveAsset",
                    "fields": [
                      {
                        "name": "assets",
                        "type": 385,
                        "typeName": "MultiAssetFilter"
                      },
                      {
                        "name": "dest",
                        "type": 56,
                        "typeName": "MultiLocation"
                      },
                      {
                        "name": "xcm",
                        "type": 364,
                        "typeName": "Xcm<()>"
                      }
                    ],
                    "index": 14
                  },
                  {
                    "name": "ExchangeAsset",
                    "fields": [
                      {
                        "name": "give",
                        "type": 385,
                        "typeName": "MultiAssetFilter"
                      },
                      {
                        "name": "want",
                        "type": 367,
                        "typeName": "MultiAssets"
                      },
                      {
                        "name": "maximal",
                        "type": 8,
                        "typeName": "bool"
                      }
                    ],
                    "index": 15
                  },
                  {
                    "name": "InitiateReserveWithdraw",
                    "fields": [
                      {
                        "name": "assets",
                        "type": 385,
                        "typeName": "MultiAssetFilter"
                      },
                      {
                        "name": "reserve",
                        "type": 56,
                        "typeName": "MultiLocation"
                      },
                      {
                        "name": "xcm",
                        "type": 364,
                        "typeName": "Xcm<()>"
                      }
                    ],
                    "index": 16
                  },
                  {
                    "name": "InitiateTeleport",
                    "fields": [
                      {
                        "name": "assets",
                        "type": 385,
                        "typeName": "MultiAssetFilter"
                      },
                      {
                        "name": "dest",
                        "type": 56,
                        "typeName": "MultiLocation"
                      },
                      {
                        "name": "xcm",
                        "type": 364,
                        "typeName": "Xcm<()>"
                      }
                    ],
                    "index": 17
                  },
                  {
                    "name": "ReportHolding",
                    "fields": [
                      {
                        "name": "response_info",
                        "type": 384,
                        "typeName": "QueryResponseInfo"
                      },
                      {
                        "name": "assets",
                        "type": 385,
                        "typeName": "MultiAssetFilter"
                      }
                    ],
                    "index": 18
                  },
                  {
                    "name": "BuyExecution",
                    "fields": [
                      {
                        "name": "fees",
                        "type": 369,
                        "typeName": "MultiAsset"
                      },
                      {
                        "name": "weight_limit",
                        "type": 388,
                        "typeName": "WeightLimit"
                      }
                    ],
                    "index": 19
                  },
                  {
                    "name": "RefundSurplus",
                    "index": 20
                  },
                  {
                    "name": "SetErrorHandler",
                    "fields": [
                      {
                        "type": 364,
                        "typeName": "Xcm<Call>"
                      }
                    ],
                    "index": 21
                  },
                  {
                    "name": "SetAppendix",
                    "fields": [
                      {
                        "type": 364,
                        "typeName": "Xcm<Call>"
                      }
                    ],
                    "index": 22
                  },
                  {
                    "name": "ClearError",
                    "index": 23
                  },
                  {
                    "name": "ClaimAsset",
                    "fields": [
                      {
                        "name": "assets",
                        "type": 367,
                        "typeName": "MultiAssets"
                      },
                      {
                        "name": "ticket",
                        "type": 56,
                        "typeName": "MultiLocation"
                      }
                    ],
                    "index": 24
                  },
                  {
                    "name": "Trap",
                    "fields": [
                      {
                        "type": 11,
                        "typeName": "u64"
                      }
                    ],
                    "index": 25
                  },
                  {
                    "name": "SubscribeVersion",
                    "fields": [
                      {
                        "name": "query_id",
                        "type": 11,
                        "typeName": "QueryId"
                      },
                      {
                        "name": "max_response_weight",
                        "type": 10,
                        "typeName": "Weight"
                      }
                    ],
                    "index": 26
                  },
                  {
                    "name": "UnsubscribeVersion",
                    "index": 27
                  },
                  {
                    "name": "BurnAsset",
                    "fields": [
                      {
                        "type": 367,
                        "typeName": "MultiAssets"
                      }
                    ],
                    "index": 28
                  },
                  {
                    "name": "ExpectAsset",
                    "fields": [
                      {
                        "type": 367,
                        "typeName": "MultiAssets"
                      }
                    ],
                    "index": 29
                  },
                  {
                    "name": "ExpectOrigin",
                    "fields": [
                      {
                        "type": 382,
                        "typeName": "Option<MultiLocation>"
                      }
                    ],
                    "index": 30
                  },
                  {
                    "name": "ExpectError",
                    "fields": [
                      {
                        "type": 373,
                        "typeName": "Option<(u32, Error)>"
                      }
                    ],
                    "index": 31
                  },
                  {
                    "name": "ExpectTransactStatus",
                    "fields": [
                      {
                        "type": 380,
                        "typeName": "MaybeErrorCode"
                      }
                    ],
                    "index": 32
                  },
                  {
                    "name": "QueryPallet",
                    "fields": [
                      {
                        "name": "module_name",
                        "type": 14,
                        "typeName": "Vec<u8>"
                      },
                      {
                        "name": "response_info",
                        "type": 384,
                        "typeName": "QueryResponseInfo"
                      }
                    ],
                    "index": 33
                  },
                  {
                    "name": "ExpectPallet",
                    "fields": [
                      {
                        "name": "index",
                        "type": 59,
                        "typeName": "u32"
                      },
                      {
                        "name": "name",
                        "type": 14,
                        "typeName": "Vec<u8>"
                      },
                      {
                        "name": "module_name",
                        "type": 14,
                        "typeName": "Vec<u8>"
                      },
                      {
                        "name": "crate_major",
                        "type": 59,
                        "typeName": "u32"
                      },
                      {
                        "name": "min_crate_minor",
                        "type": 59,
                        "typeName": "u32"
                      }
                    ],
                    "index": 34
                  },
                  {
                    "name": "ReportTransactStatus",
                    "fields": [
                      {
                        "type": 384,
                        "typeName": "QueryResponseInfo"
                      }
                    ],
                    "index": 35
                  },
                  {
                    "name": "ClearTransactStatus",
                    "index": 36
                  },
                  {
                    "name": "UniversalOrigin",
                    "fields": [
                      {
                        "type": 58,
                        "typeName": "Junction"
                      }
                    ],
                    "index": 37
                  },
                  {
                    "name": "ExportMessage",
                    "fields": [
                      {
                        "name": "network",
                        "type": 61,
                        "typeName": "NetworkId"
                      },
                      {
                        "name": "destination",
                        "type": 57,
                        "typeName": "InteriorMultiLocation"
                      },
                      {
                        "name": "xcm",
                        "type": 364,
                        "typeName": "Xcm<()>"
                      }
                    ],
                    "index": 38
                  },
                  {
                    "name": "LockAsset",
                    "fields": [
                      {
                        "name": "asset",
                        "type": 369,
                        "typeName": "MultiAsset"
                      },
                      {
                        "name": "unlocker",
                        "type": 56,
                        "typeName": "MultiLocation"
                      }
                    ],
                    "index": 39
                  },
                  {
                    "name": "UnlockAsset",
                    "fields": [
                      {
                        "name": "asset",
                        "type": 369,
                        "typeName": "MultiAsset"
                      },
                      {
                        "name": "target",
                        "type": 56,
                        "typeName": "MultiLocation"
                      }
                    ],
                    "index": 40
                  },
                  {
                    "name": "NoteUnlockable",
                    "fields": [
                      {
                        "name": "asset",
                        "type": 369,
                        "typeName": "MultiAsset"
                      },
                      {
                        "name": "owner",
                        "type": 56,
                        "typeName": "MultiLocation"
                      }
                    ],
                    "index": 41
                  },
                  {
                    "name": "RequestUnlock",
                    "fields": [
                      {
                        "name": "asset",
                        "type": 369,
                        "typeName": "MultiAsset"
                      },
                      {
                        "name": "locker",
                        "type": 56,
                        "typeName": "MultiLocation"
                      }
                    ],
                    "index": 42
                  },
                  {
                    "name": "SetFeesMode",
                    "fields": [
                      {
                        "name": "jit_withdraw",
                        "type": 8,
                        "typeName": "bool"
                      }
                    ],
                    "index": 43
                  },
                  {
                    "name": "SetTopic",
                    "fields": [
                      {
                        "type": 1,
                        "typeName": "[u8; 32]"
                      }
                    ],
                    "index": 44
                  },
                  {
                    "name": "ClearTopic",
                    "index": 45
                  },
                  {
                    "name": "AliasOrigin",
                    "fields": [
                      {
                        "type": 56,
                        "typeName": "MultiLocation"
                      }
                    ],
                    "index": 46
                  },
                  {
                    "name": "UnpaidExecution",
                    "fields": [
                      {
                        "name": "weight_limit",
                        "type": 388,
                        "typeName": "WeightLimit"
                      },
                      {
                        "name": "check_origin",
                        "type": 382,
                        "typeName": "Option<MultiLocation>"
                      }
                    ],
                    "index": 47
                  }
                ]
              }
            }
          }
        },
        {
          "id": 367,
          "type": {
            "path": [
              "xcm",
              "v3",
              "multiasset",
              "MultiAssets"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 368,
                    "typeName": "Vec<MultiAsset>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 368,
          "type": {
            "def": {
              "sequence": {
                "type": 369
              }
            }
          }
        },
        {
          "id": 369,
          "type": {
            "path": [
              "xcm",
              "v3",
              "multiasset",
              "MultiAsset"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "id",
                    "type": 66,
                    "typeName": "AssetId"
                  },
                  {
                    "name": "fun",
                    "type": 370,
                    "typeName": "Fungibility"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 370,
          "type": {
            "path": [
              "xcm",
              "v3",
              "multiasset",
              "Fungibility"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Fungible",
                    "fields": [
                      {
                        "type": 63,
                        "typeName": "u128"
                      }
                    ],
                    "index": 0
                  },
                  {
                    "name": "NonFungible",
                    "fields": [
                      {
                        "type": 371,
                        "typeName": "AssetInstance"
                      }
                    ],
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 371,
          "type": {
            "path": [
              "xcm",
              "v3",
              "multiasset",
              "AssetInstance"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Undefined",
                    "index": 0
                  },
                  {
                    "name": "Index",
                    "fields": [
                      {
                        "type": 63,
                        "typeName": "u128"
                      }
                    ],
                    "index": 1
                  },
                  {
                    "name": "Array4",
                    "fields": [
                      {
                        "type": 18,
                        "typeName": "[u8; 4]"
                      }
                    ],
                    "index": 2
                  },
                  {
                    "name": "Array8",
                    "fields": [
                      {
                        "type": 353,
                        "typeName": "[u8; 8]"
                      }
                    ],
                    "index": 3
                  },
                  {
                    "name": "Array16",
                    "fields": [
                      {
                        "type": 48,
                        "typeName": "[u8; 16]"
                      }
                    ],
                    "index": 4
                  },
                  {
                    "name": "Array32",
                    "fields": [
                      {
                        "type": 1,
                        "typeName": "[u8; 32]"
                      }
                    ],
                    "index": 5
                  }
                ]
              }
            }
          }
        },
        {
          "id": 372,
          "type": {
            "path": [
              "xcm",
              "v3",
              "Response"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Null",
                    "index": 0
                  },
                  {
                    "name": "Assets",
                    "fields": [
                      {
                        "type": 367,
                        "typeName": "MultiAssets"
                      }
                    ],
                    "index": 1
                  },
                  {
                    "name": "ExecutionResult",
                    "fields": [
                      {
                        "type": 373,
                        "typeName": "Option<(u32, Error)>"
                      }
                    ],
                    "index": 2
                  },
                  {
                    "name": "Version",
                    "fields": [
                      {
                        "type": 4,
                        "typeName": "super::Version"
                      }
                    ],
                    "index": 3
                  },
                  {
                    "name": "PalletsInfo",
                    "fields": [
                      {
                        "type": 376,
                        "typeName": "BoundedVec<PalletInfo, MaxPalletsInfo>"
                      }
                    ],
                    "index": 4
                  },
                  {
                    "name": "DispatchResult",
                    "fields": [
                      {
                        "type": 380,
                        "typeName": "MaybeErrorCode"
                      }
                    ],
                    "index": 5
                  }
                ]
              }
            }
          }
        },
        {
          "id": 373,
          "type": {
            "path": [
              "Option"
            ],
            "params": [
              {
                "name": "T",
                "type": 374
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "None",
                    "index": 0
                  },
                  {
                    "name": "Some",
                    "fields": [
                      {
                        "type": 374
                      }
                    ],
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 374,
          "type": {
            "def": {
              "tuple": [
                4,
                375
              ]
            }
          }
        },
        {
          "id": 375,
          "type": {
            "path": [
              "xcm",
              "v3",
              "traits",
              "Error"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Overflow",
                    "index": 0
                  },
                  {
                    "name": "Unimplemented",
                    "index": 1
                  },
                  {
                    "name": "UntrustedReserveLocation",
                    "index": 2
                  },
                  {
                    "name": "UntrustedTeleportLocation",
                    "index": 3
                  },
                  {
                    "name": "LocationFull",
                    "index": 4
                  },
                  {
                    "name": "LocationNotInvertible",
                    "index": 5
                  },
                  {
                    "name": "BadOrigin",
                    "index": 6
                  },
                  {
                    "name": "InvalidLocation",
                    "index": 7
                  },
                  {
                    "name": "AssetNotFound",
                    "index": 8
                  },
                  {
                    "name": "FailedToTransactAsset",
                    "index": 9
                  },
                  {
                    "name": "NotWithdrawable",
                    "index": 10
                  },
                  {
                    "name": "LocationCannotHold",
                    "index": 11
                  },
                  {
                    "name": "ExceedsMaxMessageSize",
                    "index": 12
                  },
                  {
                    "name": "DestinationUnsupported",
                    "index": 13
                  },
                  {
                    "name": "Transport",
                    "index": 14
                  },
                  {
                    "name": "Unroutable",
                    "index": 15
                  },
                  {
                    "name": "UnknownClaim",
                    "index": 16
                  },
                  {
                    "name": "FailedToDecode",
                    "index": 17
                  },
                  {
                    "name": "MaxWeightInvalid",
                    "index": 18
                  },
                  {
                    "name": "NotHoldingFees",
                    "index": 19
                  },
                  {
                    "name": "TooExpensive",
                    "index": 20
                  },
                  {
                    "name": "Trap",
                    "fields": [
                      {
                        "type": 12,
                        "typeName": "u64"
                      }
                    ],
                    "index": 21
                  },
                  {
                    "name": "ExpectationFalse",
                    "index": 22
                  },
                  {
                    "name": "PalletNotFound",
                    "index": 23
                  },
                  {
                    "name": "NameMismatch",
                    "index": 24
                  },
                  {
                    "name": "VersionIncompatible",
                    "index": 25
                  },
                  {
                    "name": "HoldingWouldOverflow",
                    "index": 26
                  },
                  {
                    "name": "ExportError",
                    "index": 27
                  },
                  {
                    "name": "ReanchorFailed",
                    "index": 28
                  },
                  {
                    "name": "NoDeal",
                    "index": 29
                  },
                  {
                    "name": "FeesNotMet",
                    "index": 30
                  },
                  {
                    "name": "LockError",
                    "index": 31
                  },
                  {
                    "name": "NoPermission",
                    "index": 32
                  },
                  {
                    "name": "Unanchored",
                    "index": 33
                  },
                  {
                    "name": "NotDepositable",
                    "index": 34
                  },
                  {
                    "name": "UnhandledXcmVersion",
                    "index": 35
                  },
                  {
                    "name": "WeightLimitReached",
                    "fields": [
                      {
                        "type": 10,
                        "typeName": "Weight"
                      }
                    ],
                    "index": 36
                  },
                  {
                    "name": "Barrier",
                    "index": 37
                  },
                  {
                    "name": "WeightNotComputable",
                    "index": 38
                  },
                  {
                    "name": "ExceedsStackLimit",
                    "index": 39
                  }
                ]
              }
            }
          }
        },
        {
          "id": 376,
          "type": {
            "path": [
              "bounded_collections",
              "bounded_vec",
              "BoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 377
              },
              {
                "name": "S",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 379,
                    "typeName": "Vec<T>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 377,
          "type": {
            "path": [
              "xcm",
              "v3",
              "PalletInfo"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "index",
                    "type": 59,
                    "typeName": "u32"
                  },
                  {
                    "name": "name",
                    "type": 378,
                    "typeName": "BoundedVec<u8, MaxPalletNameLen>"
                  },
                  {
                    "name": "module_name",
                    "type": 378,
                    "typeName": "BoundedVec<u8, MaxPalletNameLen>"
                  },
                  {
                    "name": "major",
                    "type": 59,
                    "typeName": "u32"
                  },
                  {
                    "name": "minor",
                    "type": 59,
                    "typeName": "u32"
                  },
                  {
                    "name": "patch",
                    "type": 59,
                    "typeName": "u32"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 378,
          "type": {
            "path": [
              "bounded_collections",
              "bounded_vec",
              "BoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 2
              },
              {
                "name": "S",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 14,
                    "typeName": "Vec<T>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 379,
          "type": {
            "def": {
              "sequence": {
                "type": 377
              }
            }
          }
        },
        {
          "id": 380,
          "type": {
            "path": [
              "xcm",
              "v3",
              "MaybeErrorCode"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Success",
                    "index": 0
                  },
                  {
                    "name": "Error",
                    "fields": [
                      {
                        "type": 381,
                        "typeName": "BoundedVec<u8, MaxDispatchErrorLen>"
                      }
                    ],
                    "index": 1
                  },
                  {
                    "name": "TruncatedError",
                    "fields": [
                      {
                        "type": 381,
                        "typeName": "BoundedVec<u8, MaxDispatchErrorLen>"
                      }
                    ],
                    "index": 2
                  }
                ]
              }
            }
          }
        },
        {
          "id": 381,
          "type": {
            "path": [
              "bounded_collections",
              "bounded_vec",
              "BoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 2
              },
              {
                "name": "S",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 14,
                    "typeName": "Vec<T>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 382,
          "type": {
            "path": [
              "Option"
            ],
            "params": [
              {
                "name": "T",
                "type": 56
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "None",
                    "index": 0
                  },
                  {
                    "name": "Some",
                    "fields": [
                      {
                        "type": 56
                      }
                    ],
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 383,
          "type": {
            "path": [
              "xcm",
              "v3",
              "OriginKind"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Native",
                    "index": 0
                  },
                  {
                    "name": "SovereignAccount",
                    "index": 1
                  },
                  {
                    "name": "Superuser",
                    "index": 2
                  },
                  {
                    "name": "Xcm",
                    "index": 3
                  }
                ]
              }
            }
          }
        },
        {
          "id": 384,
          "type": {
            "path": [
              "xcm",
              "v3",
              "QueryResponseInfo"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "destination",
                    "type": 56,
                    "typeName": "MultiLocation"
                  },
                  {
                    "name": "query_id",
                    "type": 11,
                    "typeName": "QueryId"
                  },
                  {
                    "name": "max_weight",
                    "type": 10,
                    "typeName": "Weight"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 385,
          "type": {
            "path": [
              "xcm",
              "v3",
              "multiasset",
              "MultiAssetFilter"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Definite",
                    "fields": [
                      {
                        "type": 367,
                        "typeName": "MultiAssets"
                      }
                    ],
                    "index": 0
                  },
                  {
                    "name": "Wild",
                    "fields": [
                      {
                        "type": 386,
                        "typeName": "WildMultiAsset"
                      }
                    ],
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 386,
          "type": {
            "path": [
              "xcm",
              "v3",
              "multiasset",
              "WildMultiAsset"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "All",
                    "index": 0
                  },
                  {
                    "name": "AllOf",
                    "fields": [
                      {
                        "name": "id",
                        "type": 66,
                        "typeName": "AssetId"
                      },
                      {
                        "name": "fun",
                        "type": 387,
                        "typeName": "WildFungibility"
                      }
                    ],
                    "index": 1
                  },
                  {
                    "name": "AllCounted",
                    "fields": [
                      {
                        "type": 59,
                        "typeName": "u32"
                      }
                    ],
                    "index": 2
                  },
                  {
                    "name": "AllOfCounted",
                    "fields": [
                      {
                        "name": "id",
                        "type": 66,
                        "typeName": "AssetId"
                      },
                      {
                        "name": "fun",
                        "type": 387,
                        "typeName": "WildFungibility"
                      },
                      {
                        "name": "count",
                        "type": 59,
                        "typeName": "u32"
                      }
                    ],
                    "index": 3
                  }
                ]
              }
            }
          }
        },
        {
          "id": 387,
          "type": {
            "path": [
              "xcm",
              "v3",
              "multiasset",
              "WildFungibility"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Fungible",
                    "index": 0
                  },
                  {
                    "name": "NonFungible",
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 388,
          "type": {
            "path": [
              "xcm",
              "v3",
              "WeightLimit"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Unlimited",
                    "index": 0
                  },
                  {
                    "name": "Limited",
                    "fields": [
                      {
                        "type": 10,
                        "typeName": "Weight"
                      }
                    ],
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 389,
          "type": {
            "path": [
              "staging_xcm",
              "v4",
              "Xcm"
            ],
            "params": [
              {
                "name": "Call",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 390,
                    "typeName": "Vec<Instruction<Call>>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 390,
          "type": {
            "def": {
              "sequence": {
                "type": 391
              }
            }
          }
        },
        {
          "id": 391,
          "type": {
            "path": [
              "staging_xcm",
              "v4",
              "Instruction"
            ],
            "params": [
              {
                "name": "Call",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "WithdrawAsset",
                    "fields": [
                      {
                        "type": 392,
                        "typeName": "Assets"
                      }
                    ],
                    "index": 0
                  },
                  {
                    "name": "ReserveAssetDeposited",
                    "fields": [
                      {
                        "type": 392,
                        "typeName": "Assets"
                      }
                    ],
                    "index": 1
                  },
                  {
                    "name": "ReceiveTeleportedAsset",
                    "fields": [
                      {
                        "type": 392,
                        "typeName": "Assets"
                      }
                    ],
                    "index": 2
                  },
                  {
                    "name": "QueryResponse",
                    "fields": [
                      {
                        "name": "query_id",
                        "type": 11,
                        "typeName": "QueryId"
                      },
                      {
                        "name": "response",
                        "type": 397,
                        "typeName": "Response"
                      },
                      {
                        "name": "max_weight",
                        "type": 10,
                        "typeName": "Weight"
                      },
                      {
                        "name": "querier",
                        "type": 402,
                        "typeName": "Option<Location>"
                      }
                    ],
                    "index": 3
                  },
                  {
                    "name": "TransferAsset",
                    "fields": [
                      {
                        "name": "assets",
                        "type": 392,
                        "typeName": "Assets"
                      },
                      {
                        "name": "beneficiary",
                        "type": 67,
                        "typeName": "Location"
                      }
                    ],
                    "index": 4
                  },
                  {
                    "name": "TransferReserveAsset",
                    "fields": [
                      {
                        "name": "assets",
                        "type": 392,
                        "typeName": "Assets"
                      },
                      {
                        "name": "dest",
                        "type": 67,
                        "typeName": "Location"
                      },
                      {
                        "name": "xcm",
                        "type": 389,
                        "typeName": "Xcm<()>"
                      }
                    ],
                    "index": 5
                  },
                  {
                    "name": "Transact",
                    "fields": [
                      {
                        "name": "origin_kind",
                        "type": 383,
                        "typeName": "OriginKind"
                      },
                      {
                        "name": "require_weight_at_most",
                        "type": 10,
                        "typeName": "Weight"
                      },
                      {
                        "name": "call",
                        "type": 359,
                        "typeName": "DoubleEncoded<Call>"
                      }
                    ],
                    "index": 6
                  },
                  {
                    "name": "HrmpNewChannelOpenRequest",
                    "fields": [
                      {
                        "name": "sender",
                        "type": 59,
                        "typeName": "u32"
                      },
                      {
                        "name": "max_message_size",
                        "type": 59,
                        "typeName": "u32"
                      },
                      {
                        "name": "max_capacity",
                        "type": 59,
                        "typeName": "u32"
                      }
                    ],
                    "index": 7
                  },
                  {
                    "name": "HrmpChannelAccepted",
                    "fields": [
                      {
                        "name": "recipient",
                        "type": 59,
                        "typeName": "u32"
                      }
                    ],
                    "index": 8
                  },
                  {
                    "name": "HrmpChannelClosing",
                    "fields": [
                      {
                        "name": "initiator",
                        "type": 59,
                        "typeName": "u32"
                      },
                      {
                        "name": "sender",
                        "type": 59,
                        "typeName": "u32"
                      },
                      {
                        "name": "recipient",
                        "type": 59,
                        "typeName": "u32"
                      }
                    ],
                    "index": 9
                  },
                  {
                    "name": "ClearOrigin",
                    "index": 10
                  },
                  {
                    "name": "DescendOrigin",
                    "fields": [
                      {
                        "type": 68,
                        "typeName": "InteriorLocation"
                      }
                    ],
                    "index": 11
                  },
                  {
                    "name": "ReportError",
                    "fields": [
                      {
                        "type": 403,
                        "typeName": "QueryResponseInfo"
                      }
                    ],
                    "index": 12
                  },
                  {
                    "name": "DepositAsset",
                    "fields": [
                      {
                        "name": "assets",
                        "type": 404,
                        "typeName": "AssetFilter"
                      },
                      {
                        "name": "beneficiary",
                        "type": 67,
                        "typeName": "Location"
                      }
                    ],
                    "index": 13
                  },
                  {
                    "name": "DepositReserveAsset",
                    "fields": [
                      {
                        "name": "assets",
                        "type": 404,
                        "typeName": "AssetFilter"
                      },
                      {
                        "name": "dest",
                        "type": 67,
                        "typeName": "Location"
                      },
                      {
                        "name": "xcm",
                        "type": 389,
                        "typeName": "Xcm<()>"
                      }
                    ],
                    "index": 14
                  },
                  {
                    "name": "ExchangeAsset",
                    "fields": [
                      {
                        "name": "give",
                        "type": 404,
                        "typeName": "AssetFilter"
                      },
                      {
                        "name": "want",
                        "type": 392,
                        "typeName": "Assets"
                      },
                      {
                        "name": "maximal",
                        "type": 8,
                        "typeName": "bool"
                      }
                    ],
                    "index": 15
                  },
                  {
                    "name": "InitiateReserveWithdraw",
                    "fields": [
                      {
                        "name": "assets",
                        "type": 404,
                        "typeName": "AssetFilter"
                      },
                      {
                        "name": "reserve",
                        "type": 67,
                        "typeName": "Location"
                      },
                      {
                        "name": "xcm",
                        "type": 389,
                        "typeName": "Xcm<()>"
                      }
                    ],
                    "index": 16
                  },
                  {
                    "name": "InitiateTeleport",
                    "fields": [
                      {
                        "name": "assets",
                        "type": 404,
                        "typeName": "AssetFilter"
                      },
                      {
                        "name": "dest",
                        "type": 67,
                        "typeName": "Location"
                      },
                      {
                        "name": "xcm",
                        "type": 389,
                        "typeName": "Xcm<()>"
                      }
                    ],
                    "index": 17
                  },
                  {
                    "name": "ReportHolding",
                    "fields": [
                      {
                        "name": "response_info",
                        "type": 403,
                        "typeName": "QueryResponseInfo"
                      },
                      {
                        "name": "assets",
                        "type": 404,
                        "typeName": "AssetFilter"
                      }
                    ],
                    "index": 18
                  },
                  {
                    "name": "BuyExecution",
                    "fields": [
                      {
                        "name": "fees",
                        "type": 394,
                        "typeName": "Asset"
                      },
                      {
                        "name": "weight_limit",
                        "type": 388,
                        "typeName": "WeightLimit"
                      }
                    ],
                    "index": 19
                  },
                  {
                    "name": "RefundSurplus",
                    "index": 20
                  },
                  {
                    "name": "SetErrorHandler",
                    "fields": [
                      {
                        "type": 389,
                        "typeName": "Xcm<Call>"
                      }
                    ],
                    "index": 21
                  },
                  {
                    "name": "SetAppendix",
                    "fields": [
                      {
                        "type": 389,
                        "typeName": "Xcm<Call>"
                      }
                    ],
                    "index": 22
                  },
                  {
                    "name": "ClearError",
                    "index": 23
                  },
                  {
                    "name": "ClaimAsset",
                    "fields": [
                      {
                        "name": "assets",
                        "type": 392,
                        "typeName": "Assets"
                      },
                      {
                        "name": "ticket",
                        "type": 67,
                        "typeName": "Location"
                      }
                    ],
                    "index": 24
                  },
                  {
                    "name": "Trap",
                    "fields": [
                      {
                        "type": 11,
                        "typeName": "u64"
                      }
                    ],
                    "index": 25
                  },
                  {
                    "name": "SubscribeVersion",
                    "fields": [
                      {
                        "name": "query_id",
                        "type": 11,
                        "typeName": "QueryId"
                      },
                      {
                        "name": "max_response_weight",
                        "type": 10,
                        "typeName": "Weight"
                      }
                    ],
                    "index": 26
                  },
                  {
                    "name": "UnsubscribeVersion",
                    "index": 27
                  },
                  {
                    "name": "BurnAsset",
                    "fields": [
                      {
                        "type": 392,
                        "typeName": "Assets"
                      }
                    ],
                    "index": 28
                  },
                  {
                    "name": "ExpectAsset",
                    "fields": [
                      {
                        "type": 392,
                        "typeName": "Assets"
                      }
                    ],
                    "index": 29
                  },
                  {
                    "name": "ExpectOrigin",
                    "fields": [
                      {
                        "type": 402,
                        "typeName": "Option<Location>"
                      }
                    ],
                    "index": 30
                  },
                  {
                    "name": "ExpectError",
                    "fields": [
                      {
                        "type": 373,
                        "typeName": "Option<(u32, Error)>"
                      }
                    ],
                    "index": 31
                  },
                  {
                    "name": "ExpectTransactStatus",
                    "fields": [
                      {
                        "type": 380,
                        "typeName": "MaybeErrorCode"
                      }
                    ],
                    "index": 32
                  },
                  {
                    "name": "QueryPallet",
                    "fields": [
                      {
                        "name": "module_name",
                        "type": 14,
                        "typeName": "Vec<u8>"
                      },
                      {
                        "name": "response_info",
                        "type": 403,
                        "typeName": "QueryResponseInfo"
                      }
                    ],
                    "index": 33
                  },
                  {
                    "name": "ExpectPallet",
                    "fields": [
                      {
                        "name": "index",
                        "type": 59,
                        "typeName": "u32"
                      },
                      {
                        "name": "name",
                        "type": 14,
                        "typeName": "Vec<u8>"
                      },
                      {
                        "name": "module_name",
                        "type": 14,
                        "typeName": "Vec<u8>"
                      },
                      {
                        "name": "crate_major",
                        "type": 59,
                        "typeName": "u32"
                      },
                      {
                        "name": "min_crate_minor",
                        "type": 59,
                        "typeName": "u32"
                      }
                    ],
                    "index": 34
                  },
                  {
                    "name": "ReportTransactStatus",
                    "fields": [
                      {
                        "type": 403,
                        "typeName": "QueryResponseInfo"
                      }
                    ],
                    "index": 35
                  },
                  {
                    "name": "ClearTransactStatus",
                    "index": 36
                  },
                  {
                    "name": "UniversalOrigin",
                    "fields": [
                      {
                        "type": 70,
                        "typeName": "Junction"
                      }
                    ],
                    "index": 37
                  },
                  {
                    "name": "ExportMessage",
                    "fields": [
                      {
                        "name": "network",
                        "type": 72,
                        "typeName": "NetworkId"
                      },
                      {
                        "name": "destination",
                        "type": 68,
                        "typeName": "InteriorLocation"
                      },
                      {
                        "name": "xcm",
                        "type": 389,
                        "typeName": "Xcm<()>"
                      }
                    ],
                    "index": 38
                  },
                  {
                    "name": "LockAsset",
                    "fields": [
                      {
                        "name": "asset",
                        "type": 394,
                        "typeName": "Asset"
                      },
                      {
                        "name": "unlocker",
                        "type": 67,
                        "typeName": "Location"
                      }
                    ],
                    "index": 39
                  },
                  {
                    "name": "UnlockAsset",
                    "fields": [
                      {
                        "name": "asset",
                        "type": 394,
                        "typeName": "Asset"
                      },
                      {
                        "name": "target",
                        "type": 67,
                        "typeName": "Location"
                      }
                    ],
                    "index": 40
                  },
                  {
                    "name": "NoteUnlockable",
                    "fields": [
                      {
                        "name": "asset",
                        "type": 394,
                        "typeName": "Asset"
                      },
                      {
                        "name": "owner",
                        "type": 67,
                        "typeName": "Location"
                      }
                    ],
                    "index": 41
                  },
                  {
                    "name": "RequestUnlock",
                    "fields": [
                      {
                        "name": "asset",
                        "type": 394,
                        "typeName": "Asset"
                      },
                      {
                        "name": "locker",
                        "type": 67,
                        "typeName": "Location"
                      }
                    ],
                    "index": 42
                  },
                  {
                    "name": "SetFeesMode",
                    "fields": [
                      {
                        "name": "jit_withdraw",
                        "type": 8,
                        "typeName": "bool"
                      }
                    ],
                    "index": 43
                  },
                  {
                    "name": "SetTopic",
                    "fields": [
                      {
                        "type": 1,
                        "typeName": "[u8; 32]"
                      }
                    ],
                    "index": 44
                  },
                  {
                    "name": "ClearTopic",
                    "index": 45
                  },
                  {
                    "name": "AliasOrigin",
                    "fields": [
                      {
                        "type": 67,
                        "typeName": "Location"
                      }
                    ],
                    "index": 46
                  },
                  {
                    "name": "UnpaidExecution",
                    "fields": [
                      {
                        "name": "weight_limit",
                        "type": 388,
                        "typeName": "WeightLimit"
                      },
                      {
                        "name": "check_origin",
                        "type": 402,
                        "typeName": "Option<Location>"
                      }
                    ],
                    "index": 47
                  }
                ]
              }
            }
          }
        },
        {
          "id": 392,
          "type": {
            "path": [
              "staging_xcm",
              "v4",
              "asset",
              "Assets"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 393,
                    "typeName": "Vec<Asset>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 393,
          "type": {
            "def": {
              "sequence": {
                "type": 394
              }
            }
          }
        },
        {
          "id": 394,
          "type": {
            "path": [
              "staging_xcm",
              "v4",
              "asset",
              "Asset"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "id",
                    "type": 80,
                    "typeName": "AssetId"
                  },
                  {
                    "name": "fun",
                    "type": 395,
                    "typeName": "Fungibility"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 395,
          "type": {
            "path": [
              "staging_xcm",
              "v4",
              "asset",
              "Fungibility"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Fungible",
                    "fields": [
                      {
                        "type": 63,
                        "typeName": "u128"
                      }
                    ],
                    "index": 0
                  },
                  {
                    "name": "NonFungible",
                    "fields": [
                      {
                        "type": 396,
                        "typeName": "AssetInstance"
                      }
                    ],
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 396,
          "type": {
            "path": [
              "staging_xcm",
              "v4",
              "asset",
              "AssetInstance"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Undefined",
                    "index": 0
                  },
                  {
                    "name": "Index",
                    "fields": [
                      {
                        "type": 63,
                        "typeName": "u128"
                      }
                    ],
                    "index": 1
                  },
                  {
                    "name": "Array4",
                    "fields": [
                      {
                        "type": 18,
                        "typeName": "[u8; 4]"
                      }
                    ],
                    "index": 2
                  },
                  {
                    "name": "Array8",
                    "fields": [
                      {
                        "type": 353,
                        "typeName": "[u8; 8]"
                      }
                    ],
                    "index": 3
                  },
                  {
                    "name": "Array16",
                    "fields": [
                      {
                        "type": 48,
                        "typeName": "[u8; 16]"
                      }
                    ],
                    "index": 4
                  },
                  {
                    "name": "Array32",
                    "fields": [
                      {
                        "type": 1,
                        "typeName": "[u8; 32]"
                      }
                    ],
                    "index": 5
                  }
                ]
              }
            }
          }
        },
        {
          "id": 397,
          "type": {
            "path": [
              "staging_xcm",
              "v4",
              "Response"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Null",
                    "index": 0
                  },
                  {
                    "name": "Assets",
                    "fields": [
                      {
                        "type": 392,
                        "typeName": "Assets"
                      }
                    ],
                    "index": 1
                  },
                  {
                    "name": "ExecutionResult",
                    "fields": [
                      {
                        "type": 373,
                        "typeName": "Option<(u32, Error)>"
                      }
                    ],
                    "index": 2
                  },
                  {
                    "name": "Version",
                    "fields": [
                      {
                        "type": 4,
                        "typeName": "super::Version"
                      }
                    ],
                    "index": 3
                  },
                  {
                    "name": "PalletsInfo",
                    "fields": [
                      {
                        "type": 398,
                        "typeName": "BoundedVec<PalletInfo, MaxPalletsInfo>"
                      }
                    ],
                    "index": 4
                  },
                  {
                    "name": "DispatchResult",
                    "fields": [
                      {
                        "type": 380,
                        "typeName": "MaybeErrorCode"
                      }
                    ],
                    "index": 5
                  }
                ]
              }
            }
          }
        },
        {
          "id": 398,
          "type": {
            "path": [
              "bounded_collections",
              "bounded_vec",
              "BoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 399
              },
              {
                "name": "S",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 401,
                    "typeName": "Vec<T>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 399,
          "type": {
            "path": [
              "staging_xcm",
              "v4",
              "PalletInfo"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "index",
                    "type": 59,
                    "typeName": "u32"
                  },
                  {
                    "name": "name",
                    "type": 400,
                    "typeName": "BoundedVec<u8, MaxPalletNameLen>"
                  },
                  {
                    "name": "module_name",
                    "type": 400,
                    "typeName": "BoundedVec<u8, MaxPalletNameLen>"
                  },
                  {
                    "name": "major",
                    "type": 59,
                    "typeName": "u32"
                  },
                  {
                    "name": "minor",
                    "type": 59,
                    "typeName": "u32"
                  },
                  {
                    "name": "patch",
                    "type": 59,
                    "typeName": "u32"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 400,
          "type": {
            "path": [
              "bounded_collections",
              "bounded_vec",
              "BoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 2
              },
              {
                "name": "S",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 14,
                    "typeName": "Vec<T>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 401,
          "type": {
            "def": {
              "sequence": {
                "type": 399
              }
            }
          }
        },
        {
          "id": 402,
          "type": {
            "path": [
              "Option"
            ],
            "params": [
              {
                "name": "T",
                "type": 67
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "None",
                    "index": 0
                  },
                  {
                    "name": "Some",
                    "fields": [
                      {
                        "type": 67
                      }
                    ],
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 403,
          "type": {
            "path": [
              "staging_xcm",
              "v4",
              "QueryResponseInfo"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "destination",
                    "type": 67,
                    "typeName": "Location"
                  },
                  {
                    "name": "query_id",
                    "type": 11,
                    "typeName": "QueryId"
                  },
                  {
                    "name": "max_weight",
                    "type": 10,
                    "typeName": "Weight"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 404,
          "type": {
            "path": [
              "staging_xcm",
              "v4",
              "asset",
              "AssetFilter"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Definite",
                    "fields": [
                      {
                        "type": 392,
                        "typeName": "Assets"
                      }
                    ],
                    "index": 0
                  },
                  {
                    "name": "Wild",
                    "fields": [
                      {
                        "type": 405,
                        "typeName": "WildAsset"
                      }
                    ],
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 405,
          "type": {
            "path": [
              "staging_xcm",
              "v4",
              "asset",
              "WildAsset"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "All",
                    "index": 0
                  },
                  {
                    "name": "AllOf",
                    "fields": [
                      {
                        "name": "id",
                        "type": 80,
                        "typeName": "AssetId"
                      },
                      {
                        "name": "fun",
                        "type": 406,
                        "typeName": "WildFungibility"
                      }
                    ],
                    "index": 1
                  },
                  {
                    "name": "AllCounted",
                    "fields": [
                      {
                        "type": 59,
                        "typeName": "u32"
                      }
                    ],
                    "index": 2
                  },
                  {
                    "name": "AllOfCounted",
                    "fields": [
                      {
                        "name": "id",
                        "type": 80,
                        "typeName": "AssetId"
                      },
                      {
                        "name": "fun",
                        "type": 406,
                        "typeName": "WildFungibility"
                      },
                      {
                        "name": "count",
                        "type": 59,
                        "typeName": "u32"
                      }
                    ],
                    "index": 3
                  }
                ]
              }
            }
          }
        },
        {
          "id": 406,
          "type": {
            "path": [
              "staging_xcm",
              "v4",
              "asset",
              "WildFungibility"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Fungible",
                    "index": 0
                  },
                  {
                    "name": "NonFungible",
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 407,
          "type": {
            "path": [
              "xcm",
              "VersionedAssets"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "V2",
                    "fields": [
                      {
                        "type": 347,
                        "typeName": "v2::MultiAssets"
                      }
                    ],
                    "index": 1
                  },
                  {
                    "name": "V3",
                    "fields": [
                      {
                        "type": 367,
                        "typeName": "v3::MultiAssets"
                      }
                    ],
                    "index": 3
                  },
                  {
                    "name": "V4",
                    "fields": [
                      {
                        "type": 392,
                        "typeName": "v4::Assets"
                      }
                    ],
                    "index": 4
                  }
                ]
              }
            }
          }
        },
        {
          "id": 408,
          "type": {
            "path": [
              "xcm",
              "VersionedXcm"
            ],
            "params": [
              {
                "name": "RuntimeCall",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "V2",
                    "fields": [
                      {
                        "type": 409,
                        "typeName": "v2::Xcm<RuntimeCall>"
                      }
                    ],
                    "index": 2
                  },
                  {
                    "name": "V3",
                    "fields": [
                      {
                        "type": 413,
                        "typeName": "v3::Xcm<RuntimeCall>"
                      }
                    ],
                    "index": 3
                  },
                  {
                    "name": "V4",
                    "fields": [
                      {
                        "type": 416,
                        "typeName": "v4::Xcm<RuntimeCall>"
                      }
                    ],
                    "index": 4
                  }
                ]
              }
            }
          }
        },
        {
          "id": 409,
          "type": {
            "path": [
              "xcm",
              "v2",
              "Xcm"
            ],
            "params": [
              {
                "name": "RuntimeCall",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 410,
                    "typeName": "Vec<Instruction<RuntimeCall>>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 410,
          "type": {
            "def": {
              "sequence": {
                "type": 411
              }
            }
          }
        },
        {
          "id": 411,
          "type": {
            "path": [
              "xcm",
              "v2",
              "Instruction"
            ],
            "params": [
              {
                "name": "RuntimeCall",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "WithdrawAsset",
                    "fields": [
                      {
                        "type": 347,
                        "typeName": "MultiAssets"
                      }
                    ],
                    "index": 0
                  },
                  {
                    "name": "ReserveAssetDeposited",
                    "fields": [
                      {
                        "type": 347,
                        "typeName": "MultiAssets"
                      }
                    ],
                    "index": 1
                  },
                  {
                    "name": "ReceiveTeleportedAsset",
                    "fields": [
                      {
                        "type": 347,
                        "typeName": "MultiAssets"
                      }
                    ],
                    "index": 2
                  },
                  {
                    "name": "QueryResponse",
                    "fields": [
                      {
                        "name": "query_id",
                        "type": 11,
                        "typeName": "QueryId"
                      },
                      {
                        "name": "response",
                        "type": 354,
                        "typeName": "Response"
                      },
                      {
                        "name": "max_weight",
                        "type": 11,
                        "typeName": "u64"
                      }
                    ],
                    "index": 3
                  },
                  {
                    "name": "TransferAsset",
                    "fields": [
                      {
                        "name": "assets",
                        "type": 347,
                        "typeName": "MultiAssets"
                      },
                      {
                        "name": "beneficiary",
                        "type": 82,
                        "typeName": "MultiLocation"
                      }
                    ],
                    "index": 4
                  },
                  {
                    "name": "TransferReserveAsset",
                    "fields": [
                      {
                        "name": "assets",
                        "type": 347,
                        "typeName": "MultiAssets"
                      },
                      {
                        "name": "dest",
                        "type": 82,
                        "typeName": "MultiLocation"
                      },
                      {
                        "name": "xcm",
                        "type": 344,
                        "typeName": "Xcm<()>"
                      }
                    ],
                    "index": 5
                  },
                  {
                    "name": "Transact",
                    "fields": [
                      {
                        "name": "origin_type",
                        "type": 358,
                        "typeName": "OriginKind"
                      },
                      {
                        "name": "require_weight_at_most",
                        "type": 11,
                        "typeName": "u64"
                      },
                      {
                        "name": "call",
                        "type": 412,
                        "typeName": "DoubleEncoded<RuntimeCall>"
                      }
                    ],
                    "index": 6
                  },
                  {
                    "name": "HrmpNewChannelOpenRequest",
                    "fields": [
                      {
                        "name": "sender",
                        "type": 59,
                        "typeName": "u32"
                      },
                      {
                        "name": "max_message_size",
                        "type": 59,
                        "typeName": "u32"
                      },
                      {
                        "name": "max_capacity",
                        "type": 59,
                        "typeName": "u32"
                      }
                    ],
                    "index": 7
                  },
                  {
                    "name": "HrmpChannelAccepted",
                    "fields": [
                      {
                        "name": "recipient",
                        "type": 59,
                        "typeName": "u32"
                      }
                    ],
                    "index": 8
                  },
                  {
                    "name": "HrmpChannelClosing",
                    "fields": [
                      {
                        "name": "initiator",
                        "type": 59,
                        "typeName": "u32"
                      },
                      {
                        "name": "sender",
                        "type": 59,
                        "typeName": "u32"
                      },
                      {
                        "name": "recipient",
                        "type": 59,
                        "typeName": "u32"
                      }
                    ],
                    "index": 9
                  },
                  {
                    "name": "ClearOrigin",
                    "index": 10
                  },
                  {
                    "name": "DescendOrigin",
                    "fields": [
                      {
                        "type": 83,
                        "typeName": "InteriorMultiLocation"
                      }
                    ],
                    "index": 11
                  },
                  {
                    "name": "ReportError",
                    "fields": [
                      {
                        "name": "query_id",
                        "type": 11,
                        "typeName": "QueryId"
                      },
                      {
                        "name": "dest",
                        "type": 82,
                        "typeName": "MultiLocation"
                      },
                      {
                        "name": "max_response_weight",
                        "type": 11,
                        "typeName": "u64"
                      }
                    ],
                    "index": 12
                  },
                  {
                    "name": "DepositAsset",
                    "fields": [
                      {
                        "name": "assets",
                        "type": 360,
                        "typeName": "MultiAssetFilter"
                      },
                      {
                        "name": "max_assets",
                        "type": 59,
                        "typeName": "u32"
                      },
                      {
                        "name": "beneficiary",
                        "type": 82,
                        "typeName": "MultiLocation"
                      }
                    ],
                    "index": 13
                  },
                  {
                    "name": "DepositReserveAsset",
                    "fields": [
                      {
                        "name": "assets",
                        "type": 360,
                        "typeName": "MultiAssetFilter"
                      },
                      {
                        "name": "max_assets",
                        "type": 59,
                        "typeName": "u32"
                      },
                      {
                        "name": "dest",
                        "type": 82,
                        "typeName": "MultiLocation"
                      },
                      {
                        "name": "xcm",
                        "type": 344,
                        "typeName": "Xcm<()>"
                      }
                    ],
                    "index": 14
                  },
                  {
                    "name": "ExchangeAsset",
                    "fields": [
                      {
                        "name": "give",
                        "type": 360,
                        "typeName": "MultiAssetFilter"
                      },
                      {
                        "name": "receive",
                        "type": 347,
                        "typeName": "MultiAssets"
                      }
                    ],
                    "index": 15
                  },
                  {
                    "name": "InitiateReserveWithdraw",
                    "fields": [
                      {
                        "name": "assets",
                        "type": 360,
                        "typeName": "MultiAssetFilter"
                      },
                      {
                        "name": "reserve",
                        "type": 82,
                        "typeName": "MultiLocation"
                      },
                      {
                        "name": "xcm",
                        "type": 344,
                        "typeName": "Xcm<()>"
                      }
                    ],
                    "index": 16
                  },
                  {
                    "name": "InitiateTeleport",
                    "fields": [
                      {
                        "name": "assets",
                        "type": 360,
                        "typeName": "MultiAssetFilter"
                      },
                      {
                        "name": "dest",
                        "type": 82,
                        "typeName": "MultiLocation"
                      },
                      {
                        "name": "xcm",
                        "type": 344,
                        "typeName": "Xcm<()>"
                      }
                    ],
                    "index": 17
                  },
                  {
                    "name": "QueryHolding",
                    "fields": [
                      {
                        "name": "query_id",
                        "type": 11,
                        "typeName": "QueryId"
                      },
                      {
                        "name": "dest",
                        "type": 82,
                        "typeName": "MultiLocation"
                      },
                      {
                        "name": "assets",
                        "type": 360,
                        "typeName": "MultiAssetFilter"
                      },
                      {
                        "name": "max_response_weight",
                        "type": 11,
                        "typeName": "u64"
                      }
                    ],
                    "index": 18
                  },
                  {
                    "name": "BuyExecution",
                    "fields": [
                      {
                        "name": "fees",
                        "type": 349,
                        "typeName": "MultiAsset"
                      },
                      {
                        "name": "weight_limit",
                        "type": 363,
                        "typeName": "WeightLimit"
                      }
                    ],
                    "index": 19
                  },
                  {
                    "name": "RefundSurplus",
                    "index": 20
                  },
                  {
                    "name": "SetErrorHandler",
                    "fields": [
                      {
                        "type": 409,
                        "typeName": "Xcm<RuntimeCall>"
                      }
                    ],
                    "index": 21
                  },
                  {
                    "name": "SetAppendix",
                    "fields": [
                      {
                        "type": 409,
                        "typeName": "Xcm<RuntimeCall>"
                      }
                    ],
                    "index": 22
                  },
                  {
                    "name": "ClearError",
                    "index": 23
                  },
                  {
                    "name": "ClaimAsset",
                    "fields": [
                      {
                        "name": "assets",
                        "type": 347,
                        "typeName": "MultiAssets"
                      },
                      {
                        "name": "ticket",
                        "type": 82,
                        "typeName": "MultiLocation"
                      }
                    ],
                    "index": 24
                  },
                  {
                    "name": "Trap",
                    "fields": [
                      {
                        "type": 11,
                        "typeName": "u64"
                      }
                    ],
                    "index": 25
                  },
                  {
                    "name": "SubscribeVersion",
                    "fields": [
                      {
                        "name": "query_id",
                        "type": 11,
                        "typeName": "QueryId"
                      },
                      {
                        "name": "max_response_weight",
                        "type": 11,
                        "typeName": "u64"
                      }
                    ],
                    "index": 26
                  },
                  {
                    "name": "UnsubscribeVersion",
                    "index": 27
                  }
                ]
              }
            }
          }
        },
        {
          "id": 412,
          "type": {
            "path": [
              "xcm",
              "double_encoded",
              "DoubleEncoded"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "encoded",
                    "type": 14,
                    "typeName": "Vec<u8>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 413,
          "type": {
            "path": [
              "xcm",
              "v3",
              "Xcm"
            ],
            "params": [
              {
                "name": "Call",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 414,
                    "typeName": "Vec<Instruction<Call>>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 414,
          "type": {
            "def": {
              "sequence": {
                "type": 415
              }
            }
          }
        },
        {
          "id": 415,
          "type": {
            "path": [
              "xcm",
              "v3",
              "Instruction"
            ],
            "params": [
              {
                "name": "Call",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "WithdrawAsset",
                    "fields": [
                      {
                        "type": 367,
                        "typeName": "MultiAssets"
                      }
                    ],
                    "index": 0
                  },
                  {
                    "name": "ReserveAssetDeposited",
                    "fields": [
                      {
                        "type": 367,
                        "typeName": "MultiAssets"
                      }
                    ],
                    "index": 1
                  },
                  {
                    "name": "ReceiveTeleportedAsset",
                    "fields": [
                      {
                        "type": 367,
                        "typeName": "MultiAssets"
                      }
                    ],
                    "index": 2
                  },
                  {
                    "name": "QueryResponse",
                    "fields": [
                      {
                        "name": "query_id",
                        "type": 11,
                        "typeName": "QueryId"
                      },
                      {
                        "name": "response",
                        "type": 372,
                        "typeName": "Response"
                      },
                      {
                        "name": "max_weight",
                        "type": 10,
                        "typeName": "Weight"
                      },
                      {
                        "name": "querier",
                        "type": 382,
                        "typeName": "Option<MultiLocation>"
                      }
                    ],
                    "index": 3
                  },
                  {
                    "name": "TransferAsset",
                    "fields": [
                      {
                        "name": "assets",
                        "type": 367,
                        "typeName": "MultiAssets"
                      },
                      {
                        "name": "beneficiary",
                        "type": 56,
                        "typeName": "MultiLocation"
                      }
                    ],
                    "index": 4
                  },
                  {
                    "name": "TransferReserveAsset",
                    "fields": [
                      {
                        "name": "assets",
                        "type": 367,
                        "typeName": "MultiAssets"
                      },
                      {
                        "name": "dest",
                        "type": 56,
                        "typeName": "MultiLocation"
                      },
                      {
                        "name": "xcm",
                        "type": 364,
                        "typeName": "Xcm<()>"
                      }
                    ],
                    "index": 5
                  },
                  {
                    "name": "Transact",
                    "fields": [
                      {
                        "name": "origin_kind",
                        "type": 383,
                        "typeName": "OriginKind"
                      },
                      {
                        "name": "require_weight_at_most",
                        "type": 10,
                        "typeName": "Weight"
                      },
                      {
                        "name": "call",
                        "type": 412,
                        "typeName": "DoubleEncoded<Call>"
                      }
                    ],
                    "index": 6
                  },
                  {
                    "name": "HrmpNewChannelOpenRequest",
                    "fields": [
                      {
                        "name": "sender",
                        "type": 59,
                        "typeName": "u32"
                      },
                      {
                        "name": "max_message_size",
                        "type": 59,
                        "typeName": "u32"
                      },
                      {
                        "name": "max_capacity",
                        "type": 59,
                        "typeName": "u32"
                      }
                    ],
                    "index": 7
                  },
                  {
                    "name": "HrmpChannelAccepted",
                    "fields": [
                      {
                        "name": "recipient",
                        "type": 59,
                        "typeName": "u32"
                      }
                    ],
                    "index": 8
                  },
                  {
                    "name": "HrmpChannelClosing",
                    "fields": [
                      {
                        "name": "initiator",
                        "type": 59,
                        "typeName": "u32"
                      },
                      {
                        "name": "sender",
                        "type": 59,
                        "typeName": "u32"
                      },
                      {
                        "name": "recipient",
                        "type": 59,
                        "typeName": "u32"
                      }
                    ],
                    "index": 9
                  },
                  {
                    "name": "ClearOrigin",
                    "index": 10
                  },
                  {
                    "name": "DescendOrigin",
                    "fields": [
                      {
                        "type": 57,
                        "typeName": "InteriorMultiLocation"
                      }
                    ],
                    "index": 11
                  },
                  {
                    "name": "ReportError",
                    "fields": [
                      {
                        "type": 384,
                        "typeName": "QueryResponseInfo"
                      }
                    ],
                    "index": 12
                  },
                  {
                    "name": "DepositAsset",
                    "fields": [
                      {
                        "name": "assets",
                        "type": 385,
                        "typeName": "MultiAssetFilter"
                      },
                      {
                        "name": "beneficiary",
                        "type": 56,
                        "typeName": "MultiLocation"
                      }
                    ],
                    "index": 13
                  },
                  {
                    "name": "DepositReserveAsset",
                    "fields": [
                      {
                        "name": "assets",
                        "type": 385,
                        "typeName": "MultiAssetFilter"
                      },
                      {
                        "name": "dest",
                        "type": 56,
                        "typeName": "MultiLocation"
                      },
                      {
                        "name": "xcm",
                        "type": 364,
                        "typeName": "Xcm<()>"
                      }
                    ],
                    "index": 14
                  },
                  {
                    "name": "ExchangeAsset",
                    "fields": [
                      {
                        "name": "give",
                        "type": 385,
                        "typeName": "MultiAssetFilter"
                      },
                      {
                        "name": "want",
                        "type": 367,
                        "typeName": "MultiAssets"
                      },
                      {
                        "name": "maximal",
                        "type": 8,
                        "typeName": "bool"
                      }
                    ],
                    "index": 15
                  },
                  {
                    "name": "InitiateReserveWithdraw",
                    "fields": [
                      {
                        "name": "assets",
                        "type": 385,
                        "typeName": "MultiAssetFilter"
                      },
                      {
                        "name": "reserve",
                        "type": 56,
                        "typeName": "MultiLocation"
                      },
                      {
                        "name": "xcm",
                        "type": 364,
                        "typeName": "Xcm<()>"
                      }
                    ],
                    "index": 16
                  },
                  {
                    "name": "InitiateTeleport",
                    "fields": [
                      {
                        "name": "assets",
                        "type": 385,
                        "typeName": "MultiAssetFilter"
                      },
                      {
                        "name": "dest",
                        "type": 56,
                        "typeName": "MultiLocation"
                      },
                      {
                        "name": "xcm",
                        "type": 364,
                        "typeName": "Xcm<()>"
                      }
                    ],
                    "index": 17
                  },
                  {
                    "name": "ReportHolding",
                    "fields": [
                      {
                        "name": "response_info",
                        "type": 384,
                        "typeName": "QueryResponseInfo"
                      },
                      {
                        "name": "assets",
                        "type": 385,
                        "typeName": "MultiAssetFilter"
                      }
                    ],
                    "index": 18
                  },
                  {
                    "name": "BuyExecution",
                    "fields": [
                      {
                        "name": "fees",
                        "type": 369,
                        "typeName": "MultiAsset"
                      },
                      {
                        "name": "weight_limit",
                        "type": 388,
                        "typeName": "WeightLimit"
                      }
                    ],
                    "index": 19
                  },
                  {
                    "name": "RefundSurplus",
                    "index": 20
                  },
                  {
                    "name": "SetErrorHandler",
                    "fields": [
                      {
                        "type": 413,
                        "typeName": "Xcm<Call>"
                      }
                    ],
                    "index": 21
                  },
                  {
                    "name": "SetAppendix",
                    "fields": [
                      {
                        "type": 413,
                        "typeName": "Xcm<Call>"
                      }
                    ],
                    "index": 22
                  },
                  {
                    "name": "ClearError",
                    "index": 23
                  },
                  {
                    "name": "ClaimAsset",
                    "fields": [
                      {
                        "name": "assets",
                        "type": 367,
                        "typeName": "MultiAssets"
                      },
                      {
                        "name": "ticket",
                        "type": 56,
                        "typeName": "MultiLocation"
                      }
                    ],
                    "index": 24
                  },
                  {
                    "name": "Trap",
                    "fields": [
                      {
                        "type": 11,
                        "typeName": "u64"
                      }
                    ],
                    "index": 25
                  },
                  {
                    "name": "SubscribeVersion",
                    "fields": [
                      {
                        "name": "query_id",
                        "type": 11,
                        "typeName": "QueryId"
                      },
                      {
                        "name": "max_response_weight",
                        "type": 10,
                        "typeName": "Weight"
                      }
                    ],
                    "index": 26
                  },
                  {
                    "name": "UnsubscribeVersion",
                    "index": 27
                  },
                  {
                    "name": "BurnAsset",
                    "fields": [
                      {
                        "type": 367,
                        "typeName": "MultiAssets"
                      }
                    ],
                    "index": 28
                  },
                  {
                    "name": "ExpectAsset",
                    "fields": [
                      {
                        "type": 367,
                        "typeName": "MultiAssets"
                      }
                    ],
                    "index": 29
                  },
                  {
                    "name": "ExpectOrigin",
                    "fields": [
                      {
                        "type": 382,
                        "typeName": "Option<MultiLocation>"
                      }
                    ],
                    "index": 30
                  },
                  {
                    "name": "ExpectError",
                    "fields": [
                      {
                        "type": 373,
                        "typeName": "Option<(u32, Error)>"
                      }
                    ],
                    "index": 31
                  },
                  {
                    "name": "ExpectTransactStatus",
                    "fields": [
                      {
                        "type": 380,
                        "typeName": "MaybeErrorCode"
                      }
                    ],
                    "index": 32
                  },
                  {
                    "name": "QueryPallet",
                    "fields": [
                      {
                        "name": "module_name",
                        "type": 14,
                        "typeName": "Vec<u8>"
                      },
                      {
                        "name": "response_info",
                        "type": 384,
                        "typeName": "QueryResponseInfo"
                      }
                    ],
                    "index": 33
                  },
                  {
                    "name": "ExpectPallet",
                    "fields": [
                      {
                        "name": "index",
                        "type": 59,
                        "typeName": "u32"
                      },
                      {
                        "name": "name",
                        "type": 14,
                        "typeName": "Vec<u8>"
                      },
                      {
                        "name": "module_name",
                        "type": 14,
                        "typeName": "Vec<u8>"
                      },
                      {
                        "name": "crate_major",
                        "type": 59,
                        "typeName": "u32"
                      },
                      {
                        "name": "min_crate_minor",
                        "type": 59,
                        "typeName": "u32"
                      }
                    ],
                    "index": 34
                  },
                  {
                    "name": "ReportTransactStatus",
                    "fields": [
                      {
                        "type": 384,
                        "typeName": "QueryResponseInfo"
                      }
                    ],
                    "index": 35
                  },
                  {
                    "name": "ClearTransactStatus",
                    "index": 36
                  },
                  {
                    "name": "UniversalOrigin",
                    "fields": [
                      {
                        "type": 58,
                        "typeName": "Junction"
                      }
                    ],
                    "index": 37
                  },
                  {
                    "name": "ExportMessage",
                    "fields": [
                      {
                        "name": "network",
                        "type": 61,
                        "typeName": "NetworkId"
                      },
                      {
                        "name": "destination",
                        "type": 57,
                        "typeName": "InteriorMultiLocation"
                      },
                      {
                        "name": "xcm",
                        "type": 364,
                        "typeName": "Xcm<()>"
                      }
                    ],
                    "index": 38
                  },
                  {
                    "name": "LockAsset",
                    "fields": [
                      {
                        "name": "asset",
                        "type": 369,
                        "typeName": "MultiAsset"
                      },
                      {
                        "name": "unlocker",
                        "type": 56,
                        "typeName": "MultiLocation"
                      }
                    ],
                    "index": 39
                  },
                  {
                    "name": "UnlockAsset",
                    "fields": [
                      {
                        "name": "asset",
                        "type": 369,
                        "typeName": "MultiAsset"
                      },
                      {
                        "name": "target",
                        "type": 56,
                        "typeName": "MultiLocation"
                      }
                    ],
                    "index": 40
                  },
                  {
                    "name": "NoteUnlockable",
                    "fields": [
                      {
                        "name": "asset",
                        "type": 369,
                        "typeName": "MultiAsset"
                      },
                      {
                        "name": "owner",
                        "type": 56,
                        "typeName": "MultiLocation"
                      }
                    ],
                    "index": 41
                  },
                  {
                    "name": "RequestUnlock",
                    "fields": [
                      {
                        "name": "asset",
                        "type": 369,
                        "typeName": "MultiAsset"
                      },
                      {
                        "name": "locker",
                        "type": 56,
                        "typeName": "MultiLocation"
                      }
                    ],
                    "index": 42
                  },
                  {
                    "name": "SetFeesMode",
                    "fields": [
                      {
                        "name": "jit_withdraw",
                        "type": 8,
                        "typeName": "bool"
                      }
                    ],
                    "index": 43
                  },
                  {
                    "name": "SetTopic",
                    "fields": [
                      {
                        "type": 1,
                        "typeName": "[u8; 32]"
                      }
                    ],
                    "index": 44
                  },
                  {
                    "name": "ClearTopic",
                    "index": 45
                  },
                  {
                    "name": "AliasOrigin",
                    "fields": [
                      {
                        "type": 56,
                        "typeName": "MultiLocation"
                      }
                    ],
                    "index": 46
                  },
                  {
                    "name": "UnpaidExecution",
                    "fields": [
                      {
                        "name": "weight_limit",
                        "type": 388,
                        "typeName": "WeightLimit"
                      },
                      {
                        "name": "check_origin",
                        "type": 382,
                        "typeName": "Option<MultiLocation>"
                      }
                    ],
                    "index": 47
                  }
                ]
              }
            }
          }
        },
        {
          "id": 416,
          "type": {
            "path": [
              "staging_xcm",
              "v4",
              "Xcm"
            ],
            "params": [
              {
                "name": "Call",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 417,
                    "typeName": "Vec<Instruction<Call>>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 417,
          "type": {
            "def": {
              "sequence": {
                "type": 418
              }
            }
          }
        },
        {
          "id": 418,
          "type": {
            "path": [
              "staging_xcm",
              "v4",
              "Instruction"
            ],
            "params": [
              {
                "name": "Call",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "WithdrawAsset",
                    "fields": [
                      {
                        "type": 392,
                        "typeName": "Assets"
                      }
                    ],
                    "index": 0
                  },
                  {
                    "name": "ReserveAssetDeposited",
                    "fields": [
                      {
                        "type": 392,
                        "typeName": "Assets"
                      }
                    ],
                    "index": 1
                  },
                  {
                    "name": "ReceiveTeleportedAsset",
                    "fields": [
                      {
                        "type": 392,
                        "typeName": "Assets"
                      }
                    ],
                    "index": 2
                  },
                  {
                    "name": "QueryResponse",
                    "fields": [
                      {
                        "name": "query_id",
                        "type": 11,
                        "typeName": "QueryId"
                      },
                      {
                        "name": "response",
                        "type": 397,
                        "typeName": "Response"
                      },
                      {
                        "name": "max_weight",
                        "type": 10,
                        "typeName": "Weight"
                      },
                      {
                        "name": "querier",
                        "type": 402,
                        "typeName": "Option<Location>"
                      }
                    ],
                    "index": 3
                  },
                  {
                    "name": "TransferAsset",
                    "fields": [
                      {
                        "name": "assets",
                        "type": 392,
                        "typeName": "Assets"
                      },
                      {
                        "name": "beneficiary",
                        "type": 67,
                        "typeName": "Location"
                      }
                    ],
                    "index": 4
                  },
                  {
                    "name": "TransferReserveAsset",
                    "fields": [
                      {
                        "name": "assets",
                        "type": 392,
                        "typeName": "Assets"
                      },
                      {
                        "name": "dest",
                        "type": 67,
                        "typeName": "Location"
                      },
                      {
                        "name": "xcm",
                        "type": 389,
                        "typeName": "Xcm<()>"
                      }
                    ],
                    "index": 5
                  },
                  {
                    "name": "Transact",
                    "fields": [
                      {
                        "name": "origin_kind",
                        "type": 383,
                        "typeName": "OriginKind"
                      },
                      {
                        "name": "require_weight_at_most",
                        "type": 10,
                        "typeName": "Weight"
                      },
                      {
                        "name": "call",
                        "type": 412,
                        "typeName": "DoubleEncoded<Call>"
                      }
                    ],
                    "index": 6
                  },
                  {
                    "name": "HrmpNewChannelOpenRequest",
                    "fields": [
                      {
                        "name": "sender",
                        "type": 59,
                        "typeName": "u32"
                      },
                      {
                        "name": "max_message_size",
                        "type": 59,
                        "typeName": "u32"
                      },
                      {
                        "name": "max_capacity",
                        "type": 59,
                        "typeName": "u32"
                      }
                    ],
                    "index": 7
                  },
                  {
                    "name": "HrmpChannelAccepted",
                    "fields": [
                      {
                        "name": "recipient",
                        "type": 59,
                        "typeName": "u32"
                      }
                    ],
                    "index": 8
                  },
                  {
                    "name": "HrmpChannelClosing",
                    "fields": [
                      {
                        "name": "initiator",
                        "type": 59,
                        "typeName": "u32"
                      },
                      {
                        "name": "sender",
                        "type": 59,
                        "typeName": "u32"
                      },
                      {
                        "name": "recipient",
                        "type": 59,
                        "typeName": "u32"
                      }
                    ],
                    "index": 9
                  },
                  {
                    "name": "ClearOrigin",
                    "index": 10
                  },
                  {
                    "name": "DescendOrigin",
                    "fields": [
                      {
                        "type": 68,
                        "typeName": "InteriorLocation"
                      }
                    ],
                    "index": 11
                  },
                  {
                    "name": "ReportError",
                    "fields": [
                      {
                        "type": 403,
                        "typeName": "QueryResponseInfo"
                      }
                    ],
                    "index": 12
                  },
                  {
                    "name": "DepositAsset",
                    "fields": [
                      {
                        "name": "assets",
                        "type": 404,
                        "typeName": "AssetFilter"
                      },
                      {
                        "name": "beneficiary",
                        "type": 67,
                        "typeName": "Location"
                      }
                    ],
                    "index": 13
                  },
                  {
                    "name": "DepositReserveAsset",
                    "fields": [
                      {
                        "name": "assets",
                        "type": 404,
                        "typeName": "AssetFilter"
                      },
                      {
                        "name": "dest",
                        "type": 67,
                        "typeName": "Location"
                      },
                      {
                        "name": "xcm",
                        "type": 389,
                        "typeName": "Xcm<()>"
                      }
                    ],
                    "index": 14
                  },
                  {
                    "name": "ExchangeAsset",
                    "fields": [
                      {
                        "name": "give",
                        "type": 404,
                        "typeName": "AssetFilter"
                      },
                      {
                        "name": "want",
                        "type": 392,
                        "typeName": "Assets"
                      },
                      {
                        "name": "maximal",
                        "type": 8,
                        "typeName": "bool"
                      }
                    ],
                    "index": 15
                  },
                  {
                    "name": "InitiateReserveWithdraw",
                    "fields": [
                      {
                        "name": "assets",
                        "type": 404,
                        "typeName": "AssetFilter"
                      },
                      {
                        "name": "reserve",
                        "type": 67,
                        "typeName": "Location"
                      },
                      {
                        "name": "xcm",
                        "type": 389,
                        "typeName": "Xcm<()>"
                      }
                    ],
                    "index": 16
                  },
                  {
                    "name": "InitiateTeleport",
                    "fields": [
                      {
                        "name": "assets",
                        "type": 404,
                        "typeName": "AssetFilter"
                      },
                      {
                        "name": "dest",
                        "type": 67,
                        "typeName": "Location"
                      },
                      {
                        "name": "xcm",
                        "type": 389,
                        "typeName": "Xcm<()>"
                      }
                    ],
                    "index": 17
                  },
                  {
                    "name": "ReportHolding",
                    "fields": [
                      {
                        "name": "response_info",
                        "type": 403,
                        "typeName": "QueryResponseInfo"
                      },
                      {
                        "name": "assets",
                        "type": 404,
                        "typeName": "AssetFilter"
                      }
                    ],
                    "index": 18
                  },
                  {
                    "name": "BuyExecution",
                    "fields": [
                      {
                        "name": "fees",
                        "type": 394,
                        "typeName": "Asset"
                      },
                      {
                        "name": "weight_limit",
                        "type": 388,
                        "typeName": "WeightLimit"
                      }
                    ],
                    "index": 19
                  },
                  {
                    "name": "RefundSurplus",
                    "index": 20
                  },
                  {
                    "name": "SetErrorHandler",
                    "fields": [
                      {
                        "type": 416,
                        "typeName": "Xcm<Call>"
                      }
                    ],
                    "index": 21
                  },
                  {
                    "name": "SetAppendix",
                    "fields": [
                      {
                        "type": 416,
                        "typeName": "Xcm<Call>"
                      }
                    ],
                    "index": 22
                  },
                  {
                    "name": "ClearError",
                    "index": 23
                  },
                  {
                    "name": "ClaimAsset",
                    "fields": [
                      {
                        "name": "assets",
                        "type": 392,
                        "typeName": "Assets"
                      },
                      {
                        "name": "ticket",
                        "type": 67,
                        "typeName": "Location"
                      }
                    ],
                    "index": 24
                  },
                  {
                    "name": "Trap",
                    "fields": [
                      {
                        "type": 11,
                        "typeName": "u64"
                      }
                    ],
                    "index": 25
                  },
                  {
                    "name": "SubscribeVersion",
                    "fields": [
                      {
                        "name": "query_id",
                        "type": 11,
                        "typeName": "QueryId"
                      },
                      {
                        "name": "max_response_weight",
                        "type": 10,
                        "typeName": "Weight"
                      }
                    ],
                    "index": 26
                  },
                  {
                    "name": "UnsubscribeVersion",
                    "index": 27
                  },
                  {
                    "name": "BurnAsset",
                    "fields": [
                      {
                        "type": 392,
                        "typeName": "Assets"
                      }
                    ],
                    "index": 28
                  },
                  {
                    "name": "ExpectAsset",
                    "fields": [
                      {
                        "type": 392,
                        "typeName": "Assets"
                      }
                    ],
                    "index": 29
                  },
                  {
                    "name": "ExpectOrigin",
                    "fields": [
                      {
                        "type": 402,
                        "typeName": "Option<Location>"
                      }
                    ],
                    "index": 30
                  },
                  {
                    "name": "ExpectError",
                    "fields": [
                      {
                        "type": 373,
                        "typeName": "Option<(u32, Error)>"
                      }
                    ],
                    "index": 31
                  },
                  {
                    "name": "ExpectTransactStatus",
                    "fields": [
                      {
                        "type": 380,
                        "typeName": "MaybeErrorCode"
                      }
                    ],
                    "index": 32
                  },
                  {
                    "name": "QueryPallet",
                    "fields": [
                      {
                        "name": "module_name",
                        "type": 14,
                        "typeName": "Vec<u8>"
                      },
                      {
                        "name": "response_info",
                        "type": 403,
                        "typeName": "QueryResponseInfo"
                      }
                    ],
                    "index": 33
                  },
                  {
                    "name": "ExpectPallet",
                    "fields": [
                      {
                        "name": "index",
                        "type": 59,
                        "typeName": "u32"
                      },
                      {
                        "name": "name",
                        "type": 14,
                        "typeName": "Vec<u8>"
                      },
                      {
                        "name": "module_name",
                        "type": 14,
                        "typeName": "Vec<u8>"
                      },
                      {
                        "name": "crate_major",
                        "type": 59,
                        "typeName": "u32"
                      },
                      {
                        "name": "min_crate_minor",
                        "type": 59,
                        "typeName": "u32"
                      }
                    ],
                    "index": 34
                  },
                  {
                    "name": "ReportTransactStatus",
                    "fields": [
                      {
                        "type": 403,
                        "typeName": "QueryResponseInfo"
                      }
                    ],
                    "index": 35
                  },
                  {
                    "name": "ClearTransactStatus",
                    "index": 36
                  },
                  {
                    "name": "UniversalOrigin",
                    "fields": [
                      {
                        "type": 70,
                        "typeName": "Junction"
                      }
                    ],
                    "index": 37
                  },
                  {
                    "name": "ExportMessage",
                    "fields": [
                      {
                        "name": "network",
                        "type": 72,
                        "typeName": "NetworkId"
                      },
                      {
                        "name": "destination",
                        "type": 68,
                        "typeName": "InteriorLocation"
                      },
                      {
                        "name": "xcm",
                        "type": 389,
                        "typeName": "Xcm<()>"
                      }
                    ],
                    "index": 38
                  },
                  {
                    "name": "LockAsset",
                    "fields": [
                      {
                        "name": "asset",
                        "type": 394,
                        "typeName": "Asset"
                      },
                      {
                        "name": "unlocker",
                        "type": 67,
                        "typeName": "Location"
                      }
                    ],
                    "index": 39
                  },
                  {
                    "name": "UnlockAsset",
                    "fields": [
                      {
                        "name": "asset",
                        "type": 394,
                        "typeName": "Asset"
                      },
                      {
                        "name": "target",
                        "type": 67,
                        "typeName": "Location"
                      }
                    ],
                    "index": 40
                  },
                  {
                    "name": "NoteUnlockable",
                    "fields": [
                      {
                        "name": "asset",
                        "type": 394,
                        "typeName": "Asset"
                      },
                      {
                        "name": "owner",
                        "type": 67,
                        "typeName": "Location"
                      }
                    ],
                    "index": 41
                  },
                  {
                    "name": "RequestUnlock",
                    "fields": [
                      {
                        "name": "asset",
                        "type": 394,
                        "typeName": "Asset"
                      },
                      {
                        "name": "locker",
                        "type": 67,
                        "typeName": "Location"
                      }
                    ],
                    "index": 42
                  },
                  {
                    "name": "SetFeesMode",
                    "fields": [
                      {
                        "name": "jit_withdraw",
                        "type": 8,
                        "typeName": "bool"
                      }
                    ],
                    "index": 43
                  },
                  {
                    "name": "SetTopic",
                    "fields": [
                      {
                        "type": 1,
                        "typeName": "[u8; 32]"
                      }
                    ],
                    "index": 44
                  },
                  {
                    "name": "ClearTopic",
                    "index": 45
                  },
                  {
                    "name": "AliasOrigin",
                    "fields": [
                      {
                        "type": 67,
                        "typeName": "Location"
                      }
                    ],
                    "index": 46
                  },
                  {
                    "name": "UnpaidExecution",
                    "fields": [
                      {
                        "name": "weight_limit",
                        "type": 388,
                        "typeName": "WeightLimit"
                      },
                      {
                        "name": "check_origin",
                        "type": 402,
                        "typeName": "Option<Location>"
                      }
                    ],
                    "index": 47
                  }
                ]
              }
            }
          }
        },
        {
          "id": 419,
          "type": {
            "path": [
              "staging_xcm_executor",
              "traits",
              "asset_transfer",
              "TransferType"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Teleport",
                    "index": 0
                  },
                  {
                    "name": "LocalReserve",
                    "index": 1
                  },
                  {
                    "name": "DestinationReserve",
                    "index": 2
                  },
                  {
                    "name": "RemoteReserve",
                    "fields": [
                      {
                        "type": 81,
                        "typeName": "VersionedLocation"
                      }
                    ],
                    "index": 3
                  }
                ]
              }
            }
          }
        },
        {
          "id": 420,
          "type": {
            "path": [
              "xcm",
              "VersionedAssetId"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "V3",
                    "fields": [
                      {
                        "type": 66,
                        "typeName": "v3::AssetId"
                      }
                    ],
                    "index": 3
                  },
                  {
                    "name": "V4",
                    "fields": [
                      {
                        "type": 80,
                        "typeName": "v4::AssetId"
                      }
                    ],
                    "index": 4
                  }
                ]
              }
            }
          }
        },
        {
          "id": 421,
          "type": {
            "path": [
              "pallet_message_queue",
              "pallet",
              "Call"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "reap_page",
                    "fields": [
                      {
                        "name": "message_origin",
                        "type": 422,
                        "typeName": "MessageOriginOf<T>"
                      },
                      {
                        "name": "page_index",
                        "type": 4,
                        "typeName": "PageIndex"
                      }
                    ],
                    "index": 0,
                    "docs": [
                      "Remove a page which has no more messages remaining to be processed or is stale."
                    ]
                  },
                  {
                    "name": "execute_overweight",
                    "fields": [
                      {
                        "name": "message_origin",
                        "type": 422,
                        "typeName": "MessageOriginOf<T>"
                      },
                      {
                        "name": "page",
                        "type": 4,
                        "typeName": "PageIndex"
                      },
                      {
                        "name": "index",
                        "type": 4,
                        "typeName": "T::Size"
                      },
                      {
                        "name": "weight_limit",
                        "type": 10,
                        "typeName": "Weight"
                      }
                    ],
                    "index": 1,
                    "docs": [
                      "Execute an overweight message.",
                      "",
                      "Temporary processing errors will be propagated whereas permanent errors are treated",
                      "as success condition.",
                      "",
                      "- `origin`: Must be `Signed`.",
                      "- `message_origin`: The origin from which the message to be executed arrived.",
                      "- `page`: The page in the queue in which the message to be executed is sitting.",
                      "- `index`: The index into the queue of the message to be executed.",
                      "- `weight_limit`: The maximum amount of weight allowed to be consumed in the execution",
                      "  of the message.",
                      "",
                      "Benchmark complexity considerations: O(index + weight_limit)."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Contains a variant per dispatchable extrinsic that this pallet has."
            ]
          }
        },
        {
          "id": 422,
          "type": {
            "path": [
              "polkadot_runtime_parachains",
              "inclusion",
              "AggregateMessageOrigin"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Ump",
                    "fields": [
                      {
                        "type": 423,
                        "typeName": "UmpQueueId"
                      }
                    ],
                    "index": 0
                  }
                ]
              }
            }
          }
        },
        {
          "id": 423,
          "type": {
            "path": [
              "polkadot_runtime_parachains",
              "inclusion",
              "UmpQueueId"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Para",
                    "fields": [
                      {
                        "type": 163,
                        "typeName": "ParaId"
                      }
                    ],
                    "index": 0
                  }
                ]
              }
            }
          }
        },
        {
          "id": 424,
          "type": {
            "path": [
              "pallet_asset_rate",
              "pallet",
              "Call"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "create",
                    "fields": [
                      {
                        "name": "asset_kind",
                        "type": 55,
                        "typeName": "Box<T::AssetKind>"
                      },
                      {
                        "name": "rate",
                        "type": 425,
                        "typeName": "FixedU128"
                      }
                    ],
                    "index": 0,
                    "docs": [
                      "Initialize a conversion rate to native balance for the given asset.",
                      "",
                      "## Complexity",
                      "- O(1)"
                    ]
                  },
                  {
                    "name": "update",
                    "fields": [
                      {
                        "name": "asset_kind",
                        "type": 55,
                        "typeName": "Box<T::AssetKind>"
                      },
                      {
                        "name": "rate",
                        "type": 425,
                        "typeName": "FixedU128"
                      }
                    ],
                    "index": 1,
                    "docs": [
                      "Update the conversion rate to native balance for the given asset.",
                      "",
                      "## Complexity",
                      "- O(1)"
                    ]
                  },
                  {
                    "name": "remove",
                    "fields": [
                      {
                        "name": "asset_kind",
                        "type": 55,
                        "typeName": "Box<T::AssetKind>"
                      }
                    ],
                    "index": 2,
                    "docs": [
                      "Remove an existing conversion rate to native balance for the given asset.",
                      "",
                      "## Complexity",
                      "- O(1)"
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Contains a variant per dispatchable extrinsic that this pallet has."
            ]
          }
        },
        {
          "id": 425,
          "type": {
            "path": [
              "sp_arithmetic",
              "fixed_point",
              "FixedU128"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 6,
                    "typeName": "u128"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 426,
          "type": {
            "path": [
              "pallet_beefy",
              "pallet",
              "Call"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "report_double_voting",
                    "fields": [
                      {
                        "name": "equivocation_proof",
                        "type": 427,
                        "typeName": "Box<DoubleVotingProof<BlockNumberFor<T>, T::BeefyId,<T::BeefyId\nas RuntimeAppPublic>::Signature,>,>"
                      },
                      {
                        "name": "key_owner_proof",
                        "type": 109,
                        "typeName": "T::KeyOwnerProof"
                      }
                    ],
                    "index": 0,
                    "docs": [
                      "Report voter equivocation/misbehavior. This method will verify the",
                      "equivocation proof and validate the given key ownership proof",
                      "against the extracted offender. If both are valid, the offence",
                      "will be reported."
                    ]
                  },
                  {
                    "name": "report_double_voting_unsigned",
                    "fields": [
                      {
                        "name": "equivocation_proof",
                        "type": 427,
                        "typeName": "Box<DoubleVotingProof<BlockNumberFor<T>, T::BeefyId,<T::BeefyId\nas RuntimeAppPublic>::Signature,>,>"
                      },
                      {
                        "name": "key_owner_proof",
                        "type": 109,
                        "typeName": "T::KeyOwnerProof"
                      }
                    ],
                    "index": 1,
                    "docs": [
                      "Report voter equivocation/misbehavior. This method will verify the",
                      "equivocation proof and validate the given key ownership proof",
                      "against the extracted offender. If both are valid, the offence",
                      "will be reported.",
                      "",
                      "This extrinsic must be called unsigned and it is expected that only",
                      "block authors will call it (validated in `ValidateUnsigned`), as such",
                      "if the block author is defined it will be defined as the equivocation",
                      "reporter."
                    ]
                  },
                  {
                    "name": "set_new_genesis",
                    "fields": [
                      {
                        "name": "delay_in_blocks",
                        "type": 4,
                        "typeName": "BlockNumberFor<T>"
                      }
                    ],
                    "index": 2,
                    "docs": [
                      "Reset BEEFY consensus by setting a new BEEFY genesis at `delay_in_blocks` blocks in the",
                      "future.",
                      "",
                      "Note: `delay_in_blocks` has to be at least 1."
                    ]
                  },
                  {
                    "name": "report_fork_voting",
                    "fields": [
                      {
                        "name": "equivocation_proof",
                        "type": 435,
                        "typeName": "Box<ForkVotingProof<HeaderFor<T>, T::BeefyId,<T::AncestryHelper\nas AncestryHelper<HeaderFor<T>>>::Proof,>,>"
                      },
                      {
                        "name": "key_owner_proof",
                        "type": 109,
                        "typeName": "T::KeyOwnerProof"
                      }
                    ],
                    "index": 3,
                    "docs": [
                      "Report fork voting equivocation. This method will verify the equivocation proof",
                      "and validate the given key ownership proof against the extracted offender.",
                      "If both are valid, the offence will be reported."
                    ]
                  },
                  {
                    "name": "report_fork_voting_unsigned",
                    "fields": [
                      {
                        "name": "equivocation_proof",
                        "type": 435,
                        "typeName": "Box<ForkVotingProof<HeaderFor<T>, T::BeefyId,<T::AncestryHelper\nas AncestryHelper<HeaderFor<T>>>::Proof,>,>"
                      },
                      {
                        "name": "key_owner_proof",
                        "type": 109,
                        "typeName": "T::KeyOwnerProof"
                      }
                    ],
                    "index": 4,
                    "docs": [
                      "Report fork voting equivocation. This method will verify the equivocation proof",
                      "and validate the given key ownership proof against the extracted offender.",
                      "If both are valid, the offence will be reported.",
                      "",
                      "This extrinsic must be called unsigned and it is expected that only",
                      "block authors will call it (validated in `ValidateUnsigned`), as such",
                      "if the block author is defined it will be defined as the equivocation",
                      "reporter."
                    ]
                  },
                  {
                    "name": "report_future_block_voting",
                    "fields": [
                      {
                        "name": "equivocation_proof",
                        "type": 439,
                        "typeName": "Box<FutureBlockVotingProof<BlockNumberFor<T>, T::BeefyId>>"
                      },
                      {
                        "name": "key_owner_proof",
                        "type": 109,
                        "typeName": "T::KeyOwnerProof"
                      }
                    ],
                    "index": 5,
                    "docs": [
                      "Report future block voting equivocation. This method will verify the equivocation proof",
                      "and validate the given key ownership proof against the extracted offender.",
                      "If both are valid, the offence will be reported."
                    ]
                  },
                  {
                    "name": "report_future_block_voting_unsigned",
                    "fields": [
                      {
                        "name": "equivocation_proof",
                        "type": 439,
                        "typeName": "Box<FutureBlockVotingProof<BlockNumberFor<T>, T::BeefyId>>"
                      },
                      {
                        "name": "key_owner_proof",
                        "type": 109,
                        "typeName": "T::KeyOwnerProof"
                      }
                    ],
                    "index": 6,
                    "docs": [
                      "Report future block voting equivocation. This method will verify the equivocation proof",
                      "and validate the given key ownership proof against the extracted offender.",
                      "If both are valid, the offence will be reported.",
                      "",
                      "This extrinsic must be called unsigned and it is expected that only",
                      "block authors will call it (validated in `ValidateUnsigned`), as such",
                      "if the block author is defined it will be defined as the equivocation",
                      "reporter."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Contains a variant per dispatchable extrinsic that this pallet has."
            ]
          }
        },
        {
          "id": 427,
          "type": {
            "path": [
              "sp_consensus_beefy",
              "DoubleVotingProof"
            ],
            "params": [
              {
                "name": "Number",
                "type": 4
              },
              {
                "name": "Id",
                "type": 140
              },
              {
                "name": "Signature",
                "type": 428
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "first",
                    "type": 429,
                    "typeName": "VoteMessage<Number, Id, Signature>"
                  },
                  {
                    "name": "second",
                    "type": 429,
                    "typeName": "VoteMessage<Number, Id, Signature>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 428,
          "type": {
            "path": [
              "sp_consensus_beefy",
              "ecdsa_crypto",
              "Signature"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 171,
                    "typeName": "ecdsa::Signature"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 429,
          "type": {
            "path": [
              "sp_consensus_beefy",
              "VoteMessage"
            ],
            "params": [
              {
                "name": "Number",
                "type": 4
              },
              {
                "name": "Id",
                "type": 140
              },
              {
                "name": "Signature",
                "type": 428
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "commitment",
                    "type": 430,
                    "typeName": "Commitment<Number>"
                  },
                  {
                    "name": "id",
                    "type": 140,
                    "typeName": "Id"
                  },
                  {
                    "name": "signature",
                    "type": 428,
                    "typeName": "Signature"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 430,
          "type": {
            "path": [
              "sp_consensus_beefy",
              "commitment",
              "Commitment"
            ],
            "params": [
              {
                "name": "TBlockNumber",
                "type": 4
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "payload",
                    "type": 431,
                    "typeName": "Payload"
                  },
                  {
                    "name": "block_number",
                    "type": 4,
                    "typeName": "TBlockNumber"
                  },
                  {
                    "name": "validator_set_id",
                    "type": 12,
                    "typeName": "ValidatorSetId"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 431,
          "type": {
            "path": [
              "sp_consensus_beefy",
              "payload",
              "Payload"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 432,
                    "typeName": "Vec<(BeefyPayloadId, Vec<u8>)>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 432,
          "type": {
            "def": {
              "sequence": {
                "type": 433
              }
            }
          }
        },
        {
          "id": 433,
          "type": {
            "def": {
              "tuple": [
                434,
                14
              ]
            }
          }
        },
        {
          "id": 434,
          "type": {
            "def": {
              "array": {
                "len": 2,
                "type": 2
              }
            }
          }
        },
        {
          "id": 435,
          "type": {
            "path": [
              "sp_consensus_beefy",
              "ForkVotingProof"
            ],
            "params": [
              {
                "name": "Header",
                "type": 106
              },
              {
                "name": "Id",
                "type": 140
              },
              {
                "name": "AncestryProof",
                "type": 436
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "vote",
                    "type": 429,
                    "typeName": "VoteMessage<Header::Number, Id, Id::Signature>"
                  },
                  {
                    "name": "ancestry_proof",
                    "type": 436,
                    "typeName": "AncestryProof"
                  },
                  {
                    "name": "header",
                    "type": 106,
                    "typeName": "Header"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 436,
          "type": {
            "path": [
              "sp_mmr_primitives",
              "AncestryProof"
            ],
            "params": [
              {
                "name": "Hash",
                "type": 13
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "prev_peaks",
                    "type": 103,
                    "typeName": "Vec<Hash>"
                  },
                  {
                    "name": "prev_leaf_count",
                    "type": 12,
                    "typeName": "u64"
                  },
                  {
                    "name": "leaf_count",
                    "type": 12,
                    "typeName": "NodeIndex"
                  },
                  {
                    "name": "items",
                    "type": 437,
                    "typeName": "Vec<(u64, Hash)>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 437,
          "type": {
            "def": {
              "sequence": {
                "type": 438
              }
            }
          }
        },
        {
          "id": 438,
          "type": {
            "def": {
              "tuple": [
                12,
                13
              ]
            }
          }
        },
        {
          "id": 439,
          "type": {
            "path": [
              "sp_consensus_beefy",
              "FutureBlockVotingProof"
            ],
            "params": [
              {
                "name": "Number",
                "type": 4
              },
              {
                "name": "Id",
                "type": 140
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "vote",
                    "type": 429,
                    "typeName": "VoteMessage<Number, Id, Id::Signature>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 440,
          "type": {
            "path": [
              "pallet_rc_migrator",
              "pallet",
              "Call"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "force_set_stage",
                    "fields": [
                      {
                        "name": "stage",
                        "type": 441,
                        "typeName": "MigrationStageOf<T>"
                      }
                    ],
                    "index": 0,
                    "docs": [
                      "Set the migration stage.",
                      "",
                      "This call is intended for emergency use only and is guarded by the",
                      "[`Config::ManagerOrigin`]."
                    ]
                  },
                  {
                    "name": "schedule_migration",
                    "fields": [
                      {
                        "name": "start_moment",
                        "type": 166,
                        "typeName": "DispatchTime<BlockNumberFor<T>>"
                      }
                    ],
                    "index": 1,
                    "docs": [
                      "Schedule the migration to start at a given moment."
                    ]
                  },
                  {
                    "name": "start_data_migration",
                    "index": 2,
                    "docs": [
                      "Start the data migration.",
                      "",
                      "This is typically called by the Asset Hub to indicate it's readiness to receive the",
                      "migration data."
                    ]
                  },
                  {
                    "name": "update_ah_msg_processed_count",
                    "fields": [
                      {
                        "name": "count",
                        "type": 4,
                        "typeName": "u32"
                      }
                    ],
                    "index": 3,
                    "docs": [
                      "Update the total number of XCM messages processed by the Asset Hub."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Contains a variant per dispatchable extrinsic that this pallet has."
            ]
          }
        },
        {
          "id": 441,
          "type": {
            "path": [
              "pallet_rc_migrator",
              "MigrationStage"
            ],
            "params": [
              {
                "name": "AccountId",
                "type": 0
              },
              {
                "name": "BlockNumber",
                "type": 4
              },
              {
                "name": "BagsListScore",
                "type": 12
              },
              {
                "name": "VotingClass",
                "type": 93
              },
              {
                "name": "AssetKind",
                "type": 55
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Pending",
                    "index": 0
                  },
                  {
                    "name": "Scheduled",
                    "fields": [
                      {
                        "name": "block_number",
                        "type": 4,
                        "typeName": "BlockNumber"
                      }
                    ],
                    "index": 1
                  },
                  {
                    "name": "Initializing",
                    "index": 2
                  },
                  {
                    "name": "AccountsMigrationInit",
                    "index": 3
                  },
                  {
                    "name": "AccountsMigrationOngoing",
                    "fields": [
                      {
                        "name": "last_key",
                        "type": 129,
                        "typeName": "Option<AccountId>"
                      }
                    ],
                    "index": 4
                  },
                  {
                    "name": "AccountsMigrationDone",
                    "index": 5
                  },
                  {
                    "name": "MultisigMigrationInit",
                    "index": 6
                  },
                  {
                    "name": "MultisigMigrationOngoing",
                    "fields": [
                      {
                        "name": "last_key",
                        "type": 442,
                        "typeName": "Option<(AccountId,[u8; 32])>"
                      }
                    ],
                    "index": 7
                  },
                  {
                    "name": "MultisigMigrationDone",
                    "index": 8
                  },
                  {
                    "name": "ClaimsMigrationInit",
                    "index": 9
                  },
                  {
                    "name": "ClaimsMigrationOngoing",
                    "fields": [
                      {
                        "name": "current_key",
                        "type": 444,
                        "typeName": "Option<ClaimsStage<AccountId>>"
                      }
                    ],
                    "index": 10
                  },
                  {
                    "name": "ClaimsMigrationDone",
                    "index": 11
                  },
                  {
                    "name": "ProxyMigrationInit",
                    "index": 12
                  },
                  {
                    "name": "ProxyMigrationProxies",
                    "fields": [
                      {
                        "name": "last_key",
                        "type": 129,
                        "typeName": "Option<AccountId>"
                      }
                    ],
                    "index": 13
                  },
                  {
                    "name": "ProxyMigrationAnnouncements",
                    "fields": [
                      {
                        "name": "last_key",
                        "type": 129,
                        "typeName": "Option<AccountId>"
                      }
                    ],
                    "index": 14
                  },
                  {
                    "name": "ProxyMigrationDone",
                    "index": 15
                  },
                  {
                    "name": "PreimageMigrationInit",
                    "index": 16
                  },
                  {
                    "name": "PreimageMigrationChunksOngoing",
                    "fields": [
                      {
                        "name": "last_key",
                        "type": 448,
                        "typeName": "Option<((H256, u32), u32)>"
                      }
                    ],
                    "index": 17
                  },
                  {
                    "name": "PreimageMigrationChunksDone",
                    "index": 18
                  },
                  {
                    "name": "PreimageMigrationRequestStatusOngoing",
                    "fields": [
                      {
                        "name": "next_key",
                        "type": 167,
                        "typeName": "Option<H256>"
                      }
                    ],
                    "index": 19
                  },
                  {
                    "name": "PreimageMigrationRequestStatusDone",
                    "index": 20
                  },
                  {
                    "name": "PreimageMigrationLegacyRequestStatusInit",
                    "index": 21
                  },
                  {
                    "name": "PreimageMigrationLegacyRequestStatusOngoing",
                    "fields": [
                      {
                        "name": "next_key",
                        "type": 167,
                        "typeName": "Option<H256>"
                      }
                    ],
                    "index": 22
                  },
                  {
                    "name": "PreimageMigrationLegacyRequestStatusDone",
                    "index": 23
                  },
                  {
                    "name": "PreimageMigrationDone",
                    "index": 24
                  },
                  {
                    "name": "NomPoolsMigrationInit",
                    "index": 25
                  },
                  {
                    "name": "NomPoolsMigrationOngoing",
                    "fields": [
                      {
                        "name": "next_key",
                        "type": 451,
                        "typeName": "Option<NomPoolsStage<AccountId>>"
                      }
                    ],
                    "index": 26
                  },
                  {
                    "name": "NomPoolsMigrationDone",
                    "index": 27
                  },
                  {
                    "name": "VestingMigrationInit",
                    "index": 28
                  },
                  {
                    "name": "VestingMigrationOngoing",
                    "fields": [
                      {
                        "name": "next_key",
                        "type": 129,
                        "typeName": "Option<AccountId>"
                      }
                    ],
                    "index": 29
                  },
                  {
                    "name": "VestingMigrationDone",
                    "index": 30
                  },
                  {
                    "name": "FastUnstakeMigrationInit",
                    "index": 31
                  },
                  {
                    "name": "FastUnstakeMigrationOngoing",
                    "fields": [
                      {
                        "name": "next_key",
                        "type": 453,
                        "typeName": "Option<FastUnstakeStage<AccountId>>"
                      }
                    ],
                    "index": 32
                  },
                  {
                    "name": "FastUnstakeMigrationDone",
                    "index": 33
                  },
                  {
                    "name": "IndicesMigrationInit",
                    "index": 34
                  },
                  {
                    "name": "IndicesMigrationOngoing",
                    "fields": [
                      {
                        "name": "next_key",
                        "type": 455,
                        "typeName": "Option<()>"
                      }
                    ],
                    "index": 35
                  },
                  {
                    "name": "IndicesMigrationDone",
                    "index": 36
                  },
                  {
                    "name": "ReferendaMigrationInit",
                    "index": 37
                  },
                  {
                    "name": "ReferendaMigrationOngoing",
                    "fields": [
                      {
                        "name": "last_key",
                        "type": 456,
                        "typeName": "Option<ReferendaStage>"
                      }
                    ],
                    "index": 38
                  },
                  {
                    "name": "ReferendaMigrationDone",
                    "index": 39
                  },
                  {
                    "name": "BagsListMigrationInit",
                    "index": 40
                  },
                  {
                    "name": "BagsListMigrationOngoing",
                    "fields": [
                      {
                        "name": "next_key",
                        "type": 458,
                        "typeName": "Option<BagsListStage<AccountId, BagsListScore>>"
                      }
                    ],
                    "index": 41
                  },
                  {
                    "name": "BagsListMigrationDone",
                    "index": 42
                  },
                  {
                    "name": "SchedulerMigrationInit",
                    "index": 43
                  },
                  {
                    "name": "SchedulerMigrationOngoing",
                    "fields": [
                      {
                        "name": "last_key",
                        "type": 461,
                        "typeName": "Option<scheduler::SchedulerStage<BlockNumber>>"
                      }
                    ],
                    "index": 44
                  },
                  {
                    "name": "SchedulerMigrationDone",
                    "index": 45
                  },
                  {
                    "name": "ConvictionVotingMigrationInit",
                    "index": 46
                  },
                  {
                    "name": "ConvictionVotingMigrationOngoing",
                    "fields": [
                      {
                        "name": "last_key",
                        "type": 463,
                        "typeName": "Option<conviction_voting::ConvictionVotingStage<AccountId, VotingClass>\n>"
                      }
                    ],
                    "index": 47
                  },
                  {
                    "name": "ConvictionVotingMigrationDone",
                    "index": 48
                  },
                  {
                    "name": "BountiesMigrationInit",
                    "index": 49
                  },
                  {
                    "name": "BountiesMigrationOngoing",
                    "fields": [
                      {
                        "name": "last_key",
                        "type": 467,
                        "typeName": "Option<bounties::BountiesStage>"
                      }
                    ],
                    "index": 50
                  },
                  {
                    "name": "BountiesMigrationDone",
                    "index": 51
                  },
                  {
                    "name": "AssetRateMigrationInit",
                    "index": 52
                  },
                  {
                    "name": "AssetRateMigrationOngoing",
                    "fields": [
                      {
                        "name": "last_key",
                        "type": 469,
                        "typeName": "Option<AssetKind>"
                      }
                    ],
                    "index": 53
                  },
                  {
                    "name": "AssetRateMigrationDone",
                    "index": 54
                  },
                  {
                    "name": "CrowdloanMigrationInit",
                    "index": 55
                  },
                  {
                    "name": "CrowdloanMigrationOngoing",
                    "fields": [
                      {
                        "name": "last_key",
                        "type": 470,
                        "typeName": "Option<crowdloan::CrowdloanStage>"
                      }
                    ],
                    "index": 56
                  },
                  {
                    "name": "CrowdloanMigrationDone",
                    "index": 57
                  },
                  {
                    "name": "MigrationDone",
                    "index": 58
                  }
                ]
              }
            }
          }
        },
        {
          "id": 442,
          "type": {
            "path": [
              "Option"
            ],
            "params": [
              {
                "name": "T",
                "type": 443
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "None",
                    "index": 0
                  },
                  {
                    "name": "Some",
                    "fields": [
                      {
                        "type": 443
                      }
                    ],
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 443,
          "type": {
            "def": {
              "tuple": [
                0,
                1
              ]
            }
          }
        },
        {
          "id": 444,
          "type": {
            "path": [
              "Option"
            ],
            "params": [
              {
                "name": "T",
                "type": 445
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "None",
                    "index": 0
                  },
                  {
                    "name": "Some",
                    "fields": [
                      {
                        "type": 445
                      }
                    ],
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 445,
          "type": {
            "path": [
              "pallet_rc_migrator",
              "claims",
              "ClaimsStage"
            ],
            "params": [
              {
                "name": "AccountId",
                "type": 0
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "StorageValues",
                    "index": 0
                  },
                  {
                    "name": "Claims",
                    "fields": [
                      {
                        "type": 446,
                        "typeName": "Option<EthereumAddress>"
                      }
                    ],
                    "index": 1
                  },
                  {
                    "name": "Vesting",
                    "fields": [
                      {
                        "type": 446,
                        "typeName": "Option<EthereumAddress>"
                      }
                    ],
                    "index": 2
                  },
                  {
                    "name": "Signing",
                    "fields": [
                      {
                        "type": 446,
                        "typeName": "Option<EthereumAddress>"
                      }
                    ],
                    "index": 3
                  },
                  {
                    "name": "Preclaims",
                    "fields": [
                      {
                        "type": 129,
                        "typeName": "Option<AccountId>"
                      }
                    ],
                    "index": 4
                  },
                  {
                    "name": "Finished",
                    "index": 5
                  }
                ]
              }
            }
          }
        },
        {
          "id": 446,
          "type": {
            "path": [
              "Option"
            ],
            "params": [
              {
                "name": "T",
                "type": 447
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "None",
                    "index": 0
                  },
                  {
                    "name": "Some",
                    "fields": [
                      {
                        "type": 447
                      }
                    ],
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 447,
          "type": {
            "path": [
              "pallet_rc_migrator",
              "claims",
              "alias",
              "EthereumAddress"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 62,
                    "typeName": "[u8; 20]"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 448,
          "type": {
            "path": [
              "Option"
            ],
            "params": [
              {
                "name": "T",
                "type": 449
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "None",
                    "index": 0
                  },
                  {
                    "name": "Some",
                    "fields": [
                      {
                        "type": 449
                      }
                    ],
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 449,
          "type": {
            "def": {
              "tuple": [
                450,
                4
              ]
            }
          }
        },
        {
          "id": 450,
          "type": {
            "def": {
              "tuple": [
                13,
                4
              ]
            }
          }
        },
        {
          "id": 451,
          "type": {
            "path": [
              "Option"
            ],
            "params": [
              {
                "name": "T",
                "type": 452
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "None",
                    "index": 0
                  },
                  {
                    "name": "Some",
                    "fields": [
                      {
                        "type": 452
                      }
                    ],
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 452,
          "type": {
            "path": [
              "pallet_rc_migrator",
              "staking",
              "nom_pools",
              "NomPoolsStage"
            ],
            "params": [
              {
                "name": "AccountId",
                "type": 0
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "StorageValues",
                    "index": 0
                  },
                  {
                    "name": "PoolMembers",
                    "fields": [
                      {
                        "type": 129,
                        "typeName": "Option<AccountId>"
                      }
                    ],
                    "index": 1
                  },
                  {
                    "name": "BondedPools",
                    "fields": [
                      {
                        "type": 154,
                        "typeName": "Option<PoolId>"
                      }
                    ],
                    "index": 2
                  },
                  {
                    "name": "RewardPools",
                    "fields": [
                      {
                        "type": 154,
                        "typeName": "Option<PoolId>"
                      }
                    ],
                    "index": 3
                  },
                  {
                    "name": "SubPoolsStorage",
                    "fields": [
                      {
                        "type": 154,
                        "typeName": "Option<PoolId>"
                      }
                    ],
                    "index": 4
                  },
                  {
                    "name": "Metadata",
                    "fields": [
                      {
                        "type": 154,
                        "typeName": "Option<PoolId>"
                      }
                    ],
                    "index": 5
                  },
                  {
                    "name": "ReversePoolIdLookup",
                    "fields": [
                      {
                        "type": 129,
                        "typeName": "Option<AccountId>"
                      }
                    ],
                    "index": 6
                  },
                  {
                    "name": "ClaimPermissions",
                    "fields": [
                      {
                        "type": 129,
                        "typeName": "Option<AccountId>"
                      }
                    ],
                    "index": 7
                  },
                  {
                    "name": "Finished",
                    "index": 8
                  }
                ]
              }
            }
          }
        },
        {
          "id": 453,
          "type": {
            "path": [
              "Option"
            ],
            "params": [
              {
                "name": "T",
                "type": 454
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "None",
                    "index": 0
                  },
                  {
                    "name": "Some",
                    "fields": [
                      {
                        "type": 454
                      }
                    ],
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 454,
          "type": {
            "path": [
              "pallet_rc_migrator",
              "staking",
              "fast_unstake",
              "FastUnstakeStage"
            ],
            "params": [
              {
                "name": "AccountId",
                "type": 0
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "StorageValues",
                    "index": 0
                  },
                  {
                    "name": "Queue",
                    "fields": [
                      {
                        "type": 129,
                        "typeName": "Option<AccountId>"
                      }
                    ],
                    "index": 1
                  },
                  {
                    "name": "Finished",
                    "index": 2
                  }
                ]
              }
            }
          }
        },
        {
          "id": 455,
          "type": {
            "path": [
              "Option"
            ],
            "params": [
              {
                "name": "T",
                "type": 35
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "None",
                    "index": 0
                  },
                  {
                    "name": "Some",
                    "fields": [
                      {
                        "type": 35
                      }
                    ],
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 456,
          "type": {
            "path": [
              "Option"
            ],
            "params": [
              {
                "name": "T",
                "type": 457
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "None",
                    "index": 0
                  },
                  {
                    "name": "Some",
                    "fields": [
                      {
                        "type": 457
                      }
                    ],
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 457,
          "type": {
            "path": [
              "pallet_rc_migrator",
              "referenda",
              "ReferendaStage"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "StorageValues",
                    "index": 0
                  },
                  {
                    "name": "Metadata",
                    "fields": [
                      {
                        "type": 154,
                        "typeName": "Option<u32>"
                      }
                    ],
                    "index": 1
                  },
                  {
                    "name": "ReferendumInfo",
                    "fields": [
                      {
                        "type": 154,
                        "typeName": "Option<u32>"
                      }
                    ],
                    "index": 2
                  }
                ]
              }
            }
          }
        },
        {
          "id": 458,
          "type": {
            "path": [
              "Option"
            ],
            "params": [
              {
                "name": "T",
                "type": 459
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "None",
                    "index": 0
                  },
                  {
                    "name": "Some",
                    "fields": [
                      {
                        "type": 459
                      }
                    ],
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 459,
          "type": {
            "path": [
              "pallet_rc_migrator",
              "staking",
              "bags_list",
              "BagsListStage"
            ],
            "params": [
              {
                "name": "AccountId",
                "type": 0
              },
              {
                "name": "Score",
                "type": 12
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "ListNodes",
                    "fields": [
                      {
                        "type": 129,
                        "typeName": "Option<AccountId>"
                      }
                    ],
                    "index": 0
                  },
                  {
                    "name": "ListBags",
                    "fields": [
                      {
                        "type": 460,
                        "typeName": "Option<Score>"
                      }
                    ],
                    "index": 1
                  },
                  {
                    "name": "Finished",
                    "index": 2
                  }
                ]
              }
            }
          }
        },
        {
          "id": 460,
          "type": {
            "path": [
              "Option"
            ],
            "params": [
              {
                "name": "T",
                "type": 12
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "None",
                    "index": 0
                  },
                  {
                    "name": "Some",
                    "fields": [
                      {
                        "type": 12
                      }
                    ],
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 461,
          "type": {
            "path": [
              "Option"
            ],
            "params": [
              {
                "name": "T",
                "type": 462
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "None",
                    "index": 0
                  },
                  {
                    "name": "Some",
                    "fields": [
                      {
                        "type": 462
                      }
                    ],
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 462,
          "type": {
            "path": [
              "pallet_rc_migrator",
              "scheduler",
              "SchedulerStage"
            ],
            "params": [
              {
                "name": "BlockNumber",
                "type": 4
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "IncompleteSince",
                    "index": 0
                  },
                  {
                    "name": "Agenda",
                    "fields": [
                      {
                        "type": 154,
                        "typeName": "Option<BlockNumber>"
                      }
                    ],
                    "index": 1
                  },
                  {
                    "name": "Retries",
                    "fields": [
                      {
                        "type": 101,
                        "typeName": "Option<TaskAddress<BlockNumber>>"
                      }
                    ],
                    "index": 2
                  },
                  {
                    "name": "Lookup",
                    "fields": [
                      {
                        "type": 33,
                        "typeName": "Option<TaskName>"
                      }
                    ],
                    "index": 3
                  },
                  {
                    "name": "Finished",
                    "index": 4
                  }
                ]
              }
            }
          }
        },
        {
          "id": 463,
          "type": {
            "path": [
              "Option"
            ],
            "params": [
              {
                "name": "T",
                "type": 464
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "None",
                    "index": 0
                  },
                  {
                    "name": "Some",
                    "fields": [
                      {
                        "type": 464
                      }
                    ],
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 464,
          "type": {
            "path": [
              "pallet_rc_migrator",
              "conviction_voting",
              "ConvictionVotingStage"
            ],
            "params": [
              {
                "name": "AccountId",
                "type": 0
              },
              {
                "name": "Class",
                "type": 93
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "VotingFor",
                    "fields": [
                      {
                        "type": 465,
                        "typeName": "Option<(AccountId, Class)>"
                      }
                    ],
                    "index": 0
                  },
                  {
                    "name": "ClassLocksFor",
                    "fields": [
                      {
                        "type": 129,
                        "typeName": "Option<AccountId>"
                      }
                    ],
                    "index": 1
                  },
                  {
                    "name": "Finished",
                    "index": 2
                  }
                ]
              }
            }
          }
        },
        {
          "id": 465,
          "type": {
            "path": [
              "Option"
            ],
            "params": [
              {
                "name": "T",
                "type": 466
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "None",
                    "index": 0
                  },
                  {
                    "name": "Some",
                    "fields": [
                      {
                        "type": 466
                      }
                    ],
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 466,
          "type": {
            "def": {
              "tuple": [
                0,
                93
              ]
            }
          }
        },
        {
          "id": 467,
          "type": {
            "path": [
              "Option"
            ],
            "params": [
              {
                "name": "T",
                "type": 468
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "None",
                    "index": 0
                  },
                  {
                    "name": "Some",
                    "fields": [
                      {
                        "type": 468
                      }
                    ],
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 468,
          "type": {
            "path": [
              "pallet_rc_migrator",
              "bounties",
              "BountiesStage"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "BountyCount",
                    "index": 0
                  },
                  {
                    "name": "BountyApprovals",
                    "index": 1
                  },
                  {
                    "name": "BountyDescriptions",
                    "fields": [
                      {
                        "name": "last_key",
                        "type": 154,
                        "typeName": "Option<BountyIndex>"
                      }
                    ],
                    "index": 2
                  },
                  {
                    "name": "Bounties",
                    "fields": [
                      {
                        "name": "last_key",
                        "type": 154,
                        "typeName": "Option<BountyIndex>"
                      }
                    ],
                    "index": 3
                  },
                  {
                    "name": "Finished",
                    "index": 4
                  }
                ]
              }
            }
          }
        },
        {
          "id": 469,
          "type": {
            "path": [
              "Option"
            ],
            "params": [
              {
                "name": "T",
                "type": 55
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "None",
                    "index": 0
                  },
                  {
                    "name": "Some",
                    "fields": [
                      {
                        "type": 55
                      }
                    ],
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 470,
          "type": {
            "path": [
              "Option"
            ],
            "params": [
              {
                "name": "T",
                "type": 471
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "None",
                    "index": 0
                  },
                  {
                    "name": "Some",
                    "fields": [
                      {
                        "type": 471
                      }
                    ],
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 471,
          "type": {
            "path": [
              "pallet_rc_migrator",
              "crowdloan",
              "CrowdloanStage"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Setup",
                    "index": 0
                  },
                  {
                    "name": "LeaseReserve",
                    "fields": [
                      {
                        "name": "last_key",
                        "type": 472,
                        "typeName": "Option<ParaId>"
                      }
                    ],
                    "index": 1
                  },
                  {
                    "name": "CrowdloanContribution",
                    "fields": [
                      {
                        "name": "last_key",
                        "type": 472,
                        "typeName": "Option<ParaId>"
                      }
                    ],
                    "index": 2
                  },
                  {
                    "name": "CrowdloanReserve",
                    "index": 3
                  },
                  {
                    "name": "Finished",
                    "index": 4
                  }
                ]
              }
            }
          }
        },
        {
          "id": 472,
          "type": {
            "path": [
              "Option"
            ],
            "params": [
              {
                "name": "T",
                "type": 163
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "None",
                    "index": 0
                  },
                  {
                    "name": "Some",
                    "fields": [
                      {
                        "type": 163
                      }
                    ],
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 473,
          "type": {
            "path": [
              "sp_runtime",
              "traits",
              "BlakeTwo256"
            ],
            "def": {
              "composite": {}
            }
          }
        },
        {
          "id": 474,
          "type": {
            "path": [
              "bounded_collections",
              "bounded_vec",
              "BoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 2
              },
              {
                "name": "S",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 14,
                    "typeName": "Vec<T>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 475,
          "type": {
            "path": [
              "pallet_conviction_voting",
              "types",
              "Tally"
            ],
            "params": [
              {
                "name": "Votes",
                "type": 6
              },
              {
                "name": "Total",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "ayes",
                    "type": 6,
                    "typeName": "Votes"
                  },
                  {
                    "name": "nays",
                    "type": 6,
                    "typeName": "Votes"
                  },
                  {
                    "name": "support",
                    "type": 6,
                    "typeName": "Votes"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 476,
          "type": {
            "path": [
              "pallet_whitelist",
              "pallet",
              "Event"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "CallWhitelisted",
                    "fields": [
                      {
                        "name": "call_hash",
                        "type": 13,
                        "typeName": "T::Hash"
                      }
                    ],
                    "index": 0
                  },
                  {
                    "name": "WhitelistedCallRemoved",
                    "fields": [
                      {
                        "name": "call_hash",
                        "type": 13,
                        "typeName": "T::Hash"
                      }
                    ],
                    "index": 1
                  },
                  {
                    "name": "WhitelistedCallDispatched",
                    "fields": [
                      {
                        "name": "call_hash",
                        "type": 13,
                        "typeName": "T::Hash"
                      },
                      {
                        "name": "result",
                        "type": 477,
                        "typeName": "DispatchResultWithPostInfo"
                      }
                    ],
                    "index": 2
                  }
                ]
              }
            },
            "docs": [
              "The `Event` enum of this pallet"
            ]
          }
        },
        {
          "id": 477,
          "type": {
            "path": [
              "Result"
            ],
            "params": [
              {
                "name": "T",
                "type": 478
              },
              {
                "name": "E",
                "type": 480
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Ok",
                    "fields": [
                      {
                        "type": 478
                      }
                    ],
                    "index": 0
                  },
                  {
                    "name": "Err",
                    "fields": [
                      {
                        "type": 480
                      }
                    ],
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 478,
          "type": {
            "path": [
              "frame_support",
              "dispatch",
              "PostDispatchInfo"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "actual_weight",
                    "type": 479,
                    "typeName": "Option<Weight>"
                  },
                  {
                    "name": "pays_fee",
                    "type": 25,
                    "typeName": "Pays"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 479,
          "type": {
            "path": [
              "Option"
            ],
            "params": [
              {
                "name": "T",
                "type": 10
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "None",
                    "index": 0
                  },
                  {
                    "name": "Some",
                    "fields": [
                      {
                        "type": 10
                      }
                    ],
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 480,
          "type": {
            "path": [
              "sp_runtime",
              "DispatchErrorWithPostInfo"
            ],
            "params": [
              {
                "name": "Info",
                "type": 478
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "post_info",
                    "type": 478,
                    "typeName": "Info"
                  },
                  {
                    "name": "error",
                    "type": 26,
                    "typeName": "DispatchError"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 481,
          "type": {
            "path": [
              "polkadot_runtime_common",
              "claims",
              "pallet",
              "Event"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Claimed",
                    "fields": [
                      {
                        "name": "who",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "ethereum_address",
                        "type": 172,
                        "typeName": "EthereumAddress"
                      },
                      {
                        "name": "amount",
                        "type": 6,
                        "typeName": "BalanceOf<T>"
                      }
                    ],
                    "index": 0,
                    "docs": [
                      "Someone claimed some DOTs."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "The `Event` enum of this pallet"
            ]
          }
        },
        {
          "id": 482,
          "type": {
            "path": [
              "pallet_vesting",
              "pallet",
              "Event"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "VestingUpdated",
                    "fields": [
                      {
                        "name": "account",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "unvested",
                        "type": 6,
                        "typeName": "BalanceOf<T>"
                      }
                    ],
                    "index": 0,
                    "docs": [
                      "The amount vested has been updated. This could indicate a change in funds available.",
                      "The balance given is the amount which is left unvested (and thus locked)."
                    ]
                  },
                  {
                    "name": "VestingCompleted",
                    "fields": [
                      {
                        "name": "account",
                        "type": 0,
                        "typeName": "T::AccountId"
                      }
                    ],
                    "index": 1,
                    "docs": [
                      "An \\[account\\] has become fully vested."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "The `Event` enum of this pallet"
            ]
          }
        },
        {
          "id": 483,
          "type": {
            "path": [
              "pallet_utility",
              "pallet",
              "Event"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "BatchInterrupted",
                    "fields": [
                      {
                        "name": "index",
                        "type": 4,
                        "typeName": "u32"
                      },
                      {
                        "name": "error",
                        "type": 26,
                        "typeName": "DispatchError"
                      }
                    ],
                    "index": 0,
                    "docs": [
                      "Batch of dispatches did not complete fully. Index of first failing dispatch given, as",
                      "well as the error."
                    ]
                  },
                  {
                    "name": "BatchCompleted",
                    "index": 1,
                    "docs": [
                      "Batch of dispatches completed fully with no error."
                    ]
                  },
                  {
                    "name": "BatchCompletedWithErrors",
                    "index": 2,
                    "docs": [
                      "Batch of dispatches completed but has errors."
                    ]
                  },
                  {
                    "name": "ItemCompleted",
                    "index": 3,
                    "docs": [
                      "A single item within a Batch of dispatches has completed with no error."
                    ]
                  },
                  {
                    "name": "ItemFailed",
                    "fields": [
                      {
                        "name": "error",
                        "type": 26,
                        "typeName": "DispatchError"
                      }
                    ],
                    "index": 4,
                    "docs": [
                      "A single item within a Batch of dispatches has completed with error."
                    ]
                  },
                  {
                    "name": "DispatchedAs",
                    "fields": [
                      {
                        "name": "result",
                        "type": 34,
                        "typeName": "DispatchResult"
                      }
                    ],
                    "index": 5,
                    "docs": [
                      "A call was dispatched."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "The `Event` enum of this pallet"
            ]
          }
        },
        {
          "id": 484,
          "type": {
            "path": [
              "pallet_proxy",
              "pallet",
              "Event"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "ProxyExecuted",
                    "fields": [
                      {
                        "name": "result",
                        "type": 34,
                        "typeName": "DispatchResult"
                      }
                    ],
                    "index": 0,
                    "docs": [
                      "A proxy was executed correctly, with the given."
                    ]
                  },
                  {
                    "name": "PureCreated",
                    "fields": [
                      {
                        "name": "pure",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "who",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "proxy_type",
                        "type": 183,
                        "typeName": "T::ProxyType"
                      },
                      {
                        "name": "disambiguation_index",
                        "type": 93,
                        "typeName": "u16"
                      }
                    ],
                    "index": 1,
                    "docs": [
                      "A pure account has been created by new proxy with given",
                      "disambiguation index and proxy type."
                    ]
                  },
                  {
                    "name": "Announced",
                    "fields": [
                      {
                        "name": "real",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "proxy",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "call_hash",
                        "type": 13,
                        "typeName": "CallHashOf<T>"
                      }
                    ],
                    "index": 2,
                    "docs": [
                      "An announcement was placed to make a call in the future."
                    ]
                  },
                  {
                    "name": "ProxyAdded",
                    "fields": [
                      {
                        "name": "delegator",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "delegatee",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "proxy_type",
                        "type": 183,
                        "typeName": "T::ProxyType"
                      },
                      {
                        "name": "delay",
                        "type": 4,
                        "typeName": "BlockNumberFor<T>"
                      }
                    ],
                    "index": 3,
                    "docs": [
                      "A proxy was added."
                    ]
                  },
                  {
                    "name": "ProxyRemoved",
                    "fields": [
                      {
                        "name": "delegator",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "delegatee",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "proxy_type",
                        "type": 183,
                        "typeName": "T::ProxyType"
                      },
                      {
                        "name": "delay",
                        "type": 4,
                        "typeName": "BlockNumberFor<T>"
                      }
                    ],
                    "index": 4,
                    "docs": [
                      "A proxy was removed."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "The `Event` enum of this pallet"
            ]
          }
        },
        {
          "id": 485,
          "type": {
            "path": [
              "pallet_multisig",
              "pallet",
              "Event"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "NewMultisig",
                    "fields": [
                      {
                        "name": "approving",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "multisig",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "call_hash",
                        "type": 1,
                        "typeName": "CallHash"
                      }
                    ],
                    "index": 0,
                    "docs": [
                      "A new multisig operation has begun."
                    ]
                  },
                  {
                    "name": "MultisigApproval",
                    "fields": [
                      {
                        "name": "approving",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "timepoint",
                        "type": 186,
                        "typeName": "Timepoint<BlockNumberFor<T>>"
                      },
                      {
                        "name": "multisig",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "call_hash",
                        "type": 1,
                        "typeName": "CallHash"
                      }
                    ],
                    "index": 1,
                    "docs": [
                      "A multisig operation has been approved by someone."
                    ]
                  },
                  {
                    "name": "MultisigExecuted",
                    "fields": [
                      {
                        "name": "approving",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "timepoint",
                        "type": 186,
                        "typeName": "Timepoint<BlockNumberFor<T>>"
                      },
                      {
                        "name": "multisig",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "call_hash",
                        "type": 1,
                        "typeName": "CallHash"
                      },
                      {
                        "name": "result",
                        "type": 34,
                        "typeName": "DispatchResult"
                      }
                    ],
                    "index": 2,
                    "docs": [
                      "A multisig operation has been executed."
                    ]
                  },
                  {
                    "name": "MultisigCancelled",
                    "fields": [
                      {
                        "name": "cancelling",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "timepoint",
                        "type": 186,
                        "typeName": "Timepoint<BlockNumberFor<T>>"
                      },
                      {
                        "name": "multisig",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "call_hash",
                        "type": 1,
                        "typeName": "CallHash"
                      }
                    ],
                    "index": 3,
                    "docs": [
                      "A multisig operation has been cancelled."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "The `Event` enum of this pallet"
            ]
          }
        },
        {
          "id": 486,
          "type": {
            "path": [
              "pallet_bounties",
              "pallet",
              "Event"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              },
              {
                "name": "I",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "BountyProposed",
                    "fields": [
                      {
                        "name": "index",
                        "type": 4,
                        "typeName": "BountyIndex"
                      }
                    ],
                    "index": 0,
                    "docs": [
                      "New bounty proposal."
                    ]
                  },
                  {
                    "name": "BountyRejected",
                    "fields": [
                      {
                        "name": "index",
                        "type": 4,
                        "typeName": "BountyIndex"
                      },
                      {
                        "name": "bond",
                        "type": 6,
                        "typeName": "BalanceOf<T, I>"
                      }
                    ],
                    "index": 1,
                    "docs": [
                      "A bounty proposal was rejected; funds were slashed."
                    ]
                  },
                  {
                    "name": "BountyBecameActive",
                    "fields": [
                      {
                        "name": "index",
                        "type": 4,
                        "typeName": "BountyIndex"
                      }
                    ],
                    "index": 2,
                    "docs": [
                      "A bounty proposal is funded and became active."
                    ]
                  },
                  {
                    "name": "BountyAwarded",
                    "fields": [
                      {
                        "name": "index",
                        "type": 4,
                        "typeName": "BountyIndex"
                      },
                      {
                        "name": "beneficiary",
                        "type": 0,
                        "typeName": "T::AccountId"
                      }
                    ],
                    "index": 3,
                    "docs": [
                      "A bounty is awarded to a beneficiary."
                    ]
                  },
                  {
                    "name": "BountyClaimed",
                    "fields": [
                      {
                        "name": "index",
                        "type": 4,
                        "typeName": "BountyIndex"
                      },
                      {
                        "name": "payout",
                        "type": 6,
                        "typeName": "BalanceOf<T, I>"
                      },
                      {
                        "name": "beneficiary",
                        "type": 0,
                        "typeName": "T::AccountId"
                      }
                    ],
                    "index": 4,
                    "docs": [
                      "A bounty is claimed by beneficiary."
                    ]
                  },
                  {
                    "name": "BountyCanceled",
                    "fields": [
                      {
                        "name": "index",
                        "type": 4,
                        "typeName": "BountyIndex"
                      }
                    ],
                    "index": 5,
                    "docs": [
                      "A bounty is cancelled."
                    ]
                  },
                  {
                    "name": "BountyExtended",
                    "fields": [
                      {
                        "name": "index",
                        "type": 4,
                        "typeName": "BountyIndex"
                      }
                    ],
                    "index": 6,
                    "docs": [
                      "A bounty expiry is extended."
                    ]
                  },
                  {
                    "name": "BountyApproved",
                    "fields": [
                      {
                        "name": "index",
                        "type": 4,
                        "typeName": "BountyIndex"
                      }
                    ],
                    "index": 7,
                    "docs": [
                      "A bounty is approved."
                    ]
                  },
                  {
                    "name": "CuratorProposed",
                    "fields": [
                      {
                        "name": "bounty_id",
                        "type": 4,
                        "typeName": "BountyIndex"
                      },
                      {
                        "name": "curator",
                        "type": 0,
                        "typeName": "T::AccountId"
                      }
                    ],
                    "index": 8,
                    "docs": [
                      "A bounty curator is proposed."
                    ]
                  },
                  {
                    "name": "CuratorUnassigned",
                    "fields": [
                      {
                        "name": "bounty_id",
                        "type": 4,
                        "typeName": "BountyIndex"
                      }
                    ],
                    "index": 9,
                    "docs": [
                      "A bounty curator is unassigned."
                    ]
                  },
                  {
                    "name": "CuratorAccepted",
                    "fields": [
                      {
                        "name": "bounty_id",
                        "type": 4,
                        "typeName": "BountyIndex"
                      },
                      {
                        "name": "curator",
                        "type": 0,
                        "typeName": "T::AccountId"
                      }
                    ],
                    "index": 10,
                    "docs": [
                      "A bounty curator is accepted."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "The `Event` enum of this pallet"
            ]
          }
        },
        {
          "id": 487,
          "type": {
            "path": [
              "pallet_child_bounties",
              "pallet",
              "Event"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Added",
                    "fields": [
                      {
                        "name": "index",
                        "type": 4,
                        "typeName": "BountyIndex"
                      },
                      {
                        "name": "child_index",
                        "type": 4,
                        "typeName": "BountyIndex"
                      }
                    ],
                    "index": 0,
                    "docs": [
                      "A child-bounty is added."
                    ]
                  },
                  {
                    "name": "Awarded",
                    "fields": [
                      {
                        "name": "index",
                        "type": 4,
                        "typeName": "BountyIndex"
                      },
                      {
                        "name": "child_index",
                        "type": 4,
                        "typeName": "BountyIndex"
                      },
                      {
                        "name": "beneficiary",
                        "type": 0,
                        "typeName": "T::AccountId"
                      }
                    ],
                    "index": 1,
                    "docs": [
                      "A child-bounty is awarded to a beneficiary."
                    ]
                  },
                  {
                    "name": "Claimed",
                    "fields": [
                      {
                        "name": "index",
                        "type": 4,
                        "typeName": "BountyIndex"
                      },
                      {
                        "name": "child_index",
                        "type": 4,
                        "typeName": "BountyIndex"
                      },
                      {
                        "name": "payout",
                        "type": 6,
                        "typeName": "BalanceOf<T>"
                      },
                      {
                        "name": "beneficiary",
                        "type": 0,
                        "typeName": "T::AccountId"
                      }
                    ],
                    "index": 2,
                    "docs": [
                      "A child-bounty is claimed by beneficiary."
                    ]
                  },
                  {
                    "name": "Canceled",
                    "fields": [
                      {
                        "name": "index",
                        "type": 4,
                        "typeName": "BountyIndex"
                      },
                      {
                        "name": "child_index",
                        "type": 4,
                        "typeName": "BountyIndex"
                      }
                    ],
                    "index": 3,
                    "docs": [
                      "A child-bounty is cancelled."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "The `Event` enum of this pallet"
            ]
          }
        },
        {
          "id": 488,
          "type": {
            "path": [
              "pallet_election_provider_multi_phase",
              "pallet",
              "Event"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "SolutionStored",
                    "fields": [
                      {
                        "name": "compute",
                        "type": 489,
                        "typeName": "ElectionCompute"
                      },
                      {
                        "name": "origin",
                        "type": 129,
                        "typeName": "Option<T::AccountId>"
                      },
                      {
                        "name": "prev_ejected",
                        "type": 8,
                        "typeName": "bool"
                      }
                    ],
                    "index": 0,
                    "docs": [
                      "A solution was stored with the given compute.",
                      "",
                      "The `origin` indicates the origin of the solution. If `origin` is `Some(AccountId)`,",
                      "the stored solution was submitted in the signed phase by a miner with the `AccountId`.",
                      "Otherwise, the solution was stored either during the unsigned phase or by",
                      "`T::ForceOrigin`. The `bool` is `true` when a previous solution was ejected to make",
                      "room for this one."
                    ]
                  },
                  {
                    "name": "ElectionFinalized",
                    "fields": [
                      {
                        "name": "compute",
                        "type": 489,
                        "typeName": "ElectionCompute"
                      },
                      {
                        "name": "score",
                        "type": 242,
                        "typeName": "ElectionScore"
                      }
                    ],
                    "index": 1,
                    "docs": [
                      "The election has been finalized, with the given computation and score."
                    ]
                  },
                  {
                    "name": "ElectionFailed",
                    "index": 2,
                    "docs": [
                      "An election failed.",
                      "",
                      "Not much can be said about which computes failed in the process."
                    ]
                  },
                  {
                    "name": "Rewarded",
                    "fields": [
                      {
                        "name": "account",
                        "type": 0,
                        "typeName": "<T as frame_system::Config>::AccountId"
                      },
                      {
                        "name": "value",
                        "type": 6,
                        "typeName": "BalanceOf<T>"
                      }
                    ],
                    "index": 3,
                    "docs": [
                      "An account has been rewarded for their signed submission being finalized."
                    ]
                  },
                  {
                    "name": "Slashed",
                    "fields": [
                      {
                        "name": "account",
                        "type": 0,
                        "typeName": "<T as frame_system::Config>::AccountId"
                      },
                      {
                        "name": "value",
                        "type": 6,
                        "typeName": "BalanceOf<T>"
                      }
                    ],
                    "index": 4,
                    "docs": [
                      "An account has been slashed for submitting an invalid signed submission."
                    ]
                  },
                  {
                    "name": "PhaseTransitioned",
                    "fields": [
                      {
                        "name": "from",
                        "type": 490,
                        "typeName": "Phase<BlockNumberFor<T>>"
                      },
                      {
                        "name": "to",
                        "type": 490,
                        "typeName": "Phase<BlockNumberFor<T>>"
                      },
                      {
                        "name": "round",
                        "type": 4,
                        "typeName": "u32"
                      }
                    ],
                    "index": 5,
                    "docs": [
                      "There was a phase transition in a given round."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "The `Event` enum of this pallet"
            ]
          }
        },
        {
          "id": 489,
          "type": {
            "path": [
              "pallet_election_provider_multi_phase",
              "ElectionCompute"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "OnChain",
                    "index": 0
                  },
                  {
                    "name": "Signed",
                    "index": 1
                  },
                  {
                    "name": "Unsigned",
                    "index": 2
                  },
                  {
                    "name": "Fallback",
                    "index": 3
                  },
                  {
                    "name": "Emergency",
                    "index": 4
                  }
                ]
              }
            }
          }
        },
        {
          "id": 490,
          "type": {
            "path": [
              "pallet_election_provider_multi_phase",
              "Phase"
            ],
            "params": [
              {
                "name": "Bn",
                "type": 4
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Off",
                    "index": 0
                  },
                  {
                    "name": "Signed",
                    "index": 1
                  },
                  {
                    "name": "Unsigned",
                    "fields": [
                      {
                        "type": 491,
                        "typeName": "(bool, Bn)"
                      }
                    ],
                    "index": 2
                  },
                  {
                    "name": "Emergency",
                    "index": 3
                  }
                ]
              }
            }
          }
        },
        {
          "id": 491,
          "type": {
            "def": {
              "tuple": [
                8,
                4
              ]
            }
          }
        },
        {
          "id": 492,
          "type": {
            "path": [
              "pallet_bags_list",
              "pallet",
              "Event"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              },
              {
                "name": "I",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Rebagged",
                    "fields": [
                      {
                        "name": "who",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "from",
                        "type": 12,
                        "typeName": "T::Score"
                      },
                      {
                        "name": "to",
                        "type": 12,
                        "typeName": "T::Score"
                      }
                    ],
                    "index": 0,
                    "docs": [
                      "Moved an account from one bag to another."
                    ]
                  },
                  {
                    "name": "ScoreUpdated",
                    "fields": [
                      {
                        "name": "who",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "new_score",
                        "type": 12,
                        "typeName": "T::Score"
                      }
                    ],
                    "index": 1,
                    "docs": [
                      "Updated the score of some account to the given amount."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "The `Event` enum of this pallet"
            ]
          }
        },
        {
          "id": 493,
          "type": {
            "path": [
              "pallet_nomination_pools",
              "pallet",
              "Event"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Created",
                    "fields": [
                      {
                        "name": "depositor",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "pool_id",
                        "type": 4,
                        "typeName": "PoolId"
                      }
                    ],
                    "index": 0,
                    "docs": [
                      "A pool has been created."
                    ]
                  },
                  {
                    "name": "Bonded",
                    "fields": [
                      {
                        "name": "member",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "pool_id",
                        "type": 4,
                        "typeName": "PoolId"
                      },
                      {
                        "name": "bonded",
                        "type": 6,
                        "typeName": "BalanceOf<T>"
                      },
                      {
                        "name": "joined",
                        "type": 8,
                        "typeName": "bool"
                      }
                    ],
                    "index": 1,
                    "docs": [
                      "A member has became bonded in a pool."
                    ]
                  },
                  {
                    "name": "PaidOut",
                    "fields": [
                      {
                        "name": "member",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "pool_id",
                        "type": 4,
                        "typeName": "PoolId"
                      },
                      {
                        "name": "payout",
                        "type": 6,
                        "typeName": "BalanceOf<T>"
                      }
                    ],
                    "index": 2,
                    "docs": [
                      "A payout has been made to a member."
                    ]
                  },
                  {
                    "name": "Unbonded",
                    "fields": [
                      {
                        "name": "member",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "pool_id",
                        "type": 4,
                        "typeName": "PoolId"
                      },
                      {
                        "name": "balance",
                        "type": 6,
                        "typeName": "BalanceOf<T>"
                      },
                      {
                        "name": "points",
                        "type": 6,
                        "typeName": "BalanceOf<T>"
                      },
                      {
                        "name": "era",
                        "type": 4,
                        "typeName": "EraIndex"
                      }
                    ],
                    "index": 3,
                    "docs": [
                      "A member has unbonded from their pool.",
                      "",
                      "- `balance` is the corresponding balance of the number of points that has been",
                      "  requested to be unbonded (the argument of the `unbond` transaction) from the bonded",
                      "  pool.",
                      "- `points` is the number of points that are issued as a result of `balance` being",
                      "dissolved into the corresponding unbonding pool.",
                      "- `era` is the era in which the balance will be unbonded.",
                      "In the absence of slashing, these values will match. In the presence of slashing, the",
                      "number of points that are issued in the unbonding pool will be less than the amount",
                      "requested to be unbonded."
                    ]
                  },
                  {
                    "name": "Withdrawn",
                    "fields": [
                      {
                        "name": "member",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "pool_id",
                        "type": 4,
                        "typeName": "PoolId"
                      },
                      {
                        "name": "balance",
                        "type": 6,
                        "typeName": "BalanceOf<T>"
                      },
                      {
                        "name": "points",
                        "type": 6,
                        "typeName": "BalanceOf<T>"
                      }
                    ],
                    "index": 4,
                    "docs": [
                      "A member has withdrawn from their pool.",
                      "",
                      "The given number of `points` have been dissolved in return of `balance`.",
                      "",
                      "Similar to `Unbonded` event, in the absence of slashing, the ratio of point to balance",
                      "will be 1."
                    ]
                  },
                  {
                    "name": "Destroyed",
                    "fields": [
                      {
                        "name": "pool_id",
                        "type": 4,
                        "typeName": "PoolId"
                      }
                    ],
                    "index": 5,
                    "docs": [
                      "A pool has been destroyed."
                    ]
                  },
                  {
                    "name": "StateChanged",
                    "fields": [
                      {
                        "name": "pool_id",
                        "type": 4,
                        "typeName": "PoolId"
                      },
                      {
                        "name": "new_state",
                        "type": 253,
                        "typeName": "PoolState"
                      }
                    ],
                    "index": 6,
                    "docs": [
                      "The state of a pool has changed"
                    ]
                  },
                  {
                    "name": "MemberRemoved",
                    "fields": [
                      {
                        "name": "pool_id",
                        "type": 4,
                        "typeName": "PoolId"
                      },
                      {
                        "name": "member",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "released_balance",
                        "type": 6,
                        "typeName": "BalanceOf<T>"
                      }
                    ],
                    "index": 7,
                    "docs": [
                      "A member has been removed from a pool.",
                      "",
                      "The removal can be voluntary (withdrawn all unbonded funds) or involuntary (kicked).",
                      "Any funds that are still delegated (i.e. dangling delegation) are released and are",
                      "represented by `released_balance`."
                    ]
                  },
                  {
                    "name": "RolesUpdated",
                    "fields": [
                      {
                        "name": "root",
                        "type": 129,
                        "typeName": "Option<T::AccountId>"
                      },
                      {
                        "name": "bouncer",
                        "type": 129,
                        "typeName": "Option<T::AccountId>"
                      },
                      {
                        "name": "nominator",
                        "type": 129,
                        "typeName": "Option<T::AccountId>"
                      }
                    ],
                    "index": 8,
                    "docs": [
                      "The roles of a pool have been updated to the given new roles. Note that the depositor",
                      "can never change."
                    ]
                  },
                  {
                    "name": "PoolSlashed",
                    "fields": [
                      {
                        "name": "pool_id",
                        "type": 4,
                        "typeName": "PoolId"
                      },
                      {
                        "name": "balance",
                        "type": 6,
                        "typeName": "BalanceOf<T>"
                      }
                    ],
                    "index": 9,
                    "docs": [
                      "The active balance of pool `pool_id` has been slashed to `balance`."
                    ]
                  },
                  {
                    "name": "UnbondingPoolSlashed",
                    "fields": [
                      {
                        "name": "pool_id",
                        "type": 4,
                        "typeName": "PoolId"
                      },
                      {
                        "name": "era",
                        "type": 4,
                        "typeName": "EraIndex"
                      },
                      {
                        "name": "balance",
                        "type": 6,
                        "typeName": "BalanceOf<T>"
                      }
                    ],
                    "index": 10,
                    "docs": [
                      "The unbond pool at `era` of pool `pool_id` has been slashed to `balance`."
                    ]
                  },
                  {
                    "name": "PoolCommissionUpdated",
                    "fields": [
                      {
                        "name": "pool_id",
                        "type": 4,
                        "typeName": "PoolId"
                      },
                      {
                        "name": "current",
                        "type": 259,
                        "typeName": "Option<(Perbill, T::AccountId)>"
                      }
                    ],
                    "index": 11,
                    "docs": [
                      "A pool's commission setting has been changed."
                    ]
                  },
                  {
                    "name": "PoolMaxCommissionUpdated",
                    "fields": [
                      {
                        "name": "pool_id",
                        "type": 4,
                        "typeName": "PoolId"
                      },
                      {
                        "name": "max_commission",
                        "type": 43,
                        "typeName": "Perbill"
                      }
                    ],
                    "index": 12,
                    "docs": [
                      "A pool's maximum commission setting has been changed."
                    ]
                  },
                  {
                    "name": "PoolCommissionChangeRateUpdated",
                    "fields": [
                      {
                        "name": "pool_id",
                        "type": 4,
                        "typeName": "PoolId"
                      },
                      {
                        "name": "change_rate",
                        "type": 261,
                        "typeName": "CommissionChangeRate<BlockNumberFor<T>>"
                      }
                    ],
                    "index": 13,
                    "docs": [
                      "A pool's commission `change_rate` has been changed."
                    ]
                  },
                  {
                    "name": "PoolCommissionClaimPermissionUpdated",
                    "fields": [
                      {
                        "name": "pool_id",
                        "type": 4,
                        "typeName": "PoolId"
                      },
                      {
                        "name": "permission",
                        "type": 262,
                        "typeName": "Option<CommissionClaimPermission<T::AccountId>>"
                      }
                    ],
                    "index": 14,
                    "docs": [
                      "Pool commission claim permission has been updated."
                    ]
                  },
                  {
                    "name": "PoolCommissionClaimed",
                    "fields": [
                      {
                        "name": "pool_id",
                        "type": 4,
                        "typeName": "PoolId"
                      },
                      {
                        "name": "commission",
                        "type": 6,
                        "typeName": "BalanceOf<T>"
                      }
                    ],
                    "index": 15,
                    "docs": [
                      "Pool commission has been claimed."
                    ]
                  },
                  {
                    "name": "MinBalanceDeficitAdjusted",
                    "fields": [
                      {
                        "name": "pool_id",
                        "type": 4,
                        "typeName": "PoolId"
                      },
                      {
                        "name": "amount",
                        "type": 6,
                        "typeName": "BalanceOf<T>"
                      }
                    ],
                    "index": 16,
                    "docs": [
                      "Topped up deficit in frozen ED of the reward pool."
                    ]
                  },
                  {
                    "name": "MinBalanceExcessAdjusted",
                    "fields": [
                      {
                        "name": "pool_id",
                        "type": 4,
                        "typeName": "PoolId"
                      },
                      {
                        "name": "amount",
                        "type": 6,
                        "typeName": "BalanceOf<T>"
                      }
                    ],
                    "index": 17,
                    "docs": [
                      "Claimed excess frozen ED of af the reward pool."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Events of this pallet."
            ]
          }
        },
        {
          "id": 494,
          "type": {
            "path": [
              "pallet_fast_unstake",
              "pallet",
              "Event"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Unstaked",
                    "fields": [
                      {
                        "name": "stash",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "result",
                        "type": 34,
                        "typeName": "DispatchResult"
                      }
                    ],
                    "index": 0,
                    "docs": [
                      "A staker was unstaked."
                    ]
                  },
                  {
                    "name": "Slashed",
                    "fields": [
                      {
                        "name": "stash",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "amount",
                        "type": 6,
                        "typeName": "BalanceOf<T>"
                      }
                    ],
                    "index": 1,
                    "docs": [
                      "A staker was slashed for requesting fast-unstake whilst being exposed."
                    ]
                  },
                  {
                    "name": "BatchChecked",
                    "fields": [
                      {
                        "name": "eras",
                        "type": 123,
                        "typeName": "Vec<EraIndex>"
                      }
                    ],
                    "index": 2,
                    "docs": [
                      "A batch was partially checked for the given eras, but the process did not finish."
                    ]
                  },
                  {
                    "name": "BatchFinished",
                    "fields": [
                      {
                        "name": "size",
                        "type": 4,
                        "typeName": "u32"
                      }
                    ],
                    "index": 3,
                    "docs": [
                      "A batch of a given size was terminated.",
                      "",
                      "This is always follows by a number of `Unstaked` or `Slashed` events, marking the end",
                      "of the batch. A new batch will be created upon next block."
                    ]
                  },
                  {
                    "name": "InternalError",
                    "index": 4,
                    "docs": [
                      "An internal error happened. Operations will be paused now."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "The `Event` enum of this pallet"
            ]
          }
        },
        {
          "id": 495,
          "type": {
            "path": [
              "pallet_delegated_staking",
              "pallet",
              "Event"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Delegated",
                    "fields": [
                      {
                        "name": "agent",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "delegator",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "amount",
                        "type": 6,
                        "typeName": "BalanceOf<T>"
                      }
                    ],
                    "index": 0,
                    "docs": [
                      "Funds delegated by a delegator."
                    ]
                  },
                  {
                    "name": "Released",
                    "fields": [
                      {
                        "name": "agent",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "delegator",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "amount",
                        "type": 6,
                        "typeName": "BalanceOf<T>"
                      }
                    ],
                    "index": 1,
                    "docs": [
                      "Funds released to a delegator."
                    ]
                  },
                  {
                    "name": "Slashed",
                    "fields": [
                      {
                        "name": "agent",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "delegator",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "amount",
                        "type": 6,
                        "typeName": "BalanceOf<T>"
                      }
                    ],
                    "index": 2,
                    "docs": [
                      "Funds slashed from a delegator."
                    ]
                  },
                  {
                    "name": "MigratedDelegation",
                    "fields": [
                      {
                        "name": "agent",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "delegator",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "amount",
                        "type": 6,
                        "typeName": "BalanceOf<T>"
                      }
                    ],
                    "index": 3,
                    "docs": [
                      "Unclaimed delegation funds migrated to delegator."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "The `Event` enum of this pallet"
            ]
          }
        },
        {
          "id": 496,
          "type": {
            "path": [
              "polkadot_runtime_parachains",
              "inclusion",
              "pallet",
              "Event"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "CandidateBacked",
                    "fields": [
                      {
                        "type": 497,
                        "typeName": "CandidateReceipt<T::Hash>"
                      },
                      {
                        "type": 299,
                        "typeName": "HeadData"
                      },
                      {
                        "type": 498,
                        "typeName": "CoreIndex"
                      },
                      {
                        "type": 499,
                        "typeName": "GroupIndex"
                      }
                    ],
                    "index": 0,
                    "docs": [
                      "A candidate was backed. `[candidate, head_data]`"
                    ]
                  },
                  {
                    "name": "CandidateIncluded",
                    "fields": [
                      {
                        "type": 497,
                        "typeName": "CandidateReceipt<T::Hash>"
                      },
                      {
                        "type": 299,
                        "typeName": "HeadData"
                      },
                      {
                        "type": 498,
                        "typeName": "CoreIndex"
                      },
                      {
                        "type": 499,
                        "typeName": "GroupIndex"
                      }
                    ],
                    "index": 1,
                    "docs": [
                      "A candidate was included. `[candidate, head_data]`"
                    ]
                  },
                  {
                    "name": "CandidateTimedOut",
                    "fields": [
                      {
                        "type": 497,
                        "typeName": "CandidateReceipt<T::Hash>"
                      },
                      {
                        "type": 299,
                        "typeName": "HeadData"
                      },
                      {
                        "type": 498,
                        "typeName": "CoreIndex"
                      }
                    ],
                    "index": 2,
                    "docs": [
                      "A candidate timed out. `[candidate, head_data]`"
                    ]
                  },
                  {
                    "name": "UpwardMessagesReceived",
                    "fields": [
                      {
                        "name": "from",
                        "type": 163,
                        "typeName": "ParaId"
                      },
                      {
                        "name": "count",
                        "type": 4,
                        "typeName": "u32"
                      }
                    ],
                    "index": 3,
                    "docs": [
                      "Some upward messages have been received and will be processed."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "The `Event` enum of this pallet"
            ]
          }
        },
        {
          "id": 497,
          "type": {
            "path": [
              "polkadot_primitives",
              "v8",
              "CandidateReceipt"
            ],
            "params": [
              {
                "name": "H",
                "type": 13
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "descriptor",
                    "type": 288,
                    "typeName": "CandidateDescriptor<H>"
                  },
                  {
                    "name": "commitments_hash",
                    "type": 13,
                    "typeName": "Hash"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 498,
          "type": {
            "path": [
              "polkadot_primitives",
              "v8",
              "CoreIndex"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 4,
                    "typeName": "u32"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 499,
          "type": {
            "path": [
              "polkadot_primitives",
              "v8",
              "GroupIndex"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 4,
                    "typeName": "u32"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 500,
          "type": {
            "path": [
              "polkadot_runtime_parachains",
              "paras",
              "pallet",
              "Event"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "CurrentCodeUpdated",
                    "fields": [
                      {
                        "type": 163,
                        "typeName": "ParaId"
                      }
                    ],
                    "index": 0,
                    "docs": [
                      "Current code has been updated for a Para. `para_id`"
                    ]
                  },
                  {
                    "name": "CurrentHeadUpdated",
                    "fields": [
                      {
                        "type": 163,
                        "typeName": "ParaId"
                      }
                    ],
                    "index": 1,
                    "docs": [
                      "Current head has been updated for a Para. `para_id`"
                    ]
                  },
                  {
                    "name": "CodeUpgradeScheduled",
                    "fields": [
                      {
                        "type": 163,
                        "typeName": "ParaId"
                      }
                    ],
                    "index": 2,
                    "docs": [
                      "A code upgrade has been scheduled for a Para. `para_id`"
                    ]
                  },
                  {
                    "name": "NewHeadNoted",
                    "fields": [
                      {
                        "type": 163,
                        "typeName": "ParaId"
                      }
                    ],
                    "index": 3,
                    "docs": [
                      "A new head has been noted for a Para. `para_id`"
                    ]
                  },
                  {
                    "name": "ActionQueued",
                    "fields": [
                      {
                        "type": 163,
                        "typeName": "ParaId"
                      },
                      {
                        "type": 4,
                        "typeName": "SessionIndex"
                      }
                    ],
                    "index": 4,
                    "docs": [
                      "A para has been queued to execute pending actions. `para_id`"
                    ]
                  },
                  {
                    "name": "PvfCheckStarted",
                    "fields": [
                      {
                        "type": 291,
                        "typeName": "ValidationCodeHash"
                      },
                      {
                        "type": 163,
                        "typeName": "ParaId"
                      }
                    ],
                    "index": 5,
                    "docs": [
                      "The given para either initiated or subscribed to a PVF check for the given validation",
                      "code. `code_hash` `para_id`"
                    ]
                  },
                  {
                    "name": "PvfCheckAccepted",
                    "fields": [
                      {
                        "type": 291,
                        "typeName": "ValidationCodeHash"
                      },
                      {
                        "type": 163,
                        "typeName": "ParaId"
                      }
                    ],
                    "index": 6,
                    "docs": [
                      "The given validation code was accepted by the PVF pre-checking vote.",
                      "`code_hash` `para_id`"
                    ]
                  },
                  {
                    "name": "PvfCheckRejected",
                    "fields": [
                      {
                        "type": 291,
                        "typeName": "ValidationCodeHash"
                      },
                      {
                        "type": 163,
                        "typeName": "ParaId"
                      }
                    ],
                    "index": 7,
                    "docs": [
                      "The given validation code was rejected by the PVF pre-checking vote.",
                      "`code_hash` `para_id`"
                    ]
                  }
                ]
              }
            },
            "docs": [
              "The `Event` enum of this pallet"
            ]
          }
        },
        {
          "id": 501,
          "type": {
            "path": [
              "polkadot_runtime_parachains",
              "hrmp",
              "pallet",
              "Event"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "OpenChannelRequested",
                    "fields": [
                      {
                        "name": "sender",
                        "type": 163,
                        "typeName": "ParaId"
                      },
                      {
                        "name": "recipient",
                        "type": 163,
                        "typeName": "ParaId"
                      },
                      {
                        "name": "proposed_max_capacity",
                        "type": 4,
                        "typeName": "u32"
                      },
                      {
                        "name": "proposed_max_message_size",
                        "type": 4,
                        "typeName": "u32"
                      }
                    ],
                    "index": 0,
                    "docs": [
                      "Open HRMP channel requested."
                    ]
                  },
                  {
                    "name": "OpenChannelCanceled",
                    "fields": [
                      {
                        "name": "by_parachain",
                        "type": 163,
                        "typeName": "ParaId"
                      },
                      {
                        "name": "channel_id",
                        "type": 315,
                        "typeName": "HrmpChannelId"
                      }
                    ],
                    "index": 1,
                    "docs": [
                      "An HRMP channel request sent by the receiver was canceled by either party."
                    ]
                  },
                  {
                    "name": "OpenChannelAccepted",
                    "fields": [
                      {
                        "name": "sender",
                        "type": 163,
                        "typeName": "ParaId"
                      },
                      {
                        "name": "recipient",
                        "type": 163,
                        "typeName": "ParaId"
                      }
                    ],
                    "index": 2,
                    "docs": [
                      "Open HRMP channel accepted."
                    ]
                  },
                  {
                    "name": "ChannelClosed",
                    "fields": [
                      {
                        "name": "by_parachain",
                        "type": 163,
                        "typeName": "ParaId"
                      },
                      {
                        "name": "channel_id",
                        "type": 315,
                        "typeName": "HrmpChannelId"
                      }
                    ],
                    "index": 3,
                    "docs": [
                      "HRMP channel closed."
                    ]
                  },
                  {
                    "name": "HrmpChannelForceOpened",
                    "fields": [
                      {
                        "name": "sender",
                        "type": 163,
                        "typeName": "ParaId"
                      },
                      {
                        "name": "recipient",
                        "type": 163,
                        "typeName": "ParaId"
                      },
                      {
                        "name": "proposed_max_capacity",
                        "type": 4,
                        "typeName": "u32"
                      },
                      {
                        "name": "proposed_max_message_size",
                        "type": 4,
                        "typeName": "u32"
                      }
                    ],
                    "index": 4,
                    "docs": [
                      "An HRMP channel was opened via Root origin."
                    ]
                  },
                  {
                    "name": "HrmpSystemChannelOpened",
                    "fields": [
                      {
                        "name": "sender",
                        "type": 163,
                        "typeName": "ParaId"
                      },
                      {
                        "name": "recipient",
                        "type": 163,
                        "typeName": "ParaId"
                      },
                      {
                        "name": "proposed_max_capacity",
                        "type": 4,
                        "typeName": "u32"
                      },
                      {
                        "name": "proposed_max_message_size",
                        "type": 4,
                        "typeName": "u32"
                      }
                    ],
                    "index": 5,
                    "docs": [
                      "An HRMP channel was opened with a system chain."
                    ]
                  },
                  {
                    "name": "OpenChannelDepositsUpdated",
                    "fields": [
                      {
                        "name": "sender",
                        "type": 163,
                        "typeName": "ParaId"
                      },
                      {
                        "name": "recipient",
                        "type": 163,
                        "typeName": "ParaId"
                      }
                    ],
                    "index": 6,
                    "docs": [
                      "An HRMP channel's deposits were updated."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "The `Event` enum of this pallet"
            ]
          }
        },
        {
          "id": 502,
          "type": {
            "path": [
              "polkadot_runtime_parachains",
              "disputes",
              "pallet",
              "Event"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "DisputeInitiated",
                    "fields": [
                      {
                        "type": 304,
                        "typeName": "CandidateHash"
                      },
                      {
                        "type": 503,
                        "typeName": "DisputeLocation"
                      }
                    ],
                    "index": 0,
                    "docs": [
                      "A dispute has been initiated. \\[candidate hash, dispute location\\]"
                    ]
                  },
                  {
                    "name": "DisputeConcluded",
                    "fields": [
                      {
                        "type": 304,
                        "typeName": "CandidateHash"
                      },
                      {
                        "type": 504,
                        "typeName": "DisputeResult"
                      }
                    ],
                    "index": 1,
                    "docs": [
                      "A dispute has concluded for or against a candidate.",
                      "`\\[para id, candidate hash, dispute result\\]`"
                    ]
                  },
                  {
                    "name": "Revert",
                    "fields": [
                      {
                        "type": 4,
                        "typeName": "BlockNumberFor<T>"
                      }
                    ],
                    "index": 2,
                    "docs": [
                      "A dispute has concluded with supermajority against a candidate.",
                      "Block authors should no longer build on top of this head and should",
                      "instead revert the block at the given height. This should be the",
                      "number of the child of the last known valid block in the chain."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "The `Event` enum of this pallet"
            ]
          }
        },
        {
          "id": 503,
          "type": {
            "path": [
              "polkadot_runtime_parachains",
              "disputes",
              "DisputeLocation"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Local",
                    "index": 0
                  },
                  {
                    "name": "Remote",
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 504,
          "type": {
            "path": [
              "polkadot_runtime_parachains",
              "disputes",
              "DisputeResult"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Valid",
                    "index": 0
                  },
                  {
                    "name": "Invalid",
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 505,
          "type": {
            "path": [
              "polkadot_runtime_parachains",
              "on_demand",
              "pallet",
              "Event"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "OnDemandOrderPlaced",
                    "fields": [
                      {
                        "name": "para_id",
                        "type": 163,
                        "typeName": "ParaId"
                      },
                      {
                        "name": "spot_price",
                        "type": 6,
                        "typeName": "BalanceOf<T>"
                      },
                      {
                        "name": "ordered_by",
                        "type": 0,
                        "typeName": "T::AccountId"
                      }
                    ],
                    "index": 0,
                    "docs": [
                      "An order was placed at some spot price amount by orderer ordered_by"
                    ]
                  },
                  {
                    "name": "SpotPriceSet",
                    "fields": [
                      {
                        "name": "spot_price",
                        "type": 6,
                        "typeName": "BalanceOf<T>"
                      }
                    ],
                    "index": 1,
                    "docs": [
                      "The value of the spot price has likely changed"
                    ]
                  }
                ]
              }
            },
            "docs": [
              "The `Event` enum of this pallet"
            ]
          }
        },
        {
          "id": 506,
          "type": {
            "path": [
              "polkadot_runtime_common",
              "paras_registrar",
              "pallet",
              "Event"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Registered",
                    "fields": [
                      {
                        "name": "para_id",
                        "type": 163,
                        "typeName": "ParaId"
                      },
                      {
                        "name": "manager",
                        "type": 0,
                        "typeName": "T::AccountId"
                      }
                    ],
                    "index": 0
                  },
                  {
                    "name": "Deregistered",
                    "fields": [
                      {
                        "name": "para_id",
                        "type": 163,
                        "typeName": "ParaId"
                      }
                    ],
                    "index": 1
                  },
                  {
                    "name": "Reserved",
                    "fields": [
                      {
                        "name": "para_id",
                        "type": 163,
                        "typeName": "ParaId"
                      },
                      {
                        "name": "who",
                        "type": 0,
                        "typeName": "T::AccountId"
                      }
                    ],
                    "index": 2
                  },
                  {
                    "name": "Swapped",
                    "fields": [
                      {
                        "name": "para_id",
                        "type": 163,
                        "typeName": "ParaId"
                      },
                      {
                        "name": "other_id",
                        "type": 163,
                        "typeName": "ParaId"
                      }
                    ],
                    "index": 3
                  }
                ]
              }
            },
            "docs": [
              "The `Event` enum of this pallet"
            ]
          }
        },
        {
          "id": 507,
          "type": {
            "path": [
              "polkadot_runtime_common",
              "slots",
              "pallet",
              "Event"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "NewLeasePeriod",
                    "fields": [
                      {
                        "name": "lease_period",
                        "type": 4,
                        "typeName": "LeasePeriodOf<T>"
                      }
                    ],
                    "index": 0,
                    "docs": [
                      "A new `[lease_period]` is beginning."
                    ]
                  },
                  {
                    "name": "Leased",
                    "fields": [
                      {
                        "name": "para_id",
                        "type": 163,
                        "typeName": "ParaId"
                      },
                      {
                        "name": "leaser",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "period_begin",
                        "type": 4,
                        "typeName": "LeasePeriodOf<T>"
                      },
                      {
                        "name": "period_count",
                        "type": 4,
                        "typeName": "LeasePeriodOf<T>"
                      },
                      {
                        "name": "extra_reserved",
                        "type": 6,
                        "typeName": "BalanceOf<T>"
                      },
                      {
                        "name": "total_amount",
                        "type": 6,
                        "typeName": "BalanceOf<T>"
                      }
                    ],
                    "index": 1,
                    "docs": [
                      "A para has won the right to a continuous set of lease periods as a parachain.",
                      "First balance is any extra amount reserved on top of the para's existing deposit.",
                      "Second balance is the total amount reserved."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "The `Event` enum of this pallet"
            ]
          }
        },
        {
          "id": 508,
          "type": {
            "path": [
              "polkadot_runtime_common",
              "auctions",
              "pallet",
              "Event"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "AuctionStarted",
                    "fields": [
                      {
                        "name": "auction_index",
                        "type": 4,
                        "typeName": "AuctionIndex"
                      },
                      {
                        "name": "lease_period",
                        "type": 4,
                        "typeName": "LeasePeriodOf<T>"
                      },
                      {
                        "name": "ending",
                        "type": 4,
                        "typeName": "BlockNumberFor<T>"
                      }
                    ],
                    "index": 0,
                    "docs": [
                      "An auction started. Provides its index and the block number where it will begin to",
                      "close and the first lease period of the quadruplet that is auctioned."
                    ]
                  },
                  {
                    "name": "AuctionClosed",
                    "fields": [
                      {
                        "name": "auction_index",
                        "type": 4,
                        "typeName": "AuctionIndex"
                      }
                    ],
                    "index": 1,
                    "docs": [
                      "An auction ended. All funds become unreserved."
                    ]
                  },
                  {
                    "name": "Reserved",
                    "fields": [
                      {
                        "name": "bidder",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "extra_reserved",
                        "type": 6,
                        "typeName": "BalanceOf<T>"
                      },
                      {
                        "name": "total_amount",
                        "type": 6,
                        "typeName": "BalanceOf<T>"
                      }
                    ],
                    "index": 2,
                    "docs": [
                      "Funds were reserved for a winning bid. First balance is the extra amount reserved.",
                      "Second is the total."
                    ]
                  },
                  {
                    "name": "Unreserved",
                    "fields": [
                      {
                        "name": "bidder",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "amount",
                        "type": 6,
                        "typeName": "BalanceOf<T>"
                      }
                    ],
                    "index": 3,
                    "docs": [
                      "Funds were unreserved since bidder is no longer active. `[bidder, amount]`"
                    ]
                  },
                  {
                    "name": "ReserveConfiscated",
                    "fields": [
                      {
                        "name": "para_id",
                        "type": 163,
                        "typeName": "ParaId"
                      },
                      {
                        "name": "leaser",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "amount",
                        "type": 6,
                        "typeName": "BalanceOf<T>"
                      }
                    ],
                    "index": 4,
                    "docs": [
                      "Someone attempted to lease the same slot twice for a parachain. The amount is held in",
                      "reserve but no parachain slot has been leased."
                    ]
                  },
                  {
                    "name": "BidAccepted",
                    "fields": [
                      {
                        "name": "bidder",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "para_id",
                        "type": 163,
                        "typeName": "ParaId"
                      },
                      {
                        "name": "amount",
                        "type": 6,
                        "typeName": "BalanceOf<T>"
                      },
                      {
                        "name": "first_slot",
                        "type": 4,
                        "typeName": "LeasePeriodOf<T>"
                      },
                      {
                        "name": "last_slot",
                        "type": 4,
                        "typeName": "LeasePeriodOf<T>"
                      }
                    ],
                    "index": 5,
                    "docs": [
                      "A new bid has been accepted as the current winner."
                    ]
                  },
                  {
                    "name": "WinningOffset",
                    "fields": [
                      {
                        "name": "auction_index",
                        "type": 4,
                        "typeName": "AuctionIndex"
                      },
                      {
                        "name": "block_number",
                        "type": 4,
                        "typeName": "BlockNumberFor<T>"
                      }
                    ],
                    "index": 6,
                    "docs": [
                      "The winning offset was chosen for an auction. This will map into the `Winning` storage",
                      "map."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "The `Event` enum of this pallet"
            ]
          }
        },
        {
          "id": 509,
          "type": {
            "path": [
              "polkadot_runtime_common",
              "crowdloan",
              "pallet",
              "Event"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Created",
                    "fields": [
                      {
                        "name": "para_id",
                        "type": 163,
                        "typeName": "ParaId"
                      }
                    ],
                    "index": 0,
                    "docs": [
                      "Create a new crowdloaning campaign."
                    ]
                  },
                  {
                    "name": "Contributed",
                    "fields": [
                      {
                        "name": "who",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "fund_index",
                        "type": 163,
                        "typeName": "ParaId"
                      },
                      {
                        "name": "amount",
                        "type": 6,
                        "typeName": "BalanceOf<T>"
                      }
                    ],
                    "index": 1,
                    "docs": [
                      "Contributed to a crowd sale."
                    ]
                  },
                  {
                    "name": "Withdrew",
                    "fields": [
                      {
                        "name": "who",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "fund_index",
                        "type": 163,
                        "typeName": "ParaId"
                      },
                      {
                        "name": "amount",
                        "type": 6,
                        "typeName": "BalanceOf<T>"
                      }
                    ],
                    "index": 2,
                    "docs": [
                      "Withdrew full balance of a contributor."
                    ]
                  },
                  {
                    "name": "PartiallyRefunded",
                    "fields": [
                      {
                        "name": "para_id",
                        "type": 163,
                        "typeName": "ParaId"
                      }
                    ],
                    "index": 3,
                    "docs": [
                      "The loans in a fund have been partially dissolved, i.e. there are some left",
                      "over child keys that still need to be killed."
                    ]
                  },
                  {
                    "name": "AllRefunded",
                    "fields": [
                      {
                        "name": "para_id",
                        "type": 163,
                        "typeName": "ParaId"
                      }
                    ],
                    "index": 4,
                    "docs": [
                      "All loans in a fund have been refunded."
                    ]
                  },
                  {
                    "name": "Dissolved",
                    "fields": [
                      {
                        "name": "para_id",
                        "type": 163,
                        "typeName": "ParaId"
                      }
                    ],
                    "index": 5,
                    "docs": [
                      "Fund is dissolved."
                    ]
                  },
                  {
                    "name": "HandleBidResult",
                    "fields": [
                      {
                        "name": "para_id",
                        "type": 163,
                        "typeName": "ParaId"
                      },
                      {
                        "name": "result",
                        "type": 34,
                        "typeName": "DispatchResult"
                      }
                    ],
                    "index": 6,
                    "docs": [
                      "The result of trying to submit a new bid to the Slots pallet."
                    ]
                  },
                  {
                    "name": "Edited",
                    "fields": [
                      {
                        "name": "para_id",
                        "type": 163,
                        "typeName": "ParaId"
                      }
                    ],
                    "index": 7,
                    "docs": [
                      "The configuration to a crowdloan has been edited."
                    ]
                  },
                  {
                    "name": "MemoUpdated",
                    "fields": [
                      {
                        "name": "who",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "para_id",
                        "type": 163,
                        "typeName": "ParaId"
                      },
                      {
                        "name": "memo",
                        "type": 14,
                        "typeName": "Vec<u8>"
                      }
                    ],
                    "index": 8,
                    "docs": [
                      "A memo has been updated."
                    ]
                  },
                  {
                    "name": "AddedToNewRaise",
                    "fields": [
                      {
                        "name": "para_id",
                        "type": 163,
                        "typeName": "ParaId"
                      }
                    ],
                    "index": 9,
                    "docs": [
                      "A parachain has been moved to `NewRaise`"
                    ]
                  }
                ]
              }
            },
            "docs": [
              "The `Event` enum of this pallet"
            ]
          }
        },
        {
          "id": 510,
          "type": {
            "path": [
              "polkadot_runtime_parachains",
              "coretime",
              "pallet",
              "Event"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "RevenueInfoRequested",
                    "fields": [
                      {
                        "name": "when",
                        "type": 4,
                        "typeName": "BlockNumberFor<T>"
                      }
                    ],
                    "index": 0,
                    "docs": [
                      "The broker chain has asked for revenue information for a specific block."
                    ]
                  },
                  {
                    "name": "CoreAssigned",
                    "fields": [
                      {
                        "name": "core",
                        "type": 498,
                        "typeName": "CoreIndex"
                      }
                    ],
                    "index": 1,
                    "docs": [
                      "A core has received a new assignment from the broker chain."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "The `Event` enum of this pallet"
            ]
          }
        },
        {
          "id": 511,
          "type": {
            "path": [
              "pallet_state_trie_migration",
              "pallet",
              "Event"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Migrated",
                    "fields": [
                      {
                        "name": "top",
                        "type": 4,
                        "typeName": "u32"
                      },
                      {
                        "name": "child",
                        "type": 4,
                        "typeName": "u32"
                      },
                      {
                        "name": "compute",
                        "type": 512,
                        "typeName": "MigrationCompute"
                      }
                    ],
                    "index": 0,
                    "docs": [
                      "Given number of `(top, child)` keys were migrated respectively, with the given",
                      "`compute`."
                    ]
                  },
                  {
                    "name": "Slashed",
                    "fields": [
                      {
                        "name": "who",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "amount",
                        "type": 6,
                        "typeName": "BalanceOf<T>"
                      }
                    ],
                    "index": 1,
                    "docs": [
                      "Some account got slashed by the given amount."
                    ]
                  },
                  {
                    "name": "AutoMigrationFinished",
                    "index": 2,
                    "docs": [
                      "The auto migration task finished."
                    ]
                  },
                  {
                    "name": "Halted",
                    "fields": [
                      {
                        "name": "error",
                        "type": 513,
                        "typeName": "Error<T>"
                      }
                    ],
                    "index": 3,
                    "docs": [
                      "Migration got halted due to an error or miss-configuration."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Inner events of this pallet."
            ]
          }
        },
        {
          "id": 512,
          "type": {
            "path": [
              "pallet_state_trie_migration",
              "pallet",
              "MigrationCompute"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Signed",
                    "index": 0
                  },
                  {
                    "name": "Auto",
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 513,
          "type": {
            "path": [
              "pallet_state_trie_migration",
              "pallet",
              "Error"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "MaxSignedLimits",
                    "index": 0,
                    "docs": [
                      "Max signed limits not respected."
                    ]
                  },
                  {
                    "name": "KeyTooLong",
                    "index": 1,
                    "docs": [
                      "A key was longer than the configured maximum.",
                      "",
                      "This means that the migration halted at the current [`Progress`] and",
                      "can be resumed with a larger [`crate::Config::MaxKeyLen`] value.",
                      "Retrying with the same [`crate::Config::MaxKeyLen`] value will not work.",
                      "The value should only be increased to avoid a storage migration for the currently",
                      "stored [`crate::Progress::LastKey`]."
                    ]
                  },
                  {
                    "name": "NotEnoughFunds",
                    "index": 2,
                    "docs": [
                      "submitter does not have enough funds."
                    ]
                  },
                  {
                    "name": "BadWitness",
                    "index": 3,
                    "docs": [
                      "Bad witness data provided."
                    ]
                  },
                  {
                    "name": "SignedMigrationNotAllowed",
                    "index": 4,
                    "docs": [
                      "Signed migration is not allowed because the maximum limit is not set yet."
                    ]
                  },
                  {
                    "name": "BadChildRoot",
                    "index": 5,
                    "docs": [
                      "Bad child root provided."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "The `Error` enum of this pallet."
            ]
          }
        },
        {
          "id": 514,
          "type": {
            "path": [
              "pallet_xcm",
              "pallet",
              "Event"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Attempted",
                    "fields": [
                      {
                        "name": "outcome",
                        "type": 515,
                        "typeName": "xcm::latest::Outcome"
                      }
                    ],
                    "index": 0,
                    "docs": [
                      "Execution of an XCM message was attempted."
                    ]
                  },
                  {
                    "name": "Sent",
                    "fields": [
                      {
                        "name": "origin",
                        "type": 67,
                        "typeName": "Location"
                      },
                      {
                        "name": "destination",
                        "type": 67,
                        "typeName": "Location"
                      },
                      {
                        "name": "message",
                        "type": 389,
                        "typeName": "Xcm<()>"
                      },
                      {
                        "name": "message_id",
                        "type": 1,
                        "typeName": "XcmHash"
                      }
                    ],
                    "index": 1,
                    "docs": [
                      "A XCM message was sent."
                    ]
                  },
                  {
                    "name": "UnexpectedResponse",
                    "fields": [
                      {
                        "name": "origin",
                        "type": 67,
                        "typeName": "Location"
                      },
                      {
                        "name": "query_id",
                        "type": 12,
                        "typeName": "QueryId"
                      }
                    ],
                    "index": 2,
                    "docs": [
                      "Query response received which does not match a registered query. This may be because a",
                      "matching query was never registered, it may be because it is a duplicate response, or",
                      "because the query timed out."
                    ]
                  },
                  {
                    "name": "ResponseReady",
                    "fields": [
                      {
                        "name": "query_id",
                        "type": 12,
                        "typeName": "QueryId"
                      },
                      {
                        "name": "response",
                        "type": 397,
                        "typeName": "Response"
                      }
                    ],
                    "index": 3,
                    "docs": [
                      "Query response has been received and is ready for taking with `take_response`. There is",
                      "no registered notification call."
                    ]
                  },
                  {
                    "name": "Notified",
                    "fields": [
                      {
                        "name": "query_id",
                        "type": 12,
                        "typeName": "QueryId"
                      },
                      {
                        "name": "pallet_index",
                        "type": 2,
                        "typeName": "u8"
                      },
                      {
                        "name": "call_index",
                        "type": 2,
                        "typeName": "u8"
                      }
                    ],
                    "index": 4,
                    "docs": [
                      "Query response has been received and query is removed. The registered notification has",
                      "been dispatched and executed successfully."
                    ]
                  },
                  {
                    "name": "NotifyOverweight",
                    "fields": [
                      {
                        "name": "query_id",
                        "type": 12,
                        "typeName": "QueryId"
                      },
                      {
                        "name": "pallet_index",
                        "type": 2,
                        "typeName": "u8"
                      },
                      {
                        "name": "call_index",
                        "type": 2,
                        "typeName": "u8"
                      },
                      {
                        "name": "actual_weight",
                        "type": 10,
                        "typeName": "Weight"
                      },
                      {
                        "name": "max_budgeted_weight",
                        "type": 10,
                        "typeName": "Weight"
                      }
                    ],
                    "index": 5,
                    "docs": [
                      "Query response has been received and query is removed. The registered notification",
                      "could not be dispatched because the dispatch weight is greater than the maximum weight",
                      "originally budgeted by this runtime for the query result."
                    ]
                  },
                  {
                    "name": "NotifyDispatchError",
                    "fields": [
                      {
                        "name": "query_id",
                        "type": 12,
                        "typeName": "QueryId"
                      },
                      {
                        "name": "pallet_index",
                        "type": 2,
                        "typeName": "u8"
                      },
                      {
                        "name": "call_index",
                        "type": 2,
                        "typeName": "u8"
                      }
                    ],
                    "index": 6,
                    "docs": [
                      "Query response has been received and query is removed. There was a general error with",
                      "dispatching the notification call."
                    ]
                  },
                  {
                    "name": "NotifyDecodeFailed",
                    "fields": [
                      {
                        "name": "query_id",
                        "type": 12,
                        "typeName": "QueryId"
                      },
                      {
                        "name": "pallet_index",
                        "type": 2,
                        "typeName": "u8"
                      },
                      {
                        "name": "call_index",
                        "type": 2,
                        "typeName": "u8"
                      }
                    ],
                    "index": 7,
                    "docs": [
                      "Query response has been received and query is removed. The dispatch was unable to be",
                      "decoded into a `Call`; this might be due to dispatch function having a signature which",
                      "is not `(origin, QueryId, Response)`."
                    ]
                  },
                  {
                    "name": "InvalidResponder",
                    "fields": [
                      {
                        "name": "origin",
                        "type": 67,
                        "typeName": "Location"
                      },
                      {
                        "name": "query_id",
                        "type": 12,
                        "typeName": "QueryId"
                      },
                      {
                        "name": "expected_location",
                        "type": 402,
                        "typeName": "Option<Location>"
                      }
                    ],
                    "index": 8,
                    "docs": [
                      "Expected query response has been received but the origin location of the response does",
                      "not match that expected. The query remains registered for a later, valid, response to",
                      "be received and acted upon."
                    ]
                  },
                  {
                    "name": "InvalidResponderVersion",
                    "fields": [
                      {
                        "name": "origin",
                        "type": 67,
                        "typeName": "Location"
                      },
                      {
                        "name": "query_id",
                        "type": 12,
                        "typeName": "QueryId"
                      }
                    ],
                    "index": 9,
                    "docs": [
                      "Expected query response has been received but the expected origin location placed in",
                      "storage by this runtime previously cannot be decoded. The query remains registered.",
                      "",
                      "This is unexpected (since a location placed in storage in a previously executing",
                      "runtime should be readable prior to query timeout) and dangerous since the possibly",
                      "valid response will be dropped. Manual governance intervention is probably going to be",
                      "needed."
                    ]
                  },
                  {
                    "name": "ResponseTaken",
                    "fields": [
                      {
                        "name": "query_id",
                        "type": 12,
                        "typeName": "QueryId"
                      }
                    ],
                    "index": 10,
                    "docs": [
                      "Received query response has been read and removed."
                    ]
                  },
                  {
                    "name": "AssetsTrapped",
                    "fields": [
                      {
                        "name": "hash",
                        "type": 13,
                        "typeName": "H256"
                      },
                      {
                        "name": "origin",
                        "type": 67,
                        "typeName": "Location"
                      },
                      {
                        "name": "assets",
                        "type": 407,
                        "typeName": "VersionedAssets"
                      }
                    ],
                    "index": 11,
                    "docs": [
                      "Some assets have been placed in an asset trap."
                    ]
                  },
                  {
                    "name": "VersionChangeNotified",
                    "fields": [
                      {
                        "name": "destination",
                        "type": 67,
                        "typeName": "Location"
                      },
                      {
                        "name": "result",
                        "type": 4,
                        "typeName": "XcmVersion"
                      },
                      {
                        "name": "cost",
                        "type": 392,
                        "typeName": "Assets"
                      },
                      {
                        "name": "message_id",
                        "type": 1,
                        "typeName": "XcmHash"
                      }
                    ],
                    "index": 12,
                    "docs": [
                      "An XCM version change notification message has been attempted to be sent.",
                      "",
                      "The cost of sending it (borne by the chain) is included."
                    ]
                  },
                  {
                    "name": "SupportedVersionChanged",
                    "fields": [
                      {
                        "name": "location",
                        "type": 67,
                        "typeName": "Location"
                      },
                      {
                        "name": "version",
                        "type": 4,
                        "typeName": "XcmVersion"
                      }
                    ],
                    "index": 13,
                    "docs": [
                      "The supported version of a location has been changed. This might be through an",
                      "automatic notification or a manual intervention."
                    ]
                  },
                  {
                    "name": "NotifyTargetSendFail",
                    "fields": [
                      {
                        "name": "location",
                        "type": 67,
                        "typeName": "Location"
                      },
                      {
                        "name": "query_id",
                        "type": 12,
                        "typeName": "QueryId"
                      },
                      {
                        "name": "error",
                        "type": 375,
                        "typeName": "XcmError"
                      }
                    ],
                    "index": 14,
                    "docs": [
                      "A given location which had a version change subscription was dropped owing to an error",
                      "sending the notification to it."
                    ]
                  },
                  {
                    "name": "NotifyTargetMigrationFail",
                    "fields": [
                      {
                        "name": "location",
                        "type": 81,
                        "typeName": "VersionedLocation"
                      },
                      {
                        "name": "query_id",
                        "type": 12,
                        "typeName": "QueryId"
                      }
                    ],
                    "index": 15,
                    "docs": [
                      "A given location which had a version change subscription was dropped owing to an error",
                      "migrating the location to our new XCM format."
                    ]
                  },
                  {
                    "name": "InvalidQuerierVersion",
                    "fields": [
                      {
                        "name": "origin",
                        "type": 67,
                        "typeName": "Location"
                      },
                      {
                        "name": "query_id",
                        "type": 12,
                        "typeName": "QueryId"
                      }
                    ],
                    "index": 16,
                    "docs": [
                      "Expected query response has been received but the expected querier location placed in",
                      "storage by this runtime previously cannot be decoded. The query remains registered.",
                      "",
                      "This is unexpected (since a location placed in storage in a previously executing",
                      "runtime should be readable prior to query timeout) and dangerous since the possibly",
                      "valid response will be dropped. Manual governance intervention is probably going to be",
                      "needed."
                    ]
                  },
                  {
                    "name": "InvalidQuerier",
                    "fields": [
                      {
                        "name": "origin",
                        "type": 67,
                        "typeName": "Location"
                      },
                      {
                        "name": "query_id",
                        "type": 12,
                        "typeName": "QueryId"
                      },
                      {
                        "name": "expected_querier",
                        "type": 67,
                        "typeName": "Location"
                      },
                      {
                        "name": "maybe_actual_querier",
                        "type": 402,
                        "typeName": "Option<Location>"
                      }
                    ],
                    "index": 17,
                    "docs": [
                      "Expected query response has been received but the querier location of the response does",
                      "not match the expected. The query remains registered for a later, valid, response to",
                      "be received and acted upon."
                    ]
                  },
                  {
                    "name": "VersionNotifyStarted",
                    "fields": [
                      {
                        "name": "destination",
                        "type": 67,
                        "typeName": "Location"
                      },
                      {
                        "name": "cost",
                        "type": 392,
                        "typeName": "Assets"
                      },
                      {
                        "name": "message_id",
                        "type": 1,
                        "typeName": "XcmHash"
                      }
                    ],
                    "index": 18,
                    "docs": [
                      "A remote has requested XCM version change notification from us and we have honored it.",
                      "A version information message is sent to them and its cost is included."
                    ]
                  },
                  {
                    "name": "VersionNotifyRequested",
                    "fields": [
                      {
                        "name": "destination",
                        "type": 67,
                        "typeName": "Location"
                      },
                      {
                        "name": "cost",
                        "type": 392,
                        "typeName": "Assets"
                      },
                      {
                        "name": "message_id",
                        "type": 1,
                        "typeName": "XcmHash"
                      }
                    ],
                    "index": 19,
                    "docs": [
                      "We have requested that a remote chain send us XCM version change notifications."
                    ]
                  },
                  {
                    "name": "VersionNotifyUnrequested",
                    "fields": [
                      {
                        "name": "destination",
                        "type": 67,
                        "typeName": "Location"
                      },
                      {
                        "name": "cost",
                        "type": 392,
                        "typeName": "Assets"
                      },
                      {
                        "name": "message_id",
                        "type": 1,
                        "typeName": "XcmHash"
                      }
                    ],
                    "index": 20,
                    "docs": [
                      "We have requested that a remote chain stops sending us XCM version change",
                      "notifications."
                    ]
                  },
                  {
                    "name": "FeesPaid",
                    "fields": [
                      {
                        "name": "paying",
                        "type": 67,
                        "typeName": "Location"
                      },
                      {
                        "name": "fees",
                        "type": 392,
                        "typeName": "Assets"
                      }
                    ],
                    "index": 21,
                    "docs": [
                      "Fees were paid from a location for an operation (often for using `SendXcm`)."
                    ]
                  },
                  {
                    "name": "AssetsClaimed",
                    "fields": [
                      {
                        "name": "hash",
                        "type": 13,
                        "typeName": "H256"
                      },
                      {
                        "name": "origin",
                        "type": 67,
                        "typeName": "Location"
                      },
                      {
                        "name": "assets",
                        "type": 407,
                        "typeName": "VersionedAssets"
                      }
                    ],
                    "index": 22,
                    "docs": [
                      "Some assets have been claimed from an asset trap"
                    ]
                  },
                  {
                    "name": "VersionMigrationFinished",
                    "fields": [
                      {
                        "name": "version",
                        "type": 4,
                        "typeName": "XcmVersion"
                      }
                    ],
                    "index": 23,
                    "docs": [
                      "A XCM version migration finished."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "The `Event` enum of this pallet"
            ]
          }
        },
        {
          "id": 515,
          "type": {
            "path": [
              "staging_xcm",
              "v4",
              "traits",
              "Outcome"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Complete",
                    "fields": [
                      {
                        "name": "used",
                        "type": 10,
                        "typeName": "Weight"
                      }
                    ],
                    "index": 0
                  },
                  {
                    "name": "Incomplete",
                    "fields": [
                      {
                        "name": "used",
                        "type": 10,
                        "typeName": "Weight"
                      },
                      {
                        "name": "error",
                        "type": 375,
                        "typeName": "Error"
                      }
                    ],
                    "index": 1
                  },
                  {
                    "name": "Error",
                    "fields": [
                      {
                        "name": "error",
                        "type": 375,
                        "typeName": "Error"
                      }
                    ],
                    "index": 2
                  }
                ]
              }
            }
          }
        },
        {
          "id": 516,
          "type": {
            "path": [
              "pallet_message_queue",
              "pallet",
              "Event"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "ProcessingFailed",
                    "fields": [
                      {
                        "name": "id",
                        "type": 13,
                        "typeName": "H256",
                        "docs": [
                          "The `blake2_256` hash of the message."
                        ]
                      },
                      {
                        "name": "origin",
                        "type": 422,
                        "typeName": "MessageOriginOf<T>",
                        "docs": [
                          "The queue of the message."
                        ]
                      },
                      {
                        "name": "error",
                        "type": 517,
                        "typeName": "ProcessMessageError",
                        "docs": [
                          "The error that occurred.",
                          "",
                          "This error is pretty opaque. More fine-grained errors need to be emitted as events",
                          "by the `MessageProcessor`."
                        ]
                      }
                    ],
                    "index": 0,
                    "docs": [
                      "Message discarded due to an error in the `MessageProcessor` (usually a format error)."
                    ]
                  },
                  {
                    "name": "Processed",
                    "fields": [
                      {
                        "name": "id",
                        "type": 13,
                        "typeName": "H256",
                        "docs": [
                          "The `blake2_256` hash of the message."
                        ]
                      },
                      {
                        "name": "origin",
                        "type": 422,
                        "typeName": "MessageOriginOf<T>",
                        "docs": [
                          "The queue of the message."
                        ]
                      },
                      {
                        "name": "weight_used",
                        "type": 10,
                        "typeName": "Weight",
                        "docs": [
                          "How much weight was used to process the message."
                        ]
                      },
                      {
                        "name": "success",
                        "type": 8,
                        "typeName": "bool",
                        "docs": [
                          "Whether the message was processed.",
                          "",
                          "Note that this does not mean that the underlying `MessageProcessor` was internally",
                          "successful. It *solely* means that the MQ pallet will treat this as a success",
                          "condition and discard the message. Any internal error needs to be emitted as events",
                          "by the `MessageProcessor`."
                        ]
                      }
                    ],
                    "index": 1,
                    "docs": [
                      "Message is processed."
                    ]
                  },
                  {
                    "name": "OverweightEnqueued",
                    "fields": [
                      {
                        "name": "id",
                        "type": 1,
                        "typeName": "[u8; 32]",
                        "docs": [
                          "The `blake2_256` hash of the message."
                        ]
                      },
                      {
                        "name": "origin",
                        "type": 422,
                        "typeName": "MessageOriginOf<T>",
                        "docs": [
                          "The queue of the message."
                        ]
                      },
                      {
                        "name": "page_index",
                        "type": 4,
                        "typeName": "PageIndex",
                        "docs": [
                          "The page of the message."
                        ]
                      },
                      {
                        "name": "message_index",
                        "type": 4,
                        "typeName": "T::Size",
                        "docs": [
                          "The index of the message within the page."
                        ]
                      }
                    ],
                    "index": 2,
                    "docs": [
                      "Message placed in overweight queue."
                    ]
                  },
                  {
                    "name": "PageReaped",
                    "fields": [
                      {
                        "name": "origin",
                        "type": 422,
                        "typeName": "MessageOriginOf<T>",
                        "docs": [
                          "The queue of the page."
                        ]
                      },
                      {
                        "name": "index",
                        "type": 4,
                        "typeName": "PageIndex",
                        "docs": [
                          "The index of the page."
                        ]
                      }
                    ],
                    "index": 3,
                    "docs": [
                      "This page was reaped."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "The `Event` enum of this pallet"
            ]
          }
        },
        {
          "id": 517,
          "type": {
            "path": [
              "frame_support",
              "traits",
              "messages",
              "ProcessMessageError"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "BadFormat",
                    "index": 0
                  },
                  {
                    "name": "Corrupt",
                    "index": 1
                  },
                  {
                    "name": "Unsupported",
                    "index": 2
                  },
                  {
                    "name": "Overweight",
                    "fields": [
                      {
                        "type": 10,
                        "typeName": "Weight"
                      }
                    ],
                    "index": 3
                  },
                  {
                    "name": "Yield",
                    "index": 4
                  },
                  {
                    "name": "StackLimitReached",
                    "index": 5
                  }
                ]
              }
            }
          }
        },
        {
          "id": 518,
          "type": {
            "path": [
              "pallet_asset_rate",
              "pallet",
              "Event"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "AssetRateCreated",
                    "fields": [
                      {
                        "name": "asset_kind",
                        "type": 55,
                        "typeName": "T::AssetKind"
                      },
                      {
                        "name": "rate",
                        "type": 425,
                        "typeName": "FixedU128"
                      }
                    ],
                    "index": 0
                  },
                  {
                    "name": "AssetRateRemoved",
                    "fields": [
                      {
                        "name": "asset_kind",
                        "type": 55,
                        "typeName": "T::AssetKind"
                      }
                    ],
                    "index": 1
                  },
                  {
                    "name": "AssetRateUpdated",
                    "fields": [
                      {
                        "name": "asset_kind",
                        "type": 55,
                        "typeName": "T::AssetKind"
                      },
                      {
                        "name": "old",
                        "type": 425,
                        "typeName": "FixedU128"
                      },
                      {
                        "name": "new",
                        "type": 425,
                        "typeName": "FixedU128"
                      }
                    ],
                    "index": 2
                  }
                ]
              }
            },
            "docs": [
              "The `Event` enum of this pallet"
            ]
          }
        },
        {
          "id": 519,
          "type": {
            "path": [
              "pallet_rc_migrator",
              "pallet",
              "Event"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "StageTransition",
                    "fields": [
                      {
                        "name": "old",
                        "type": 441,
                        "typeName": "MigrationStageOf<T>",
                        "docs": [
                          "The old stage before the transition."
                        ]
                      },
                      {
                        "name": "new",
                        "type": 441,
                        "typeName": "MigrationStageOf<T>",
                        "docs": [
                          "The new stage after the transition."
                        ]
                      }
                    ],
                    "index": 0,
                    "docs": [
                      "A stage transition has occurred."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "The `Event` enum of this pallet"
            ]
          }
        },
        {
          "id": 520,
          "type": {
            "path": [
              "frame_system",
              "Phase"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "ApplyExtrinsic",
                    "fields": [
                      {
                        "type": 4,
                        "typeName": "u32"
                      }
                    ],
                    "index": 0
                  },
                  {
                    "name": "Finalization",
                    "index": 1
                  },
                  {
                    "name": "Initialization",
                    "index": 2
                  }
                ]
              }
            }
          }
        },
        {
          "id": 521,
          "type": {
            "def": {
              "sequence": {
                "type": 32
              }
            }
          }
        },
        {
          "id": 522,
          "type": {
            "path": [
              "frame_system",
              "LastRuntimeUpgradeInfo"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "spec_version",
                    "type": 59,
                    "typeName": "codec::Compact<u32>"
                  },
                  {
                    "name": "spec_name",
                    "type": 523,
                    "typeName": "sp_runtime::RuntimeString"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 523,
          "type": {
            "def": {
              "primitive": "str"
            }
          }
        },
        {
          "id": 524,
          "type": {
            "path": [
              "frame_system",
              "CodeUpgradeAuthorization"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "code_hash",
                    "type": 13,
                    "typeName": "T::Hash"
                  },
                  {
                    "name": "check_version",
                    "type": 8,
                    "typeName": "bool"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 525,
          "type": {
            "path": [
              "frame_system",
              "limits",
              "BlockWeights"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "base_block",
                    "type": 10,
                    "typeName": "Weight"
                  },
                  {
                    "name": "max_block",
                    "type": 10,
                    "typeName": "Weight"
                  },
                  {
                    "name": "per_class",
                    "type": 526,
                    "typeName": "PerDispatchClass<WeightsPerClass>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 526,
          "type": {
            "path": [
              "frame_support",
              "dispatch",
              "PerDispatchClass"
            ],
            "params": [
              {
                "name": "T",
                "type": 527
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "normal",
                    "type": 527,
                    "typeName": "T"
                  },
                  {
                    "name": "operational",
                    "type": 527,
                    "typeName": "T"
                  },
                  {
                    "name": "mandatory",
                    "type": 527,
                    "typeName": "T"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 527,
          "type": {
            "path": [
              "frame_system",
              "limits",
              "WeightsPerClass"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "base_extrinsic",
                    "type": 10,
                    "typeName": "Weight"
                  },
                  {
                    "name": "max_extrinsic",
                    "type": 479,
                    "typeName": "Option<Weight>"
                  },
                  {
                    "name": "max_total",
                    "type": 479,
                    "typeName": "Option<Weight>"
                  },
                  {
                    "name": "reserved",
                    "type": 479,
                    "typeName": "Option<Weight>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 528,
          "type": {
            "path": [
              "frame_system",
              "limits",
              "BlockLength"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "max",
                    "type": 529,
                    "typeName": "PerDispatchClass<u32>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 529,
          "type": {
            "path": [
              "frame_support",
              "dispatch",
              "PerDispatchClass"
            ],
            "params": [
              {
                "name": "T",
                "type": 4
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "normal",
                    "type": 4,
                    "typeName": "T"
                  },
                  {
                    "name": "operational",
                    "type": 4,
                    "typeName": "T"
                  },
                  {
                    "name": "mandatory",
                    "type": 4,
                    "typeName": "T"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 530,
          "type": {
            "path": [
              "sp_weights",
              "RuntimeDbWeight"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "read",
                    "type": 12,
                    "typeName": "u64"
                  },
                  {
                    "name": "write",
                    "type": 12,
                    "typeName": "u64"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 531,
          "type": {
            "path": [
              "sp_version",
              "RuntimeVersion"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "spec_name",
                    "type": 523,
                    "typeName": "RuntimeString"
                  },
                  {
                    "name": "impl_name",
                    "type": 523,
                    "typeName": "RuntimeString"
                  },
                  {
                    "name": "authoring_version",
                    "type": 4,
                    "typeName": "u32"
                  },
                  {
                    "name": "spec_version",
                    "type": 4,
                    "typeName": "u32"
                  },
                  {
                    "name": "impl_version",
                    "type": 4,
                    "typeName": "u32"
                  },
                  {
                    "name": "apis",
                    "type": 532,
                    "typeName": "ApisVec"
                  },
                  {
                    "name": "transaction_version",
                    "type": 4,
                    "typeName": "u32"
                  },
                  {
                    "name": "state_version",
                    "type": 2,
                    "typeName": "u8"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 532,
          "type": {
            "path": [
              "Cow"
            ],
            "params": [
              {
                "name": "T",
                "type": 533
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 533
                  }
                ]
              }
            }
          }
        },
        {
          "id": 533,
          "type": {
            "def": {
              "sequence": {
                "type": 534
              }
            }
          }
        },
        {
          "id": 534,
          "type": {
            "def": {
              "tuple": [
                353,
                4
              ]
            }
          }
        },
        {
          "id": 535,
          "type": {
            "path": [
              "frame_system",
              "pallet",
              "Error"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "InvalidSpecName",
                    "index": 0,
                    "docs": [
                      "The name of specification does not match between the current runtime",
                      "and the new runtime."
                    ]
                  },
                  {
                    "name": "SpecVersionNeedsToIncrease",
                    "index": 1,
                    "docs": [
                      "The specification version is not allowed to decrease between the current runtime",
                      "and the new runtime."
                    ]
                  },
                  {
                    "name": "FailedToExtractRuntimeVersion",
                    "index": 2,
                    "docs": [
                      "Failed to extract the runtime version from the new runtime.",
                      "",
                      "Either calling `Core_version` or decoding `RuntimeVersion` failed."
                    ]
                  },
                  {
                    "name": "NonDefaultComposite",
                    "index": 3,
                    "docs": [
                      "Suicide called when the account has non-default composite data."
                    ]
                  },
                  {
                    "name": "NonZeroRefCount",
                    "index": 4,
                    "docs": [
                      "There is a non-zero reference count preventing the account from being purged."
                    ]
                  },
                  {
                    "name": "CallFiltered",
                    "index": 5,
                    "docs": [
                      "The origin filter prevent the call to be dispatched."
                    ]
                  },
                  {
                    "name": "MultiBlockMigrationsOngoing",
                    "index": 6,
                    "docs": [
                      "A multi-block migration is ongoing and prevents the current code from being replaced."
                    ]
                  },
                  {
                    "name": "NothingAuthorized",
                    "index": 7,
                    "docs": [
                      "No upgrade authorized."
                    ]
                  },
                  {
                    "name": "Unauthorized",
                    "index": 8,
                    "docs": [
                      "The submitted code is not authorized."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Error for the System pallet"
            ]
          }
        },
        {
          "id": 536,
          "type": {
            "path": [
              "bounded_collections",
              "bounded_vec",
              "BoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 537
              },
              {
                "name": "S",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 539,
                    "typeName": "Vec<T>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 537,
          "type": {
            "path": [
              "Option"
            ],
            "params": [
              {
                "name": "T",
                "type": 538
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "None",
                    "index": 0
                  },
                  {
                    "name": "Some",
                    "fields": [
                      {
                        "type": 538
                      }
                    ],
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 538,
          "type": {
            "path": [
              "pallet_scheduler",
              "Scheduled"
            ],
            "params": [
              {
                "name": "Name",
                "type": 1
              },
              {
                "name": "Call",
                "type": 94
              },
              {
                "name": "BlockNumber",
                "type": 4
              },
              {
                "name": "PalletsOrigin",
                "type": 159
              },
              {
                "name": "AccountId",
                "type": 0
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "maybe_id",
                    "type": 33,
                    "typeName": "Option<Name>"
                  },
                  {
                    "name": "priority",
                    "type": 2,
                    "typeName": "schedule::Priority"
                  },
                  {
                    "name": "call",
                    "type": 94,
                    "typeName": "Call"
                  },
                  {
                    "name": "maybe_periodic",
                    "type": 101,
                    "typeName": "Option<schedule::Period<BlockNumber>>"
                  },
                  {
                    "name": "origin",
                    "type": 159,
                    "typeName": "PalletsOrigin"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 539,
          "type": {
            "def": {
              "sequence": {
                "type": 537
              }
            }
          }
        },
        {
          "id": 540,
          "type": {
            "path": [
              "pallet_scheduler",
              "RetryConfig"
            ],
            "params": [
              {
                "name": "Period",
                "type": 4
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "total_retries",
                    "type": 2,
                    "typeName": "u8"
                  },
                  {
                    "name": "remaining",
                    "type": 2,
                    "typeName": "u8"
                  },
                  {
                    "name": "period",
                    "type": 4,
                    "typeName": "Period"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 541,
          "type": {
            "path": [
              "pallet_scheduler",
              "pallet",
              "Error"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "FailedToSchedule",
                    "index": 0,
                    "docs": [
                      "Failed to schedule a call"
                    ]
                  },
                  {
                    "name": "NotFound",
                    "index": 1,
                    "docs": [
                      "Cannot find the scheduled call."
                    ]
                  },
                  {
                    "name": "TargetBlockNumberInPast",
                    "index": 2,
                    "docs": [
                      "Given target block number is in the past."
                    ]
                  },
                  {
                    "name": "RescheduleNoChange",
                    "index": 3,
                    "docs": [
                      "Reschedule failed because it does not change scheduled time."
                    ]
                  },
                  {
                    "name": "Named",
                    "index": 4,
                    "docs": [
                      "Attempt to use a non-named function on a named task."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "The `Error` enum of this pallet."
            ]
          }
        },
        {
          "id": 542,
          "type": {
            "path": [
              "pallet_preimage",
              "OldRequestStatus"
            ],
            "params": [
              {
                "name": "AccountId",
                "type": 0
              },
              {
                "name": "Balance",
                "type": 6
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Unrequested",
                    "fields": [
                      {
                        "name": "deposit",
                        "type": 249,
                        "typeName": "(AccountId, Balance)"
                      },
                      {
                        "name": "len",
                        "type": 4,
                        "typeName": "u32"
                      }
                    ],
                    "index": 0
                  },
                  {
                    "name": "Requested",
                    "fields": [
                      {
                        "name": "deposit",
                        "type": 543,
                        "typeName": "Option<(AccountId, Balance)>"
                      },
                      {
                        "name": "count",
                        "type": 4,
                        "typeName": "u32"
                      },
                      {
                        "name": "len",
                        "type": 154,
                        "typeName": "Option<u32>"
                      }
                    ],
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 543,
          "type": {
            "path": [
              "Option"
            ],
            "params": [
              {
                "name": "T",
                "type": 249
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "None",
                    "index": 0
                  },
                  {
                    "name": "Some",
                    "fields": [
                      {
                        "type": 249
                      }
                    ],
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 544,
          "type": {
            "path": [
              "pallet_preimage",
              "RequestStatus"
            ],
            "params": [
              {
                "name": "AccountId",
                "type": 0
              },
              {
                "name": "Ticket",
                "type": 545
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Unrequested",
                    "fields": [
                      {
                        "name": "ticket",
                        "type": 546,
                        "typeName": "(AccountId, Ticket)"
                      },
                      {
                        "name": "len",
                        "type": 4,
                        "typeName": "u32"
                      }
                    ],
                    "index": 0
                  },
                  {
                    "name": "Requested",
                    "fields": [
                      {
                        "name": "maybe_ticket",
                        "type": 547,
                        "typeName": "Option<(AccountId, Ticket)>"
                      },
                      {
                        "name": "count",
                        "type": 4,
                        "typeName": "u32"
                      },
                      {
                        "name": "maybe_len",
                        "type": 154,
                        "typeName": "Option<u32>"
                      }
                    ],
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 545,
          "type": {
            "path": [
              "frame_support",
              "traits",
              "tokens",
              "fungible",
              "HoldConsideration"
            ],
            "params": [
              {
                "name": "A",
                "type": null
              },
              {
                "name": "F",
                "type": null
              },
              {
                "name": "R",
                "type": null
              },
              {
                "name": "D",
                "type": null
              },
              {
                "name": "Fp",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 6,
                    "typeName": "F::Balance"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 546,
          "type": {
            "def": {
              "tuple": [
                0,
                545
              ]
            }
          }
        },
        {
          "id": 547,
          "type": {
            "path": [
              "Option"
            ],
            "params": [
              {
                "name": "T",
                "type": 546
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "None",
                    "index": 0
                  },
                  {
                    "name": "Some",
                    "fields": [
                      {
                        "type": 546
                      }
                    ],
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 548,
          "type": {
            "path": [
              "bounded_collections",
              "bounded_vec",
              "BoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 2
              },
              {
                "name": "S",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 14,
                    "typeName": "Vec<T>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 549,
          "type": {
            "path": [
              "pallet_preimage",
              "pallet",
              "Error"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "TooBig",
                    "index": 0,
                    "docs": [
                      "Preimage is too large to store on-chain."
                    ]
                  },
                  {
                    "name": "AlreadyNoted",
                    "index": 1,
                    "docs": [
                      "Preimage has already been noted on-chain."
                    ]
                  },
                  {
                    "name": "NotAuthorized",
                    "index": 2,
                    "docs": [
                      "The user is not authorized to perform this action."
                    ]
                  },
                  {
                    "name": "NotNoted",
                    "index": 3,
                    "docs": [
                      "The preimage cannot be removed since it has not yet been noted."
                    ]
                  },
                  {
                    "name": "Requested",
                    "index": 4,
                    "docs": [
                      "A preimage may not be removed when there are outstanding requests."
                    ]
                  },
                  {
                    "name": "NotRequested",
                    "index": 5,
                    "docs": [
                      "The preimage request cannot be removed since no outstanding requests exist."
                    ]
                  },
                  {
                    "name": "TooMany",
                    "index": 6,
                    "docs": [
                      "More than `MAX_HASH_UPGRADE_BULK_COUNT` hashes were requested to be upgraded at once."
                    ]
                  },
                  {
                    "name": "TooFew",
                    "index": 7,
                    "docs": [
                      "Too few hashes were requested to be upgraded (i.e. zero)."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "The `Error` enum of this pallet."
            ]
          }
        },
        {
          "id": 550,
          "type": {
            "path": [
              "bounded_collections",
              "weak_bounded_vec",
              "WeakBoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 551
              },
              {
                "name": "S",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 552,
                    "typeName": "Vec<T>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 551,
          "type": {
            "def": {
              "tuple": [
                107,
                12
              ]
            }
          }
        },
        {
          "id": 552,
          "type": {
            "def": {
              "sequence": {
                "type": 551
              }
            }
          }
        },
        {
          "id": 553,
          "type": {
            "path": [
              "bounded_collections",
              "bounded_vec",
              "BoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 1
              },
              {
                "name": "S",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 554,
                    "typeName": "Vec<T>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 554,
          "type": {
            "def": {
              "sequence": {
                "type": 1
              }
            }
          }
        },
        {
          "id": 555,
          "type": {
            "path": [
              "Option"
            ],
            "params": [
              {
                "name": "T",
                "type": 556
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "None",
                    "index": 0
                  },
                  {
                    "name": "Some",
                    "fields": [
                      {
                        "type": 556
                      }
                    ],
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 556,
          "type": {
            "path": [
              "sp_consensus_babe",
              "digests",
              "PreDigest"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Primary",
                    "fields": [
                      {
                        "type": 557,
                        "typeName": "PrimaryPreDigest"
                      }
                    ],
                    "index": 1
                  },
                  {
                    "name": "SecondaryPlain",
                    "fields": [
                      {
                        "type": 559,
                        "typeName": "SecondaryPlainPreDigest"
                      }
                    ],
                    "index": 2
                  },
                  {
                    "name": "SecondaryVRF",
                    "fields": [
                      {
                        "type": 560,
                        "typeName": "SecondaryVRFPreDigest"
                      }
                    ],
                    "index": 3
                  }
                ]
              }
            }
          }
        },
        {
          "id": 557,
          "type": {
            "path": [
              "sp_consensus_babe",
              "digests",
              "PrimaryPreDigest"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "authority_index",
                    "type": 4,
                    "typeName": "super::AuthorityIndex"
                  },
                  {
                    "name": "slot",
                    "type": 108,
                    "typeName": "Slot"
                  },
                  {
                    "name": "vrf_signature",
                    "type": 558,
                    "typeName": "VrfSignature"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 558,
          "type": {
            "path": [
              "sp_core",
              "sr25519",
              "vrf",
              "VrfSignature"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "pre_output",
                    "type": 1,
                    "typeName": "VrfPreOutput"
                  },
                  {
                    "name": "proof",
                    "type": 148,
                    "typeName": "VrfProof"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 559,
          "type": {
            "path": [
              "sp_consensus_babe",
              "digests",
              "SecondaryPlainPreDigest"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "authority_index",
                    "type": 4,
                    "typeName": "super::AuthorityIndex"
                  },
                  {
                    "name": "slot",
                    "type": 108,
                    "typeName": "Slot"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 560,
          "type": {
            "path": [
              "sp_consensus_babe",
              "digests",
              "SecondaryVRFPreDigest"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "authority_index",
                    "type": 4,
                    "typeName": "super::AuthorityIndex"
                  },
                  {
                    "name": "slot",
                    "type": 108,
                    "typeName": "Slot"
                  },
                  {
                    "name": "vrf_signature",
                    "type": 558,
                    "typeName": "VrfSignature"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 561,
          "type": {
            "path": [
              "sp_consensus_babe",
              "BabeEpochConfiguration"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "c",
                    "type": 111,
                    "typeName": "(u64, u64)"
                  },
                  {
                    "name": "allowed_slots",
                    "type": 112,
                    "typeName": "AllowedSlots"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 562,
          "type": {
            "path": [
              "bounded_collections",
              "bounded_vec",
              "BoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 563
              },
              {
                "name": "S",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 564,
                    "typeName": "Vec<T>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 563,
          "type": {
            "def": {
              "tuple": [
                12,
                4
              ]
            }
          }
        },
        {
          "id": 564,
          "type": {
            "def": {
              "sequence": {
                "type": 563
              }
            }
          }
        },
        {
          "id": 565,
          "type": {
            "path": [
              "pallet_babe",
              "pallet",
              "Error"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "InvalidEquivocationProof",
                    "index": 0,
                    "docs": [
                      "An equivocation proof provided as part of an equivocation report is invalid."
                    ]
                  },
                  {
                    "name": "InvalidKeyOwnershipProof",
                    "index": 1,
                    "docs": [
                      "A key ownership proof provided as part of an equivocation report is invalid."
                    ]
                  },
                  {
                    "name": "DuplicateOffenceReport",
                    "index": 2,
                    "docs": [
                      "A given equivocation report is valid but already previously reported."
                    ]
                  },
                  {
                    "name": "InvalidConfiguration",
                    "index": 3,
                    "docs": [
                      "Submitted configuration is invalid."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "The `Error` enum of this pallet."
            ]
          }
        },
        {
          "id": 566,
          "type": {
            "def": {
              "tuple": [
                0,
                6,
                8
              ]
            }
          }
        },
        {
          "id": 567,
          "type": {
            "path": [
              "pallet_indices",
              "pallet",
              "Error"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "NotAssigned",
                    "index": 0,
                    "docs": [
                      "The index was not already assigned."
                    ]
                  },
                  {
                    "name": "NotOwner",
                    "index": 1,
                    "docs": [
                      "The index is assigned to another account."
                    ]
                  },
                  {
                    "name": "InUse",
                    "index": 2,
                    "docs": [
                      "The index was not available."
                    ]
                  },
                  {
                    "name": "NotTransfer",
                    "index": 3,
                    "docs": [
                      "The source and destination accounts are identical."
                    ]
                  },
                  {
                    "name": "Permanent",
                    "index": 4,
                    "docs": [
                      "The index is permanent and may not be freed/changed."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "The `Error` enum of this pallet."
            ]
          }
        },
        {
          "id": 568,
          "type": {
            "path": [
              "bounded_collections",
              "weak_bounded_vec",
              "WeakBoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 569
              },
              {
                "name": "S",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 571,
                    "typeName": "Vec<T>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 569,
          "type": {
            "path": [
              "pallet_balances",
              "types",
              "BalanceLock"
            ],
            "params": [
              {
                "name": "Balance",
                "type": 6
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "id",
                    "type": 353,
                    "typeName": "LockIdentifier"
                  },
                  {
                    "name": "amount",
                    "type": 6,
                    "typeName": "Balance"
                  },
                  {
                    "name": "reasons",
                    "type": 570,
                    "typeName": "Reasons"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 570,
          "type": {
            "path": [
              "pallet_balances",
              "types",
              "Reasons"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Fee",
                    "index": 0
                  },
                  {
                    "name": "Misc",
                    "index": 1
                  },
                  {
                    "name": "All",
                    "index": 2
                  }
                ]
              }
            }
          }
        },
        {
          "id": 571,
          "type": {
            "def": {
              "sequence": {
                "type": 569
              }
            }
          }
        },
        {
          "id": 572,
          "type": {
            "path": [
              "bounded_collections",
              "bounded_vec",
              "BoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 573
              },
              {
                "name": "S",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 574,
                    "typeName": "Vec<T>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 573,
          "type": {
            "path": [
              "pallet_balances",
              "types",
              "ReserveData"
            ],
            "params": [
              {
                "name": "ReserveIdentifier",
                "type": 353
              },
              {
                "name": "Balance",
                "type": 6
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "id",
                    "type": 353,
                    "typeName": "ReserveIdentifier"
                  },
                  {
                    "name": "amount",
                    "type": 6,
                    "typeName": "Balance"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 574,
          "type": {
            "def": {
              "sequence": {
                "type": 573
              }
            }
          }
        },
        {
          "id": 575,
          "type": {
            "path": [
              "bounded_collections",
              "bounded_vec",
              "BoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 576
              },
              {
                "name": "S",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 581,
                    "typeName": "Vec<T>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 576,
          "type": {
            "path": [
              "frame_support",
              "traits",
              "tokens",
              "misc",
              "IdAmount"
            ],
            "params": [
              {
                "name": "Id",
                "type": 577
              },
              {
                "name": "Balance",
                "type": 6
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "id",
                    "type": 577,
                    "typeName": "Id"
                  },
                  {
                    "name": "amount",
                    "type": 6,
                    "typeName": "Balance"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 577,
          "type": {
            "path": [
              "polkadot_runtime",
              "RuntimeHoldReason"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Preimage",
                    "fields": [
                      {
                        "type": 578,
                        "typeName": "pallet_preimage::HoldReason"
                      }
                    ],
                    "index": 10
                  },
                  {
                    "name": "DelegatedStaking",
                    "fields": [
                      {
                        "type": 579,
                        "typeName": "pallet_delegated_staking::HoldReason"
                      }
                    ],
                    "index": 41
                  },
                  {
                    "name": "StateTrieMigration",
                    "fields": [
                      {
                        "type": 580,
                        "typeName": "pallet_state_trie_migration::HoldReason"
                      }
                    ],
                    "index": 98
                  }
                ]
              }
            }
          }
        },
        {
          "id": 578,
          "type": {
            "path": [
              "pallet_preimage",
              "pallet",
              "HoldReason"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Preimage",
                    "index": 0
                  }
                ]
              }
            }
          }
        },
        {
          "id": 579,
          "type": {
            "path": [
              "pallet_delegated_staking",
              "pallet",
              "HoldReason"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "StakingDelegation",
                    "index": 0
                  }
                ]
              }
            }
          }
        },
        {
          "id": 580,
          "type": {
            "path": [
              "pallet_state_trie_migration",
              "pallet",
              "HoldReason"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "SlashForMigrate",
                    "index": 0
                  }
                ]
              }
            }
          }
        },
        {
          "id": 581,
          "type": {
            "def": {
              "sequence": {
                "type": 576
              }
            }
          }
        },
        {
          "id": 582,
          "type": {
            "path": [
              "bounded_collections",
              "bounded_vec",
              "BoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 583
              },
              {
                "name": "S",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 586,
                    "typeName": "Vec<T>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 583,
          "type": {
            "path": [
              "frame_support",
              "traits",
              "tokens",
              "misc",
              "IdAmount"
            ],
            "params": [
              {
                "name": "Id",
                "type": 584
              },
              {
                "name": "Balance",
                "type": 6
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "id",
                    "type": 584,
                    "typeName": "Id"
                  },
                  {
                    "name": "amount",
                    "type": 6,
                    "typeName": "Balance"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 584,
          "type": {
            "path": [
              "polkadot_runtime",
              "RuntimeFreezeReason"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "NominationPools",
                    "fields": [
                      {
                        "type": 585,
                        "typeName": "pallet_nomination_pools::FreezeReason"
                      }
                    ],
                    "index": 39
                  }
                ]
              }
            }
          }
        },
        {
          "id": 585,
          "type": {
            "path": [
              "pallet_nomination_pools",
              "pallet",
              "FreezeReason"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "PoolMinBalance",
                    "index": 0
                  }
                ]
              }
            }
          }
        },
        {
          "id": 586,
          "type": {
            "def": {
              "sequence": {
                "type": 583
              }
            }
          }
        },
        {
          "id": 587,
          "type": {
            "path": [
              "pallet_balances",
              "pallet",
              "Error"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              },
              {
                "name": "I",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "VestingBalance",
                    "index": 0,
                    "docs": [
                      "Vesting balance too high to send value."
                    ]
                  },
                  {
                    "name": "LiquidityRestrictions",
                    "index": 1,
                    "docs": [
                      "Account liquidity restrictions prevent withdrawal."
                    ]
                  },
                  {
                    "name": "InsufficientBalance",
                    "index": 2,
                    "docs": [
                      "Balance too low to send value."
                    ]
                  },
                  {
                    "name": "ExistentialDeposit",
                    "index": 3,
                    "docs": [
                      "Value too low to create account due to existential deposit."
                    ]
                  },
                  {
                    "name": "Expendability",
                    "index": 4,
                    "docs": [
                      "Transfer/payment would kill account."
                    ]
                  },
                  {
                    "name": "ExistingVestingSchedule",
                    "index": 5,
                    "docs": [
                      "A vesting schedule already exists for this account."
                    ]
                  },
                  {
                    "name": "DeadAccount",
                    "index": 6,
                    "docs": [
                      "Beneficiary account must pre-exist."
                    ]
                  },
                  {
                    "name": "TooManyReserves",
                    "index": 7,
                    "docs": [
                      "Number of named reserves exceed `MaxReserves`."
                    ]
                  },
                  {
                    "name": "TooManyHolds",
                    "index": 8,
                    "docs": [
                      "Number of holds exceed `VariantCountOf<T::RuntimeHoldReason>`."
                    ]
                  },
                  {
                    "name": "TooManyFreezes",
                    "index": 9,
                    "docs": [
                      "Number of freezes exceed `MaxFreezes`."
                    ]
                  },
                  {
                    "name": "IssuanceDeactivated",
                    "index": 10,
                    "docs": [
                      "The issuance cannot be modified since it is already deactivated."
                    ]
                  },
                  {
                    "name": "DeltaZero",
                    "index": 11,
                    "docs": [
                      "The delta cannot be zero."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "The `Error` enum of this pallet."
            ]
          }
        },
        {
          "id": 588,
          "type": {
            "path": [
              "pallet_transaction_payment",
              "Releases"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "V1Ancient",
                    "index": 0
                  },
                  {
                    "name": "V2",
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 589,
          "type": {
            "path": [
              "pallet_staking",
              "StakingLedger"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "stash",
                    "type": 0,
                    "typeName": "T::AccountId"
                  },
                  {
                    "name": "total",
                    "type": 63,
                    "typeName": "BalanceOf<T>"
                  },
                  {
                    "name": "active",
                    "type": 63,
                    "typeName": "BalanceOf<T>"
                  },
                  {
                    "name": "unlocking",
                    "type": 132,
                    "typeName": "BoundedVec<UnlockChunk<BalanceOf<T>>, T::MaxUnlockingChunks>"
                  },
                  {
                    "name": "legacy_claimed_rewards",
                    "type": 590,
                    "typeName": "BoundedVec<EraIndex, T::HistoryDepth>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 590,
          "type": {
            "path": [
              "bounded_collections",
              "bounded_vec",
              "BoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 4
              },
              {
                "name": "S",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 123,
                    "typeName": "Vec<T>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 591,
          "type": {
            "path": [
              "pallet_staking",
              "Nominations"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "targets",
                    "type": 592,
                    "typeName": "BoundedVec<T::AccountId, MaxNominationsOf<T>>"
                  },
                  {
                    "name": "submitted_in",
                    "type": 4,
                    "typeName": "EraIndex"
                  },
                  {
                    "name": "suppressed",
                    "type": 8,
                    "typeName": "bool"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 592,
          "type": {
            "path": [
              "bounded_collections",
              "bounded_vec",
              "BoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 0
              },
              {
                "name": "S",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 118,
                    "typeName": "Vec<T>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 593,
          "type": {
            "path": [
              "pallet_staking",
              "ActiveEraInfo"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "index",
                    "type": 4,
                    "typeName": "EraIndex"
                  },
                  {
                    "name": "start",
                    "type": 460,
                    "typeName": "Option<u64>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 594,
          "type": {
            "def": {
              "tuple": [
                4,
                0
              ]
            }
          }
        },
        {
          "id": 595,
          "type": {
            "path": [
              "sp_staking",
              "Exposure"
            ],
            "params": [
              {
                "name": "AccountId",
                "type": 0
              },
              {
                "name": "Balance",
                "type": 6
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "total",
                    "type": 63,
                    "typeName": "Balance"
                  },
                  {
                    "name": "own",
                    "type": 63,
                    "typeName": "Balance"
                  },
                  {
                    "name": "others",
                    "type": 596,
                    "typeName": "Vec<IndividualExposure<AccountId, Balance>>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 596,
          "type": {
            "def": {
              "sequence": {
                "type": 597
              }
            }
          }
        },
        {
          "id": 597,
          "type": {
            "path": [
              "sp_staking",
              "IndividualExposure"
            ],
            "params": [
              {
                "name": "AccountId",
                "type": 0
              },
              {
                "name": "Balance",
                "type": 6
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "who",
                    "type": 0,
                    "typeName": "AccountId"
                  },
                  {
                    "name": "value",
                    "type": 63,
                    "typeName": "Balance"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 598,
          "type": {
            "path": [
              "sp_staking",
              "PagedExposureMetadata"
            ],
            "params": [
              {
                "name": "Balance",
                "type": 6
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "total",
                    "type": 63,
                    "typeName": "Balance"
                  },
                  {
                    "name": "own",
                    "type": 63,
                    "typeName": "Balance"
                  },
                  {
                    "name": "nominator_count",
                    "type": 4,
                    "typeName": "u32"
                  },
                  {
                    "name": "page_count",
                    "type": 4,
                    "typeName": "Page"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 599,
          "type": {
            "def": {
              "tuple": [
                4,
                0,
                4
              ]
            }
          }
        },
        {
          "id": 600,
          "type": {
            "path": [
              "sp_staking",
              "ExposurePage"
            ],
            "params": [
              {
                "name": "AccountId",
                "type": 0
              },
              {
                "name": "Balance",
                "type": 6
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "page_total",
                    "type": 63,
                    "typeName": "Balance"
                  },
                  {
                    "name": "others",
                    "type": 596,
                    "typeName": "Vec<IndividualExposure<AccountId, Balance>>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 601,
          "type": {
            "path": [
              "pallet_staking",
              "EraRewardPoints"
            ],
            "params": [
              {
                "name": "AccountId",
                "type": 0
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "total",
                    "type": 4,
                    "typeName": "RewardPoint"
                  },
                  {
                    "name": "individual",
                    "type": 602,
                    "typeName": "BTreeMap<AccountId, RewardPoint>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 602,
          "type": {
            "path": [
              "BTreeMap"
            ],
            "params": [
              {
                "name": "K",
                "type": 0
              },
              {
                "name": "V",
                "type": 4
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 603
                  }
                ]
              }
            }
          }
        },
        {
          "id": 603,
          "type": {
            "def": {
              "sequence": {
                "type": 604
              }
            }
          }
        },
        {
          "id": 604,
          "type": {
            "def": {
              "tuple": [
                0,
                4
              ]
            }
          }
        },
        {
          "id": 605,
          "type": {
            "def": {
              "sequence": {
                "type": 606
              }
            }
          }
        },
        {
          "id": 606,
          "type": {
            "path": [
              "pallet_staking",
              "UnappliedSlash"
            ],
            "params": [
              {
                "name": "AccountId",
                "type": 0
              },
              {
                "name": "Balance",
                "type": 6
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "validator",
                    "type": 0,
                    "typeName": "AccountId"
                  },
                  {
                    "name": "own",
                    "type": 6,
                    "typeName": "Balance"
                  },
                  {
                    "name": "others",
                    "type": 248,
                    "typeName": "Vec<(AccountId, Balance)>"
                  },
                  {
                    "name": "reporters",
                    "type": 118,
                    "typeName": "Vec<AccountId>"
                  },
                  {
                    "name": "payout",
                    "type": 6,
                    "typeName": "Balance"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 607,
          "type": {
            "def": {
              "tuple": [
                43,
                6
              ]
            }
          }
        },
        {
          "id": 608,
          "type": {
            "path": [
              "pallet_staking",
              "slashing",
              "SlashingSpans"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "span_index",
                    "type": 4,
                    "typeName": "SpanIndex"
                  },
                  {
                    "name": "last_start",
                    "type": 4,
                    "typeName": "EraIndex"
                  },
                  {
                    "name": "last_nonzero_slash",
                    "type": 4,
                    "typeName": "EraIndex"
                  },
                  {
                    "name": "prior",
                    "type": 123,
                    "typeName": "Vec<EraIndex>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 609,
          "type": {
            "path": [
              "pallet_staking",
              "slashing",
              "SpanRecord"
            ],
            "params": [
              {
                "name": "Balance",
                "type": 6
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "slashed",
                    "type": 6,
                    "typeName": "Balance"
                  },
                  {
                    "name": "paid_out",
                    "type": 6,
                    "typeName": "Balance"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 610,
          "type": {
            "path": [
              "pallet_staking",
              "pallet",
              "pallet",
              "Error"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "NotController",
                    "index": 0,
                    "docs": [
                      "Not a controller account."
                    ]
                  },
                  {
                    "name": "NotStash",
                    "index": 1,
                    "docs": [
                      "Not a stash account."
                    ]
                  },
                  {
                    "name": "AlreadyBonded",
                    "index": 2,
                    "docs": [
                      "Stash is already bonded."
                    ]
                  },
                  {
                    "name": "AlreadyPaired",
                    "index": 3,
                    "docs": [
                      "Controller is already paired."
                    ]
                  },
                  {
                    "name": "EmptyTargets",
                    "index": 4,
                    "docs": [
                      "Targets cannot be empty."
                    ]
                  },
                  {
                    "name": "DuplicateIndex",
                    "index": 5,
                    "docs": [
                      "Duplicate index."
                    ]
                  },
                  {
                    "name": "InvalidSlashIndex",
                    "index": 6,
                    "docs": [
                      "Slash record index out of bounds."
                    ]
                  },
                  {
                    "name": "InsufficientBond",
                    "index": 7,
                    "docs": [
                      "Cannot have a validator or nominator role, with value less than the minimum defined by",
                      "governance (see `MinValidatorBond` and `MinNominatorBond`). If unbonding is the",
                      "intention, `chill` first to remove one's role as validator/nominator."
                    ]
                  },
                  {
                    "name": "NoMoreChunks",
                    "index": 8,
                    "docs": [
                      "Can not schedule more unlock chunks."
                    ]
                  },
                  {
                    "name": "NoUnlockChunk",
                    "index": 9,
                    "docs": [
                      "Can not rebond without unlocking chunks."
                    ]
                  },
                  {
                    "name": "FundedTarget",
                    "index": 10,
                    "docs": [
                      "Attempting to target a stash that still has funds."
                    ]
                  },
                  {
                    "name": "InvalidEraToReward",
                    "index": 11,
                    "docs": [
                      "Invalid era to reward."
                    ]
                  },
                  {
                    "name": "InvalidNumberOfNominations",
                    "index": 12,
                    "docs": [
                      "Invalid number of nominations."
                    ]
                  },
                  {
                    "name": "NotSortedAndUnique",
                    "index": 13,
                    "docs": [
                      "Items are not sorted and unique."
                    ]
                  },
                  {
                    "name": "AlreadyClaimed",
                    "index": 14,
                    "docs": [
                      "Rewards for this era have already been claimed for this validator."
                    ]
                  },
                  {
                    "name": "InvalidPage",
                    "index": 15,
                    "docs": [
                      "No nominators exist on this page."
                    ]
                  },
                  {
                    "name": "IncorrectHistoryDepth",
                    "index": 16,
                    "docs": [
                      "Incorrect previous history depth input provided."
                    ]
                  },
                  {
                    "name": "IncorrectSlashingSpans",
                    "index": 17,
                    "docs": [
                      "Incorrect number of slashing spans provided."
                    ]
                  },
                  {
                    "name": "BadState",
                    "index": 18,
                    "docs": [
                      "Internal state has become somehow corrupted and the operation cannot continue."
                    ]
                  },
                  {
                    "name": "TooManyTargets",
                    "index": 19,
                    "docs": [
                      "Too many nomination targets supplied."
                    ]
                  },
                  {
                    "name": "BadTarget",
                    "index": 20,
                    "docs": [
                      "A nomination target was supplied that was blocked or otherwise not a validator."
                    ]
                  },
                  {
                    "name": "CannotChillOther",
                    "index": 21,
                    "docs": [
                      "The user has enough bond and thus cannot be chilled forcefully by an external person."
                    ]
                  },
                  {
                    "name": "TooManyNominators",
                    "index": 22,
                    "docs": [
                      "There are too many nominators in the system. Governance needs to adjust the staking",
                      "settings to keep things safe for the runtime."
                    ]
                  },
                  {
                    "name": "TooManyValidators",
                    "index": 23,
                    "docs": [
                      "There are too many validator candidates in the system. Governance needs to adjust the",
                      "staking settings to keep things safe for the runtime."
                    ]
                  },
                  {
                    "name": "CommissionTooLow",
                    "index": 24,
                    "docs": [
                      "Commission is too low. Must be at least `MinCommission`."
                    ]
                  },
                  {
                    "name": "BoundNotMet",
                    "index": 25,
                    "docs": [
                      "Some bound is not met."
                    ]
                  },
                  {
                    "name": "ControllerDeprecated",
                    "index": 26,
                    "docs": [
                      "Used when attempting to use deprecated controller account logic."
                    ]
                  },
                  {
                    "name": "CannotRestoreLedger",
                    "index": 27,
                    "docs": [
                      "Cannot reset a ledger."
                    ]
                  },
                  {
                    "name": "RewardDestinationRestricted",
                    "index": 28,
                    "docs": [
                      "Provided reward destination is not allowed."
                    ]
                  },
                  {
                    "name": "NotEnoughFunds",
                    "index": 29,
                    "docs": [
                      "Not enough funds available to withdraw."
                    ]
                  },
                  {
                    "name": "VirtualStakerNotAllowed",
                    "index": 30,
                    "docs": [
                      "Operation not allowed for virtual stakers."
                    ]
                  },
                  {
                    "name": "Restricted",
                    "index": 31,
                    "docs": [
                      "Account is restricted from participation in staking. This may happen if the account is",
                      "staking in another way already, such as via pool."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "The `Error` enum of this pallet."
            ]
          }
        },
        {
          "id": 611,
          "type": {
            "path": [
              "sp_staking",
              "offence",
              "OffenceDetails"
            ],
            "params": [
              {
                "name": "Reporter",
                "type": 0
              },
              {
                "name": "Offender",
                "type": 612
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "offender",
                    "type": 612,
                    "typeName": "Offender"
                  },
                  {
                    "name": "reporters",
                    "type": 118,
                    "typeName": "Vec<Reporter>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 612,
          "type": {
            "def": {
              "tuple": [
                0,
                595
              ]
            }
          }
        },
        {
          "id": 613,
          "type": {
            "def": {
              "tuple": [
                48,
                14
              ]
            }
          }
        },
        {
          "id": 614,
          "type": {
            "def": {
              "sequence": {
                "type": 615
              }
            }
          }
        },
        {
          "id": 615,
          "type": {
            "def": {
              "tuple": [
                0,
                136
              ]
            }
          }
        },
        {
          "id": 616,
          "type": {
            "def": {
              "tuple": [
                617,
                14
              ]
            }
          }
        },
        {
          "id": 617,
          "type": {
            "path": [
              "sp_core",
              "crypto",
              "KeyTypeId"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 18,
                    "typeName": "[u8; 4]"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 618,
          "type": {
            "path": [
              "pallet_session",
              "pallet",
              "Error"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "InvalidProof",
                    "index": 0,
                    "docs": [
                      "Invalid ownership proof."
                    ]
                  },
                  {
                    "name": "NoAssociatedValidatorId",
                    "index": 1,
                    "docs": [
                      "No associated validator ID for account."
                    ]
                  },
                  {
                    "name": "DuplicatedKey",
                    "index": 2,
                    "docs": [
                      "Registered duplicate key."
                    ]
                  },
                  {
                    "name": "NoKeys",
                    "index": 3,
                    "docs": [
                      "No keys are associated with this account."
                    ]
                  },
                  {
                    "name": "NoAccount",
                    "index": 4,
                    "docs": [
                      "Key setting account is not live, so it's impossible to associate keys."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Error for the session pallet."
            ]
          }
        },
        {
          "id": 619,
          "type": {
            "path": [
              "pallet_grandpa",
              "StoredState"
            ],
            "params": [
              {
                "name": "N",
                "type": 4
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Live",
                    "index": 0
                  },
                  {
                    "name": "PendingPause",
                    "fields": [
                      {
                        "name": "scheduled_at",
                        "type": 4,
                        "typeName": "N"
                      },
                      {
                        "name": "delay",
                        "type": 4,
                        "typeName": "N"
                      }
                    ],
                    "index": 1
                  },
                  {
                    "name": "Paused",
                    "index": 2
                  },
                  {
                    "name": "PendingResume",
                    "fields": [
                      {
                        "name": "scheduled_at",
                        "type": 4,
                        "typeName": "N"
                      },
                      {
                        "name": "delay",
                        "type": 4,
                        "typeName": "N"
                      }
                    ],
                    "index": 3
                  }
                ]
              }
            }
          }
        },
        {
          "id": 620,
          "type": {
            "path": [
              "pallet_grandpa",
              "StoredPendingChange"
            ],
            "params": [
              {
                "name": "N",
                "type": 4
              },
              {
                "name": "Limit",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "scheduled_at",
                    "type": 4,
                    "typeName": "N"
                  },
                  {
                    "name": "delay",
                    "type": 4,
                    "typeName": "N"
                  },
                  {
                    "name": "next_authorities",
                    "type": 621,
                    "typeName": "BoundedAuthorityList<Limit>"
                  },
                  {
                    "name": "forced",
                    "type": 154,
                    "typeName": "Option<N>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 621,
          "type": {
            "path": [
              "bounded_collections",
              "weak_bounded_vec",
              "WeakBoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 52
              },
              {
                "name": "S",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 51,
                    "typeName": "Vec<T>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 622,
          "type": {
            "path": [
              "pallet_grandpa",
              "pallet",
              "Error"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "PauseFailed",
                    "index": 0,
                    "docs": [
                      "Attempt to signal GRANDPA pause when the authority set isn't live",
                      "(either paused or already pending pause)."
                    ]
                  },
                  {
                    "name": "ResumeFailed",
                    "index": 1,
                    "docs": [
                      "Attempt to signal GRANDPA resume when the authority set isn't paused",
                      "(either live or already pending resume)."
                    ]
                  },
                  {
                    "name": "ChangePending",
                    "index": 2,
                    "docs": [
                      "Attempt to signal GRANDPA change with one already pending."
                    ]
                  },
                  {
                    "name": "TooSoon",
                    "index": 3,
                    "docs": [
                      "Cannot signal forced change so soon after last."
                    ]
                  },
                  {
                    "name": "InvalidKeyOwnershipProof",
                    "index": 4,
                    "docs": [
                      "A key ownership proof provided as part of an equivocation report is invalid."
                    ]
                  },
                  {
                    "name": "InvalidEquivocationProof",
                    "index": 5,
                    "docs": [
                      "An equivocation proof provided as part of an equivocation report is invalid."
                    ]
                  },
                  {
                    "name": "DuplicateOffenceReport",
                    "index": 6,
                    "docs": [
                      "A given equivocation report is valid but already previously reported."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "The `Error` enum of this pallet."
            ]
          }
        },
        {
          "id": 623,
          "type": {
            "path": [
              "bounded_collections",
              "weak_bounded_vec",
              "WeakBoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 139
              },
              {
                "name": "S",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 624,
                    "typeName": "Vec<T>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 624,
          "type": {
            "def": {
              "sequence": {
                "type": 139
              }
            }
          }
        },
        {
          "id": 625,
          "type": {
            "path": [
              "pallet_treasury",
              "Proposal"
            ],
            "params": [
              {
                "name": "AccountId",
                "type": 0
              },
              {
                "name": "Balance",
                "type": 6
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "proposer",
                    "type": 0,
                    "typeName": "AccountId"
                  },
                  {
                    "name": "value",
                    "type": 6,
                    "typeName": "Balance"
                  },
                  {
                    "name": "beneficiary",
                    "type": 0,
                    "typeName": "AccountId"
                  },
                  {
                    "name": "bond",
                    "type": 6,
                    "typeName": "Balance"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 626,
          "type": {
            "path": [
              "bounded_collections",
              "bounded_vec",
              "BoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 4
              },
              {
                "name": "S",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 123,
                    "typeName": "Vec<T>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 627,
          "type": {
            "path": [
              "pallet_treasury",
              "SpendStatus"
            ],
            "params": [
              {
                "name": "AssetKind",
                "type": 55
              },
              {
                "name": "AssetBalance",
                "type": 6
              },
              {
                "name": "Beneficiary",
                "type": 81
              },
              {
                "name": "BlockNumber",
                "type": 4
              },
              {
                "name": "PaymentId",
                "type": 12
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "asset_kind",
                    "type": 55,
                    "typeName": "AssetKind"
                  },
                  {
                    "name": "amount",
                    "type": 6,
                    "typeName": "AssetBalance"
                  },
                  {
                    "name": "beneficiary",
                    "type": 81,
                    "typeName": "Beneficiary"
                  },
                  {
                    "name": "valid_from",
                    "type": 4,
                    "typeName": "BlockNumber"
                  },
                  {
                    "name": "expire_at",
                    "type": 4,
                    "typeName": "BlockNumber"
                  },
                  {
                    "name": "status",
                    "type": 628,
                    "typeName": "PaymentState<PaymentId>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 628,
          "type": {
            "path": [
              "pallet_treasury",
              "PaymentState"
            ],
            "params": [
              {
                "name": "Id",
                "type": 12
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Pending",
                    "index": 0
                  },
                  {
                    "name": "Attempted",
                    "fields": [
                      {
                        "name": "id",
                        "type": 12,
                        "typeName": "Id"
                      }
                    ],
                    "index": 1
                  },
                  {
                    "name": "Failed",
                    "index": 2
                  }
                ]
              }
            }
          }
        },
        {
          "id": 629,
          "type": {
            "path": [
              "sp_arithmetic",
              "per_things",
              "Permill"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 4,
                    "typeName": "u32"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 630,
          "type": {
            "path": [
              "frame_support",
              "PalletId"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 353,
                    "typeName": "[u8; 8]"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 631,
          "type": {
            "path": [
              "pallet_treasury",
              "pallet",
              "Error"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              },
              {
                "name": "I",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "InvalidIndex",
                    "index": 0,
                    "docs": [
                      "No proposal, bounty or spend at that index."
                    ]
                  },
                  {
                    "name": "TooManyApprovals",
                    "index": 1,
                    "docs": [
                      "Too many approvals in the queue."
                    ]
                  },
                  {
                    "name": "InsufficientPermission",
                    "index": 2,
                    "docs": [
                      "The spend origin is valid but the amount it is allowed to spend is lower than the",
                      "amount to be spent."
                    ]
                  },
                  {
                    "name": "ProposalNotApproved",
                    "index": 3,
                    "docs": [
                      "Proposal has not been approved."
                    ]
                  },
                  {
                    "name": "FailedToConvertBalance",
                    "index": 4,
                    "docs": [
                      "The balance of the asset kind is not convertible to the balance of the native asset."
                    ]
                  },
                  {
                    "name": "SpendExpired",
                    "index": 5,
                    "docs": [
                      "The spend has expired and cannot be claimed."
                    ]
                  },
                  {
                    "name": "EarlyPayout",
                    "index": 6,
                    "docs": [
                      "The spend is not yet eligible for payout."
                    ]
                  },
                  {
                    "name": "AlreadyAttempted",
                    "index": 7,
                    "docs": [
                      "The payment has already been attempted."
                    ]
                  },
                  {
                    "name": "PayoutError",
                    "index": 8,
                    "docs": [
                      "There was some issue with the mechanism of payment."
                    ]
                  },
                  {
                    "name": "NotAttempted",
                    "index": 9,
                    "docs": [
                      "The payout was not yet attempted/claimed."
                    ]
                  },
                  {
                    "name": "Inconclusive",
                    "index": 10,
                    "docs": [
                      "The payment has neither failed nor succeeded yet."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Error for the treasury pallet."
            ]
          }
        },
        {
          "id": 632,
          "type": {
            "path": [
              "pallet_conviction_voting",
              "vote",
              "Voting"
            ],
            "params": [
              {
                "name": "Balance",
                "type": 6
              },
              {
                "name": "AccountId",
                "type": 0
              },
              {
                "name": "BlockNumber",
                "type": 4
              },
              {
                "name": "PollIndex",
                "type": 4
              },
              {
                "name": "MaxVotes",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Casting",
                    "fields": [
                      {
                        "type": 633,
                        "typeName": "Casting<Balance, BlockNumber, PollIndex, MaxVotes>"
                      }
                    ],
                    "index": 0
                  },
                  {
                    "name": "Delegating",
                    "fields": [
                      {
                        "type": 639,
                        "typeName": "Delegating<Balance, AccountId, BlockNumber>"
                      }
                    ],
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 633,
          "type": {
            "path": [
              "pallet_conviction_voting",
              "vote",
              "Casting"
            ],
            "params": [
              {
                "name": "Balance",
                "type": 6
              },
              {
                "name": "BlockNumber",
                "type": 4
              },
              {
                "name": "PollIndex",
                "type": 4
              },
              {
                "name": "MaxVotes",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "votes",
                    "type": 634,
                    "typeName": "BoundedVec<(PollIndex, AccountVote<Balance>), MaxVotes>"
                  },
                  {
                    "name": "delegations",
                    "type": 637,
                    "typeName": "Delegations<Balance>"
                  },
                  {
                    "name": "prior",
                    "type": 638,
                    "typeName": "PriorLock<BlockNumber, Balance>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 634,
          "type": {
            "path": [
              "bounded_collections",
              "bounded_vec",
              "BoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 635
              },
              {
                "name": "S",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 636,
                    "typeName": "Vec<T>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 635,
          "type": {
            "def": {
              "tuple": [
                4,
                90
              ]
            }
          }
        },
        {
          "id": 636,
          "type": {
            "def": {
              "sequence": {
                "type": 635
              }
            }
          }
        },
        {
          "id": 637,
          "type": {
            "path": [
              "pallet_conviction_voting",
              "types",
              "Delegations"
            ],
            "params": [
              {
                "name": "Balance",
                "type": 6
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "votes",
                    "type": 6,
                    "typeName": "Balance"
                  },
                  {
                    "name": "capital",
                    "type": 6,
                    "typeName": "Balance"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 638,
          "type": {
            "path": [
              "pallet_conviction_voting",
              "vote",
              "PriorLock"
            ],
            "params": [
              {
                "name": "BlockNumber",
                "type": 4
              },
              {
                "name": "Balance",
                "type": 6
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 4,
                    "typeName": "BlockNumber"
                  },
                  {
                    "type": 6,
                    "typeName": "Balance"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 639,
          "type": {
            "path": [
              "pallet_conviction_voting",
              "vote",
              "Delegating"
            ],
            "params": [
              {
                "name": "Balance",
                "type": 6
              },
              {
                "name": "AccountId",
                "type": 0
              },
              {
                "name": "BlockNumber",
                "type": 4
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "balance",
                    "type": 6,
                    "typeName": "Balance"
                  },
                  {
                    "name": "target",
                    "type": 0,
                    "typeName": "AccountId"
                  },
                  {
                    "name": "conviction",
                    "type": 156,
                    "typeName": "Conviction"
                  },
                  {
                    "name": "delegations",
                    "type": 637,
                    "typeName": "Delegations<Balance>"
                  },
                  {
                    "name": "prior",
                    "type": 638,
                    "typeName": "PriorLock<BlockNumber, Balance>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 640,
          "type": {
            "path": [
              "bounded_collections",
              "bounded_vec",
              "BoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 641
              },
              {
                "name": "S",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 642,
                    "typeName": "Vec<T>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 641,
          "type": {
            "def": {
              "tuple": [
                93,
                6
              ]
            }
          }
        },
        {
          "id": 642,
          "type": {
            "def": {
              "sequence": {
                "type": 641
              }
            }
          }
        },
        {
          "id": 643,
          "type": {
            "path": [
              "pallet_conviction_voting",
              "pallet",
              "Error"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              },
              {
                "name": "I",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "NotOngoing",
                    "index": 0,
                    "docs": [
                      "Poll is not ongoing."
                    ]
                  },
                  {
                    "name": "NotVoter",
                    "index": 1,
                    "docs": [
                      "The given account did not vote on the poll."
                    ]
                  },
                  {
                    "name": "NoPermission",
                    "index": 2,
                    "docs": [
                      "The actor has no permission to conduct the action."
                    ]
                  },
                  {
                    "name": "NoPermissionYet",
                    "index": 3,
                    "docs": [
                      "The actor has no permission to conduct the action right now but will do in the future."
                    ]
                  },
                  {
                    "name": "AlreadyDelegating",
                    "index": 4,
                    "docs": [
                      "The account is already delegating."
                    ]
                  },
                  {
                    "name": "AlreadyVoting",
                    "index": 5,
                    "docs": [
                      "The account currently has votes attached to it and the operation cannot succeed until",
                      "these are removed through `remove_vote`."
                    ]
                  },
                  {
                    "name": "InsufficientFunds",
                    "index": 6,
                    "docs": [
                      "Too high a balance was provided that the account cannot afford."
                    ]
                  },
                  {
                    "name": "NotDelegating",
                    "index": 7,
                    "docs": [
                      "The account is not currently delegating."
                    ]
                  },
                  {
                    "name": "Nonsense",
                    "index": 8,
                    "docs": [
                      "Delegation to oneself makes no sense."
                    ]
                  },
                  {
                    "name": "MaxVotesReached",
                    "index": 9,
                    "docs": [
                      "Maximum number of votes reached."
                    ]
                  },
                  {
                    "name": "ClassNeeded",
                    "index": 10,
                    "docs": [
                      "The class must be supplied since it is not easily determinable from the state."
                    ]
                  },
                  {
                    "name": "BadClass",
                    "index": 11,
                    "docs": [
                      "The class ID supplied is invalid."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "The `Error` enum of this pallet."
            ]
          }
        },
        {
          "id": 644,
          "type": {
            "path": [
              "pallet_referenda",
              "types",
              "ReferendumInfo"
            ],
            "params": [
              {
                "name": "TrackId",
                "type": 93
              },
              {
                "name": "RuntimeOrigin",
                "type": 159
              },
              {
                "name": "Moment",
                "type": 4
              },
              {
                "name": "Call",
                "type": 94
              },
              {
                "name": "Balance",
                "type": 6
              },
              {
                "name": "Tally",
                "type": 475
              },
              {
                "name": "AccountId",
                "type": 0
              },
              {
                "name": "ScheduleAddress",
                "type": 32
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Ongoing",
                    "fields": [
                      {
                        "type": 645,
                        "typeName": "ReferendumStatus<TrackId, RuntimeOrigin, Moment, Call, Balance, Tally,\nAccountId, ScheduleAddress,>"
                      }
                    ],
                    "index": 0
                  },
                  {
                    "name": "Approved",
                    "fields": [
                      {
                        "type": 4,
                        "typeName": "Moment"
                      },
                      {
                        "type": 647,
                        "typeName": "Option<Deposit<AccountId, Balance>>"
                      },
                      {
                        "type": 647,
                        "typeName": "Option<Deposit<AccountId, Balance>>"
                      }
                    ],
                    "index": 1
                  },
                  {
                    "name": "Rejected",
                    "fields": [
                      {
                        "type": 4,
                        "typeName": "Moment"
                      },
                      {
                        "type": 647,
                        "typeName": "Option<Deposit<AccountId, Balance>>"
                      },
                      {
                        "type": 647,
                        "typeName": "Option<Deposit<AccountId, Balance>>"
                      }
                    ],
                    "index": 2
                  },
                  {
                    "name": "Cancelled",
                    "fields": [
                      {
                        "type": 4,
                        "typeName": "Moment"
                      },
                      {
                        "type": 647,
                        "typeName": "Option<Deposit<AccountId, Balance>>"
                      },
                      {
                        "type": 647,
                        "typeName": "Option<Deposit<AccountId, Balance>>"
                      }
                    ],
                    "index": 3
                  },
                  {
                    "name": "TimedOut",
                    "fields": [
                      {
                        "type": 4,
                        "typeName": "Moment"
                      },
                      {
                        "type": 647,
                        "typeName": "Option<Deposit<AccountId, Balance>>"
                      },
                      {
                        "type": 647,
                        "typeName": "Option<Deposit<AccountId, Balance>>"
                      }
                    ],
                    "index": 4
                  },
                  {
                    "name": "Killed",
                    "fields": [
                      {
                        "type": 4,
                        "typeName": "Moment"
                      }
                    ],
                    "index": 5
                  }
                ]
              }
            }
          }
        },
        {
          "id": 645,
          "type": {
            "path": [
              "pallet_referenda",
              "types",
              "ReferendumStatus"
            ],
            "params": [
              {
                "name": "TrackId",
                "type": 93
              },
              {
                "name": "RuntimeOrigin",
                "type": 159
              },
              {
                "name": "Moment",
                "type": 4
              },
              {
                "name": "Call",
                "type": 94
              },
              {
                "name": "Balance",
                "type": 6
              },
              {
                "name": "Tally",
                "type": 475
              },
              {
                "name": "AccountId",
                "type": 0
              },
              {
                "name": "ScheduleAddress",
                "type": 32
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "track",
                    "type": 93,
                    "typeName": "TrackId"
                  },
                  {
                    "name": "origin",
                    "type": 159,
                    "typeName": "RuntimeOrigin"
                  },
                  {
                    "name": "proposal",
                    "type": 94,
                    "typeName": "Call"
                  },
                  {
                    "name": "enactment",
                    "type": 166,
                    "typeName": "DispatchTime<Moment>"
                  },
                  {
                    "name": "submitted",
                    "type": 4,
                    "typeName": "Moment"
                  },
                  {
                    "name": "submission_deposit",
                    "type": 646,
                    "typeName": "Deposit<AccountId, Balance>"
                  },
                  {
                    "name": "decision_deposit",
                    "type": 647,
                    "typeName": "Option<Deposit<AccountId, Balance>>"
                  },
                  {
                    "name": "deciding",
                    "type": 648,
                    "typeName": "Option<DecidingStatus<Moment>>"
                  },
                  {
                    "name": "tally",
                    "type": 475,
                    "typeName": "Tally"
                  },
                  {
                    "name": "in_queue",
                    "type": 8,
                    "typeName": "bool"
                  },
                  {
                    "name": "alarm",
                    "type": 650,
                    "typeName": "Option<(Moment, ScheduleAddress)>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 646,
          "type": {
            "path": [
              "pallet_referenda",
              "types",
              "Deposit"
            ],
            "params": [
              {
                "name": "AccountId",
                "type": 0
              },
              {
                "name": "Balance",
                "type": 6
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "who",
                    "type": 0,
                    "typeName": "AccountId"
                  },
                  {
                    "name": "amount",
                    "type": 6,
                    "typeName": "Balance"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 647,
          "type": {
            "path": [
              "Option"
            ],
            "params": [
              {
                "name": "T",
                "type": 646
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "None",
                    "index": 0
                  },
                  {
                    "name": "Some",
                    "fields": [
                      {
                        "type": 646
                      }
                    ],
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 648,
          "type": {
            "path": [
              "Option"
            ],
            "params": [
              {
                "name": "T",
                "type": 649
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "None",
                    "index": 0
                  },
                  {
                    "name": "Some",
                    "fields": [
                      {
                        "type": 649
                      }
                    ],
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 649,
          "type": {
            "path": [
              "pallet_referenda",
              "types",
              "DecidingStatus"
            ],
            "params": [
              {
                "name": "BlockNumber",
                "type": 4
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "since",
                    "type": 4,
                    "typeName": "BlockNumber"
                  },
                  {
                    "name": "confirming",
                    "type": 154,
                    "typeName": "Option<BlockNumber>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 650,
          "type": {
            "path": [
              "Option"
            ],
            "params": [
              {
                "name": "T",
                "type": 651
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "None",
                    "index": 0
                  },
                  {
                    "name": "Some",
                    "fields": [
                      {
                        "type": 651
                      }
                    ],
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 651,
          "type": {
            "def": {
              "tuple": [
                4,
                32
              ]
            }
          }
        },
        {
          "id": 652,
          "type": {
            "path": [
              "bounded_collections",
              "bounded_vec",
              "BoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 653
              },
              {
                "name": "S",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 654,
                    "typeName": "Vec<T>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 653,
          "type": {
            "def": {
              "tuple": [
                4,
                6
              ]
            }
          }
        },
        {
          "id": 654,
          "type": {
            "def": {
              "sequence": {
                "type": 653
              }
            }
          }
        },
        {
          "id": 655,
          "type": {
            "def": {
              "sequence": {
                "type": 656
              }
            }
          }
        },
        {
          "id": 656,
          "type": {
            "def": {
              "tuple": [
                93,
                657
              ]
            }
          }
        },
        {
          "id": 657,
          "type": {
            "path": [
              "pallet_referenda",
              "types",
              "TrackInfo"
            ],
            "params": [
              {
                "name": "Balance",
                "type": 6
              },
              {
                "name": "Moment",
                "type": 4
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "name",
                    "type": 523,
                    "typeName": "&'static str"
                  },
                  {
                    "name": "max_deciding",
                    "type": 4,
                    "typeName": "u32"
                  },
                  {
                    "name": "decision_deposit",
                    "type": 6,
                    "typeName": "Balance"
                  },
                  {
                    "name": "prepare_period",
                    "type": 4,
                    "typeName": "Moment"
                  },
                  {
                    "name": "decision_period",
                    "type": 4,
                    "typeName": "Moment"
                  },
                  {
                    "name": "confirm_period",
                    "type": 4,
                    "typeName": "Moment"
                  },
                  {
                    "name": "min_enactment_period",
                    "type": 4,
                    "typeName": "Moment"
                  },
                  {
                    "name": "min_approval",
                    "type": 658,
                    "typeName": "Curve"
                  },
                  {
                    "name": "min_support",
                    "type": 658,
                    "typeName": "Curve"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 658,
          "type": {
            "path": [
              "pallet_referenda",
              "types",
              "Curve"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "LinearDecreasing",
                    "fields": [
                      {
                        "name": "length",
                        "type": 43,
                        "typeName": "Perbill"
                      },
                      {
                        "name": "floor",
                        "type": 43,
                        "typeName": "Perbill"
                      },
                      {
                        "name": "ceil",
                        "type": 43,
                        "typeName": "Perbill"
                      }
                    ],
                    "index": 0
                  },
                  {
                    "name": "SteppedDecreasing",
                    "fields": [
                      {
                        "name": "begin",
                        "type": 43,
                        "typeName": "Perbill"
                      },
                      {
                        "name": "end",
                        "type": 43,
                        "typeName": "Perbill"
                      },
                      {
                        "name": "step",
                        "type": 43,
                        "typeName": "Perbill"
                      },
                      {
                        "name": "period",
                        "type": 43,
                        "typeName": "Perbill"
                      }
                    ],
                    "index": 1
                  },
                  {
                    "name": "Reciprocal",
                    "fields": [
                      {
                        "name": "factor",
                        "type": 659,
                        "typeName": "FixedI64"
                      },
                      {
                        "name": "x_offset",
                        "type": 659,
                        "typeName": "FixedI64"
                      },
                      {
                        "name": "y_offset",
                        "type": 659,
                        "typeName": "FixedI64"
                      }
                    ],
                    "index": 2
                  }
                ]
              }
            }
          }
        },
        {
          "id": 659,
          "type": {
            "path": [
              "sp_arithmetic",
              "fixed_point",
              "FixedI64"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 660,
                    "typeName": "i64"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 660,
          "type": {
            "def": {
              "primitive": "i64"
            }
          }
        },
        {
          "id": 661,
          "type": {
            "path": [
              "pallet_referenda",
              "pallet",
              "Error"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              },
              {
                "name": "I",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "NotOngoing",
                    "index": 0,
                    "docs": [
                      "Referendum is not ongoing."
                    ]
                  },
                  {
                    "name": "HasDeposit",
                    "index": 1,
                    "docs": [
                      "Referendum's decision deposit is already paid."
                    ]
                  },
                  {
                    "name": "BadTrack",
                    "index": 2,
                    "docs": [
                      "The track identifier given was invalid."
                    ]
                  },
                  {
                    "name": "Full",
                    "index": 3,
                    "docs": [
                      "There are already a full complement of referenda in progress for this track."
                    ]
                  },
                  {
                    "name": "QueueEmpty",
                    "index": 4,
                    "docs": [
                      "The queue of the track is empty."
                    ]
                  },
                  {
                    "name": "BadReferendum",
                    "index": 5,
                    "docs": [
                      "The referendum index provided is invalid in this context."
                    ]
                  },
                  {
                    "name": "NothingToDo",
                    "index": 6,
                    "docs": [
                      "There was nothing to do in the advancement."
                    ]
                  },
                  {
                    "name": "NoTrack",
                    "index": 7,
                    "docs": [
                      "No track exists for the proposal origin."
                    ]
                  },
                  {
                    "name": "Unfinished",
                    "index": 8,
                    "docs": [
                      "Any deposit cannot be refunded until after the decision is over."
                    ]
                  },
                  {
                    "name": "NoPermission",
                    "index": 9,
                    "docs": [
                      "The deposit refunder is not the depositor."
                    ]
                  },
                  {
                    "name": "NoDeposit",
                    "index": 10,
                    "docs": [
                      "The deposit cannot be refunded since none was made."
                    ]
                  },
                  {
                    "name": "BadStatus",
                    "index": 11,
                    "docs": [
                      "The referendum status is invalid for this operation."
                    ]
                  },
                  {
                    "name": "PreimageNotExist",
                    "index": 12,
                    "docs": [
                      "The preimage does not exist."
                    ]
                  },
                  {
                    "name": "PreimageStoredWithDifferentLength",
                    "index": 13,
                    "docs": [
                      "The preimage is stored with a different length than the one provided."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "The `Error` enum of this pallet."
            ]
          }
        },
        {
          "id": 662,
          "type": {
            "path": [
              "pallet_whitelist",
              "pallet",
              "Error"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "UnavailablePreImage",
                    "index": 0,
                    "docs": [
                      "The preimage of the call hash could not be loaded."
                    ]
                  },
                  {
                    "name": "UndecodableCall",
                    "index": 1,
                    "docs": [
                      "The call could not be decoded."
                    ]
                  },
                  {
                    "name": "InvalidCallWeightWitness",
                    "index": 2,
                    "docs": [
                      "The weight of the decoded call was higher than the witness."
                    ]
                  },
                  {
                    "name": "CallIsNotWhitelisted",
                    "index": 3,
                    "docs": [
                      "The call was not whitelisted."
                    ]
                  },
                  {
                    "name": "CallAlreadyWhitelisted",
                    "index": 4,
                    "docs": [
                      "The call was already whitelisted; No-Op."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "The `Error` enum of this pallet."
            ]
          }
        },
        {
          "id": 663,
          "type": {
            "path": [
              "polkadot_runtime_common",
              "claims",
              "pallet",
              "Error"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "InvalidEthereumSignature",
                    "index": 0,
                    "docs": [
                      "Invalid Ethereum signature."
                    ]
                  },
                  {
                    "name": "SignerHasNoClaim",
                    "index": 1,
                    "docs": [
                      "Ethereum address has no claim."
                    ]
                  },
                  {
                    "name": "SenderHasNoClaim",
                    "index": 2,
                    "docs": [
                      "Account ID sending transaction has no claim."
                    ]
                  },
                  {
                    "name": "PotUnderflow",
                    "index": 3,
                    "docs": [
                      "There's not enough in the pot to pay out some unvested amount. Generally implies a",
                      "logic error."
                    ]
                  },
                  {
                    "name": "InvalidStatement",
                    "index": 4,
                    "docs": [
                      "A needed statement was not included."
                    ]
                  },
                  {
                    "name": "VestedBalanceExists",
                    "index": 5,
                    "docs": [
                      "The account already has a vested balance."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "The `Error` enum of this pallet."
            ]
          }
        },
        {
          "id": 664,
          "type": {
            "path": [
              "bounded_collections",
              "bounded_vec",
              "BoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 178
              },
              {
                "name": "S",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 665,
                    "typeName": "Vec<T>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 665,
          "type": {
            "def": {
              "sequence": {
                "type": 178
              }
            }
          }
        },
        {
          "id": 666,
          "type": {
            "path": [
              "pallet_vesting",
              "Releases"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "V0",
                    "index": 0
                  },
                  {
                    "name": "V1",
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 667,
          "type": {
            "path": [
              "pallet_vesting",
              "pallet",
              "Error"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "NotVesting",
                    "index": 0,
                    "docs": [
                      "The account given is not vesting."
                    ]
                  },
                  {
                    "name": "AtMaxVestingSchedules",
                    "index": 1,
                    "docs": [
                      "The account already has `MaxVestingSchedules` count of schedules and thus",
                      "cannot add another one. Consider merging existing schedules in order to add another."
                    ]
                  },
                  {
                    "name": "AmountLow",
                    "index": 2,
                    "docs": [
                      "Amount being transferred is too low to create a vesting schedule."
                    ]
                  },
                  {
                    "name": "ScheduleIndexOutOfBounds",
                    "index": 3,
                    "docs": [
                      "An index was out of bounds of the vesting schedules."
                    ]
                  },
                  {
                    "name": "InvalidScheduleParams",
                    "index": 4,
                    "docs": [
                      "Failed to create a new schedule because some parameter was invalid."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Error for the vesting pallet."
            ]
          }
        },
        {
          "id": 668,
          "type": {
            "path": [
              "pallet_utility",
              "pallet",
              "Error"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "TooManyCalls",
                    "index": 0,
                    "docs": [
                      "Too many calls batched."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "The `Error` enum of this pallet."
            ]
          }
        },
        {
          "id": 669,
          "type": {
            "def": {
              "tuple": [
                670,
                6
              ]
            }
          }
        },
        {
          "id": 670,
          "type": {
            "path": [
              "bounded_collections",
              "bounded_vec",
              "BoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 671
              },
              {
                "name": "S",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 672,
                    "typeName": "Vec<T>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 671,
          "type": {
            "path": [
              "pallet_proxy",
              "ProxyDefinition"
            ],
            "params": [
              {
                "name": "AccountId",
                "type": 0
              },
              {
                "name": "ProxyType",
                "type": 183
              },
              {
                "name": "BlockNumber",
                "type": 4
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "delegate",
                    "type": 0,
                    "typeName": "AccountId"
                  },
                  {
                    "name": "proxy_type",
                    "type": 183,
                    "typeName": "ProxyType"
                  },
                  {
                    "name": "delay",
                    "type": 4,
                    "typeName": "BlockNumber"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 672,
          "type": {
            "def": {
              "sequence": {
                "type": 671
              }
            }
          }
        },
        {
          "id": 673,
          "type": {
            "def": {
              "tuple": [
                674,
                6
              ]
            }
          }
        },
        {
          "id": 674,
          "type": {
            "path": [
              "bounded_collections",
              "bounded_vec",
              "BoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 675
              },
              {
                "name": "S",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 676,
                    "typeName": "Vec<T>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 675,
          "type": {
            "path": [
              "pallet_proxy",
              "Announcement"
            ],
            "params": [
              {
                "name": "AccountId",
                "type": 0
              },
              {
                "name": "Hash",
                "type": 13
              },
              {
                "name": "BlockNumber",
                "type": 4
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "real",
                    "type": 0,
                    "typeName": "AccountId"
                  },
                  {
                    "name": "call_hash",
                    "type": 13,
                    "typeName": "Hash"
                  },
                  {
                    "name": "height",
                    "type": 4,
                    "typeName": "BlockNumber"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 676,
          "type": {
            "def": {
              "sequence": {
                "type": 675
              }
            }
          }
        },
        {
          "id": 677,
          "type": {
            "path": [
              "pallet_proxy",
              "pallet",
              "Error"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "TooMany",
                    "index": 0,
                    "docs": [
                      "There are too many proxies registered or too many announcements pending."
                    ]
                  },
                  {
                    "name": "NotFound",
                    "index": 1,
                    "docs": [
                      "Proxy registration not found."
                    ]
                  },
                  {
                    "name": "NotProxy",
                    "index": 2,
                    "docs": [
                      "Sender is not a proxy of the account to be proxied."
                    ]
                  },
                  {
                    "name": "Unproxyable",
                    "index": 3,
                    "docs": [
                      "A call which is incompatible with the proxy type's filter was attempted."
                    ]
                  },
                  {
                    "name": "Duplicate",
                    "index": 4,
                    "docs": [
                      "Account is already a proxy."
                    ]
                  },
                  {
                    "name": "NoPermission",
                    "index": 5,
                    "docs": [
                      "Call may not be made by proxy because it may escalate its privileges."
                    ]
                  },
                  {
                    "name": "Unannounced",
                    "index": 6,
                    "docs": [
                      "Announcement, if made at all, was made too recently."
                    ]
                  },
                  {
                    "name": "NoSelfProxy",
                    "index": 7,
                    "docs": [
                      "Cannot add self as proxy."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "The `Error` enum of this pallet."
            ]
          }
        },
        {
          "id": 678,
          "type": {
            "path": [
              "pallet_multisig",
              "Multisig"
            ],
            "params": [
              {
                "name": "BlockNumber",
                "type": 4
              },
              {
                "name": "Balance",
                "type": 6
              },
              {
                "name": "AccountId",
                "type": 0
              },
              {
                "name": "MaxApprovals",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "when",
                    "type": 186,
                    "typeName": "Timepoint<BlockNumber>"
                  },
                  {
                    "name": "deposit",
                    "type": 6,
                    "typeName": "Balance"
                  },
                  {
                    "name": "depositor",
                    "type": 0,
                    "typeName": "AccountId"
                  },
                  {
                    "name": "approvals",
                    "type": 679,
                    "typeName": "BoundedVec<AccountId, MaxApprovals>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 679,
          "type": {
            "path": [
              "bounded_collections",
              "bounded_vec",
              "BoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 0
              },
              {
                "name": "S",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 118,
                    "typeName": "Vec<T>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 680,
          "type": {
            "path": [
              "pallet_multisig",
              "pallet",
              "Error"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "MinimumThreshold",
                    "index": 0,
                    "docs": [
                      "Threshold must be 2 or greater."
                    ]
                  },
                  {
                    "name": "AlreadyApproved",
                    "index": 1,
                    "docs": [
                      "Call is already approved by this signatory."
                    ]
                  },
                  {
                    "name": "NoApprovalsNeeded",
                    "index": 2,
                    "docs": [
                      "Call doesn't need any (more) approvals."
                    ]
                  },
                  {
                    "name": "TooFewSignatories",
                    "index": 3,
                    "docs": [
                      "There are too few signatories in the list."
                    ]
                  },
                  {
                    "name": "TooManySignatories",
                    "index": 4,
                    "docs": [
                      "There are too many signatories in the list."
                    ]
                  },
                  {
                    "name": "SignatoriesOutOfOrder",
                    "index": 5,
                    "docs": [
                      "The signatories were provided out of order; they should be ordered."
                    ]
                  },
                  {
                    "name": "SenderInSignatories",
                    "index": 6,
                    "docs": [
                      "The sender was contained in the other signatories; it shouldn't be."
                    ]
                  },
                  {
                    "name": "NotFound",
                    "index": 7,
                    "docs": [
                      "Multisig operation not found when attempting to cancel."
                    ]
                  },
                  {
                    "name": "NotOwner",
                    "index": 8,
                    "docs": [
                      "Only the account that originally created the multisig is able to cancel it."
                    ]
                  },
                  {
                    "name": "NoTimepoint",
                    "index": 9,
                    "docs": [
                      "No timepoint was given, yet the multisig operation is already underway."
                    ]
                  },
                  {
                    "name": "WrongTimepoint",
                    "index": 10,
                    "docs": [
                      "A different timepoint was given to the multisig operation that is underway."
                    ]
                  },
                  {
                    "name": "UnexpectedTimepoint",
                    "index": 11,
                    "docs": [
                      "A timepoint was given, yet no multisig operation is underway."
                    ]
                  },
                  {
                    "name": "MaxWeightTooLow",
                    "index": 12,
                    "docs": [
                      "The maximum weight information provided was too low."
                    ]
                  },
                  {
                    "name": "AlreadyStored",
                    "index": 13,
                    "docs": [
                      "The data to be stored is already stored."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "The `Error` enum of this pallet."
            ]
          }
        },
        {
          "id": 681,
          "type": {
            "path": [
              "pallet_bounties",
              "Bounty"
            ],
            "params": [
              {
                "name": "AccountId",
                "type": 0
              },
              {
                "name": "Balance",
                "type": 6
              },
              {
                "name": "BlockNumber",
                "type": 4
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "proposer",
                    "type": 0,
                    "typeName": "AccountId"
                  },
                  {
                    "name": "value",
                    "type": 6,
                    "typeName": "Balance"
                  },
                  {
                    "name": "fee",
                    "type": 6,
                    "typeName": "Balance"
                  },
                  {
                    "name": "curator_deposit",
                    "type": 6,
                    "typeName": "Balance"
                  },
                  {
                    "name": "bond",
                    "type": 6,
                    "typeName": "Balance"
                  },
                  {
                    "name": "status",
                    "type": 682,
                    "typeName": "BountyStatus<AccountId, BlockNumber>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 682,
          "type": {
            "path": [
              "pallet_bounties",
              "BountyStatus"
            ],
            "params": [
              {
                "name": "AccountId",
                "type": 0
              },
              {
                "name": "BlockNumber",
                "type": 4
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Proposed",
                    "index": 0
                  },
                  {
                    "name": "Approved",
                    "index": 1
                  },
                  {
                    "name": "Funded",
                    "index": 2
                  },
                  {
                    "name": "CuratorProposed",
                    "fields": [
                      {
                        "name": "curator",
                        "type": 0,
                        "typeName": "AccountId"
                      }
                    ],
                    "index": 3
                  },
                  {
                    "name": "Active",
                    "fields": [
                      {
                        "name": "curator",
                        "type": 0,
                        "typeName": "AccountId"
                      },
                      {
                        "name": "update_due",
                        "type": 4,
                        "typeName": "BlockNumber"
                      }
                    ],
                    "index": 4
                  },
                  {
                    "name": "PendingPayout",
                    "fields": [
                      {
                        "name": "curator",
                        "type": 0,
                        "typeName": "AccountId"
                      },
                      {
                        "name": "beneficiary",
                        "type": 0,
                        "typeName": "AccountId"
                      },
                      {
                        "name": "unlock_at",
                        "type": 4,
                        "typeName": "BlockNumber"
                      }
                    ],
                    "index": 5
                  }
                ]
              }
            }
          }
        },
        {
          "id": 683,
          "type": {
            "path": [
              "bounded_collections",
              "bounded_vec",
              "BoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 2
              },
              {
                "name": "S",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 14,
                    "typeName": "Vec<T>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 684,
          "type": {
            "path": [
              "pallet_bounties",
              "pallet",
              "Error"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              },
              {
                "name": "I",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "InsufficientProposersBalance",
                    "index": 0,
                    "docs": [
                      "Proposer's balance is too low."
                    ]
                  },
                  {
                    "name": "InvalidIndex",
                    "index": 1,
                    "docs": [
                      "No proposal or bounty at that index."
                    ]
                  },
                  {
                    "name": "ReasonTooBig",
                    "index": 2,
                    "docs": [
                      "The reason given is just too big."
                    ]
                  },
                  {
                    "name": "UnexpectedStatus",
                    "index": 3,
                    "docs": [
                      "The bounty status is unexpected."
                    ]
                  },
                  {
                    "name": "RequireCurator",
                    "index": 4,
                    "docs": [
                      "Require bounty curator."
                    ]
                  },
                  {
                    "name": "InvalidValue",
                    "index": 5,
                    "docs": [
                      "Invalid bounty value."
                    ]
                  },
                  {
                    "name": "InvalidFee",
                    "index": 6,
                    "docs": [
                      "Invalid bounty fee."
                    ]
                  },
                  {
                    "name": "PendingPayout",
                    "index": 7,
                    "docs": [
                      "A bounty payout is pending.",
                      "To cancel the bounty, you must unassign and slash the curator."
                    ]
                  },
                  {
                    "name": "Premature",
                    "index": 8,
                    "docs": [
                      "The bounties cannot be claimed/closed because it's still in the countdown period."
                    ]
                  },
                  {
                    "name": "HasActiveChildBounty",
                    "index": 9,
                    "docs": [
                      "The bounty cannot be closed because it has active child bounties."
                    ]
                  },
                  {
                    "name": "TooManyQueued",
                    "index": 10,
                    "docs": [
                      "Too many approvals are already queued."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "The `Error` enum of this pallet."
            ]
          }
        },
        {
          "id": 685,
          "type": {
            "path": [
              "pallet_child_bounties",
              "ChildBounty"
            ],
            "params": [
              {
                "name": "AccountId",
                "type": 0
              },
              {
                "name": "Balance",
                "type": 6
              },
              {
                "name": "BlockNumber",
                "type": 4
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "parent_bounty",
                    "type": 4,
                    "typeName": "BountyIndex"
                  },
                  {
                    "name": "value",
                    "type": 6,
                    "typeName": "Balance"
                  },
                  {
                    "name": "fee",
                    "type": 6,
                    "typeName": "Balance"
                  },
                  {
                    "name": "curator_deposit",
                    "type": 6,
                    "typeName": "Balance"
                  },
                  {
                    "name": "status",
                    "type": 686,
                    "typeName": "ChildBountyStatus<AccountId, BlockNumber>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 686,
          "type": {
            "path": [
              "pallet_child_bounties",
              "ChildBountyStatus"
            ],
            "params": [
              {
                "name": "AccountId",
                "type": 0
              },
              {
                "name": "BlockNumber",
                "type": 4
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Added",
                    "index": 0
                  },
                  {
                    "name": "CuratorProposed",
                    "fields": [
                      {
                        "name": "curator",
                        "type": 0,
                        "typeName": "AccountId"
                      }
                    ],
                    "index": 1
                  },
                  {
                    "name": "Active",
                    "fields": [
                      {
                        "name": "curator",
                        "type": 0,
                        "typeName": "AccountId"
                      }
                    ],
                    "index": 2
                  },
                  {
                    "name": "PendingPayout",
                    "fields": [
                      {
                        "name": "curator",
                        "type": 0,
                        "typeName": "AccountId"
                      },
                      {
                        "name": "beneficiary",
                        "type": 0,
                        "typeName": "AccountId"
                      },
                      {
                        "name": "unlock_at",
                        "type": 4,
                        "typeName": "BlockNumber"
                      }
                    ],
                    "index": 3
                  }
                ]
              }
            }
          }
        },
        {
          "id": 687,
          "type": {
            "path": [
              "pallet_child_bounties",
              "pallet",
              "Error"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "ParentBountyNotActive",
                    "index": 0,
                    "docs": [
                      "The parent bounty is not in active state."
                    ]
                  },
                  {
                    "name": "InsufficientBountyBalance",
                    "index": 1,
                    "docs": [
                      "The bounty balance is not enough to add new child-bounty."
                    ]
                  },
                  {
                    "name": "TooManyChildBounties",
                    "index": 2,
                    "docs": [
                      "Number of child bounties exceeds limit `MaxActiveChildBountyCount`."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "The `Error` enum of this pallet."
            ]
          }
        },
        {
          "id": 688,
          "type": {
            "path": [
              "pallet_election_provider_multi_phase",
              "ReadySolution"
            ],
            "params": [
              {
                "name": "AccountId",
                "type": null
              },
              {
                "name": "MaxWinners",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "supports",
                    "type": 689,
                    "typeName": "BoundedSupports<AccountId, MaxWinners>"
                  },
                  {
                    "name": "score",
                    "type": 242,
                    "typeName": "ElectionScore"
                  },
                  {
                    "name": "compute",
                    "type": 489,
                    "typeName": "ElectionCompute"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 689,
          "type": {
            "path": [
              "bounded_collections",
              "bounded_vec",
              "BoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 246
              },
              {
                "name": "S",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 245,
                    "typeName": "Vec<T>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 690,
          "type": {
            "path": [
              "pallet_election_provider_multi_phase",
              "RoundSnapshot"
            ],
            "params": [
              {
                "name": "AccountId",
                "type": 0
              },
              {
                "name": "DataProvider",
                "type": 691
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "voters",
                    "type": 692,
                    "typeName": "Vec<DataProvider>"
                  },
                  {
                    "name": "targets",
                    "type": 118,
                    "typeName": "Vec<AccountId>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 691,
          "type": {
            "def": {
              "tuple": [
                0,
                12,
                592
              ]
            }
          }
        },
        {
          "id": 692,
          "type": {
            "def": {
              "sequence": {
                "type": 691
              }
            }
          }
        },
        {
          "id": 693,
          "type": {
            "path": [
              "bounded_collections",
              "bounded_vec",
              "BoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 694
              },
              {
                "name": "S",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 695,
                    "typeName": "Vec<T>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 694,
          "type": {
            "def": {
              "tuple": [
                242,
                4,
                4
              ]
            }
          }
        },
        {
          "id": 695,
          "type": {
            "def": {
              "sequence": {
                "type": 694
              }
            }
          }
        },
        {
          "id": 696,
          "type": {
            "path": [
              "pallet_election_provider_multi_phase",
              "signed",
              "SignedSubmission"
            ],
            "params": [
              {
                "name": "AccountId",
                "type": 0
              },
              {
                "name": "Balance",
                "type": 6
              },
              {
                "name": "Solution",
                "type": 191
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "who",
                    "type": 0,
                    "typeName": "AccountId"
                  },
                  {
                    "name": "deposit",
                    "type": 6,
                    "typeName": "Balance"
                  },
                  {
                    "name": "raw_solution",
                    "type": 190,
                    "typeName": "RawSolution<Solution>"
                  },
                  {
                    "name": "call_fee",
                    "type": 6,
                    "typeName": "Balance"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 697,
          "type": {
            "path": [
              "pallet_election_provider_multi_phase",
              "pallet",
              "Error"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "PreDispatchEarlySubmission",
                    "index": 0,
                    "docs": [
                      "Submission was too early."
                    ]
                  },
                  {
                    "name": "PreDispatchWrongWinnerCount",
                    "index": 1,
                    "docs": [
                      "Wrong number of winners presented."
                    ]
                  },
                  {
                    "name": "PreDispatchWeakSubmission",
                    "index": 2,
                    "docs": [
                      "Submission was too weak, score-wise."
                    ]
                  },
                  {
                    "name": "SignedQueueFull",
                    "index": 3,
                    "docs": [
                      "The queue was full, and the solution was not better than any of the existing ones."
                    ]
                  },
                  {
                    "name": "SignedCannotPayDeposit",
                    "index": 4,
                    "docs": [
                      "The origin failed to pay the deposit."
                    ]
                  },
                  {
                    "name": "SignedInvalidWitness",
                    "index": 5,
                    "docs": [
                      "Witness data to dispatchable is invalid."
                    ]
                  },
                  {
                    "name": "SignedTooMuchWeight",
                    "index": 6,
                    "docs": [
                      "The signed submission consumes too much weight"
                    ]
                  },
                  {
                    "name": "OcwCallWrongEra",
                    "index": 7,
                    "docs": [
                      "OCW submitted solution for wrong round"
                    ]
                  },
                  {
                    "name": "MissingSnapshotMetadata",
                    "index": 8,
                    "docs": [
                      "Snapshot metadata should exist but didn't."
                    ]
                  },
                  {
                    "name": "InvalidSubmissionIndex",
                    "index": 9,
                    "docs": [
                      "`Self::insert_submission` returned an invalid index."
                    ]
                  },
                  {
                    "name": "CallNotAllowed",
                    "index": 10,
                    "docs": [
                      "The call is not allowed at this point."
                    ]
                  },
                  {
                    "name": "FallbackFailed",
                    "index": 11,
                    "docs": [
                      "The fallback failed"
                    ]
                  },
                  {
                    "name": "BoundNotMet",
                    "index": 12,
                    "docs": [
                      "Some bound not met"
                    ]
                  },
                  {
                    "name": "TooManyWinners",
                    "index": 13,
                    "docs": [
                      "Submitted solution has too many winners"
                    ]
                  },
                  {
                    "name": "PreDispatchDifferentRound",
                    "index": 14,
                    "docs": [
                      "Submission was prepared for a different round."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Error of the pallet that can be returned in response to dispatches."
            ]
          }
        },
        {
          "id": 698,
          "type": {
            "path": [
              "pallet_bags_list",
              "list",
              "Node"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              },
              {
                "name": "I",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "id",
                    "type": 0,
                    "typeName": "T::AccountId"
                  },
                  {
                    "name": "prev",
                    "type": 129,
                    "typeName": "Option<T::AccountId>"
                  },
                  {
                    "name": "next",
                    "type": 129,
                    "typeName": "Option<T::AccountId>"
                  },
                  {
                    "name": "bag_upper",
                    "type": 12,
                    "typeName": "T::Score"
                  },
                  {
                    "name": "score",
                    "type": 12,
                    "typeName": "T::Score"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 699,
          "type": {
            "path": [
              "pallet_bags_list",
              "list",
              "Bag"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              },
              {
                "name": "I",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "head",
                    "type": 129,
                    "typeName": "Option<T::AccountId>"
                  },
                  {
                    "name": "tail",
                    "type": 129,
                    "typeName": "Option<T::AccountId>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 700,
          "type": {
            "def": {
              "sequence": {
                "type": 12
              }
            }
          }
        },
        {
          "id": 701,
          "type": {
            "path": [
              "pallet_bags_list",
              "pallet",
              "Error"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              },
              {
                "name": "I",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "List",
                    "fields": [
                      {
                        "type": 702,
                        "typeName": "ListError"
                      }
                    ],
                    "index": 0,
                    "docs": [
                      "A error in the list interface implementation."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "The `Error` enum of this pallet."
            ]
          }
        },
        {
          "id": 702,
          "type": {
            "path": [
              "pallet_bags_list",
              "list",
              "ListError"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Duplicate",
                    "index": 0
                  },
                  {
                    "name": "NotHeavier",
                    "index": 1
                  },
                  {
                    "name": "NotInSameBag",
                    "index": 2
                  },
                  {
                    "name": "NodeNotFound",
                    "index": 3
                  }
                ]
              }
            }
          }
        },
        {
          "id": 703,
          "type": {
            "path": [
              "pallet_nomination_pools",
              "PoolMember"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "pool_id",
                    "type": 4,
                    "typeName": "PoolId"
                  },
                  {
                    "name": "points",
                    "type": 6,
                    "typeName": "BalanceOf<T>"
                  },
                  {
                    "name": "last_recorded_reward_counter",
                    "type": 425,
                    "typeName": "T::RewardCounter"
                  },
                  {
                    "name": "unbonding_eras",
                    "type": 704,
                    "typeName": "BoundedBTreeMap<EraIndex, BalanceOf<T>, T::MaxUnbonding>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 704,
          "type": {
            "path": [
              "bounded_collections",
              "bounded_btree_map",
              "BoundedBTreeMap"
            ],
            "params": [
              {
                "name": "K",
                "type": 4
              },
              {
                "name": "V",
                "type": 6
              },
              {
                "name": "S",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 705,
                    "typeName": "BTreeMap<K, V>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 705,
          "type": {
            "path": [
              "BTreeMap"
            ],
            "params": [
              {
                "name": "K",
                "type": 4
              },
              {
                "name": "V",
                "type": 6
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 654
                  }
                ]
              }
            }
          }
        },
        {
          "id": 706,
          "type": {
            "path": [
              "pallet_nomination_pools",
              "BondedPoolInner"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "commission",
                    "type": 707,
                    "typeName": "Commission<T>"
                  },
                  {
                    "name": "member_counter",
                    "type": 4,
                    "typeName": "u32"
                  },
                  {
                    "name": "points",
                    "type": 6,
                    "typeName": "BalanceOf<T>"
                  },
                  {
                    "name": "roles",
                    "type": 710,
                    "typeName": "PoolRoles<T::AccountId>"
                  },
                  {
                    "name": "state",
                    "type": 253,
                    "typeName": "PoolState"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 707,
          "type": {
            "path": [
              "pallet_nomination_pools",
              "Commission"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "current",
                    "type": 259,
                    "typeName": "Option<(Perbill, T::AccountId)>"
                  },
                  {
                    "name": "max",
                    "type": 708,
                    "typeName": "Option<Perbill>"
                  },
                  {
                    "name": "change_rate",
                    "type": 709,
                    "typeName": "Option<CommissionChangeRate<BlockNumberFor<T>>>"
                  },
                  {
                    "name": "throttle_from",
                    "type": 154,
                    "typeName": "Option<BlockNumberFor<T>>"
                  },
                  {
                    "name": "claim_permission",
                    "type": 262,
                    "typeName": "Option<CommissionClaimPermission<T::AccountId>>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 708,
          "type": {
            "path": [
              "Option"
            ],
            "params": [
              {
                "name": "T",
                "type": 43
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "None",
                    "index": 0
                  },
                  {
                    "name": "Some",
                    "fields": [
                      {
                        "type": 43
                      }
                    ],
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 709,
          "type": {
            "path": [
              "Option"
            ],
            "params": [
              {
                "name": "T",
                "type": 261
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "None",
                    "index": 0
                  },
                  {
                    "name": "Some",
                    "fields": [
                      {
                        "type": 261
                      }
                    ],
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 710,
          "type": {
            "path": [
              "pallet_nomination_pools",
              "PoolRoles"
            ],
            "params": [
              {
                "name": "AccountId",
                "type": 0
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "depositor",
                    "type": 0,
                    "typeName": "AccountId"
                  },
                  {
                    "name": "root",
                    "type": 129,
                    "typeName": "Option<AccountId>"
                  },
                  {
                    "name": "nominator",
                    "type": 129,
                    "typeName": "Option<AccountId>"
                  },
                  {
                    "name": "bouncer",
                    "type": 129,
                    "typeName": "Option<AccountId>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 711,
          "type": {
            "path": [
              "pallet_nomination_pools",
              "RewardPool"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "last_recorded_reward_counter",
                    "type": 425,
                    "typeName": "T::RewardCounter"
                  },
                  {
                    "name": "last_recorded_total_payouts",
                    "type": 6,
                    "typeName": "BalanceOf<T>"
                  },
                  {
                    "name": "total_rewards_claimed",
                    "type": 6,
                    "typeName": "BalanceOf<T>"
                  },
                  {
                    "name": "total_commission_pending",
                    "type": 6,
                    "typeName": "BalanceOf<T>"
                  },
                  {
                    "name": "total_commission_claimed",
                    "type": 6,
                    "typeName": "BalanceOf<T>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 712,
          "type": {
            "path": [
              "pallet_nomination_pools",
              "SubPools"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "no_era",
                    "type": 713,
                    "typeName": "UnbondPool<T>"
                  },
                  {
                    "name": "with_era",
                    "type": 714,
                    "typeName": "BoundedBTreeMap<EraIndex, UnbondPool<T>, TotalUnbondingPools<T>>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 713,
          "type": {
            "path": [
              "pallet_nomination_pools",
              "UnbondPool"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "points",
                    "type": 6,
                    "typeName": "BalanceOf<T>"
                  },
                  {
                    "name": "balance",
                    "type": 6,
                    "typeName": "BalanceOf<T>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 714,
          "type": {
            "path": [
              "bounded_collections",
              "bounded_btree_map",
              "BoundedBTreeMap"
            ],
            "params": [
              {
                "name": "K",
                "type": 4
              },
              {
                "name": "V",
                "type": 713
              },
              {
                "name": "S",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 715,
                    "typeName": "BTreeMap<K, V>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 715,
          "type": {
            "path": [
              "BTreeMap"
            ],
            "params": [
              {
                "name": "K",
                "type": 4
              },
              {
                "name": "V",
                "type": 713
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 716
                  }
                ]
              }
            }
          }
        },
        {
          "id": 716,
          "type": {
            "def": {
              "sequence": {
                "type": 717
              }
            }
          }
        },
        {
          "id": 717,
          "type": {
            "def": {
              "tuple": [
                4,
                713
              ]
            }
          }
        },
        {
          "id": 718,
          "type": {
            "path": [
              "bounded_collections",
              "bounded_vec",
              "BoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 2
              },
              {
                "name": "S",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 14,
                    "typeName": "Vec<T>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 719,
          "type": {
            "path": [
              "pallet_nomination_pools",
              "pallet",
              "Error"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "PoolNotFound",
                    "index": 0,
                    "docs": [
                      "A (bonded) pool id does not exist."
                    ]
                  },
                  {
                    "name": "PoolMemberNotFound",
                    "index": 1,
                    "docs": [
                      "An account is not a member."
                    ]
                  },
                  {
                    "name": "RewardPoolNotFound",
                    "index": 2,
                    "docs": [
                      "A reward pool does not exist. In all cases this is a system logic error."
                    ]
                  },
                  {
                    "name": "SubPoolsNotFound",
                    "index": 3,
                    "docs": [
                      "A sub pool does not exist."
                    ]
                  },
                  {
                    "name": "AccountBelongsToOtherPool",
                    "index": 4,
                    "docs": [
                      "An account is already delegating in another pool. An account may only belong to one",
                      "pool at a time."
                    ]
                  },
                  {
                    "name": "FullyUnbonding",
                    "index": 5,
                    "docs": [
                      "The member is fully unbonded (and thus cannot access the bonded and reward pool",
                      "anymore to, for example, collect rewards)."
                    ]
                  },
                  {
                    "name": "MaxUnbondingLimit",
                    "index": 6,
                    "docs": [
                      "The member cannot unbond further chunks due to reaching the limit."
                    ]
                  },
                  {
                    "name": "CannotWithdrawAny",
                    "index": 7,
                    "docs": [
                      "None of the funds can be withdrawn yet because the bonding duration has not passed."
                    ]
                  },
                  {
                    "name": "MinimumBondNotMet",
                    "index": 8,
                    "docs": [
                      "The amount does not meet the minimum bond to either join or create a pool.",
                      "",
                      "The depositor can never unbond to a value less than `Pallet::depositor_min_bond`. The",
                      "caller does not have nominating permissions for the pool. Members can never unbond to a",
                      "value below `MinJoinBond`."
                    ]
                  },
                  {
                    "name": "OverflowRisk",
                    "index": 9,
                    "docs": [
                      "The transaction could not be executed due to overflow risk for the pool."
                    ]
                  },
                  {
                    "name": "NotDestroying",
                    "index": 10,
                    "docs": [
                      "A pool must be in [`PoolState::Destroying`] in order for the depositor to unbond or for",
                      "other members to be permissionlessly unbonded."
                    ]
                  },
                  {
                    "name": "NotNominator",
                    "index": 11,
                    "docs": [
                      "The caller does not have nominating permissions for the pool."
                    ]
                  },
                  {
                    "name": "NotKickerOrDestroying",
                    "index": 12,
                    "docs": [
                      "Either a) the caller cannot make a valid kick or b) the pool is not destroying."
                    ]
                  },
                  {
                    "name": "NotOpen",
                    "index": 13,
                    "docs": [
                      "The pool is not open to join"
                    ]
                  },
                  {
                    "name": "MaxPools",
                    "index": 14,
                    "docs": [
                      "The system is maxed out on pools."
                    ]
                  },
                  {
                    "name": "MaxPoolMembers",
                    "index": 15,
                    "docs": [
                      "Too many members in the pool or system."
                    ]
                  },
                  {
                    "name": "CanNotChangeState",
                    "index": 16,
                    "docs": [
                      "The pools state cannot be changed."
                    ]
                  },
                  {
                    "name": "DoesNotHavePermission",
                    "index": 17,
                    "docs": [
                      "The caller does not have adequate permissions."
                    ]
                  },
                  {
                    "name": "MetadataExceedsMaxLen",
                    "index": 18,
                    "docs": [
                      "Metadata exceeds [`Config::MaxMetadataLen`]"
                    ]
                  },
                  {
                    "name": "Defensive",
                    "fields": [
                      {
                        "type": 720,
                        "typeName": "DefensiveError"
                      }
                    ],
                    "index": 19,
                    "docs": [
                      "Some error occurred that should never happen. This should be reported to the",
                      "maintainers."
                    ]
                  },
                  {
                    "name": "PartialUnbondNotAllowedPermissionlessly",
                    "index": 20,
                    "docs": [
                      "Partial unbonding now allowed permissionlessly."
                    ]
                  },
                  {
                    "name": "MaxCommissionRestricted",
                    "index": 21,
                    "docs": [
                      "The pool's max commission cannot be set higher than the existing value."
                    ]
                  },
                  {
                    "name": "CommissionExceedsMaximum",
                    "index": 22,
                    "docs": [
                      "The supplied commission exceeds the max allowed commission."
                    ]
                  },
                  {
                    "name": "CommissionExceedsGlobalMaximum",
                    "index": 23,
                    "docs": [
                      "The supplied commission exceeds global maximum commission."
                    ]
                  },
                  {
                    "name": "CommissionChangeThrottled",
                    "index": 24,
                    "docs": [
                      "Not enough blocks have surpassed since the last commission update."
                    ]
                  },
                  {
                    "name": "CommissionChangeRateNotAllowed",
                    "index": 25,
                    "docs": [
                      "The submitted changes to commission change rate are not allowed."
                    ]
                  },
                  {
                    "name": "NoPendingCommission",
                    "index": 26,
                    "docs": [
                      "There is no pending commission to claim."
                    ]
                  },
                  {
                    "name": "NoCommissionCurrentSet",
                    "index": 27,
                    "docs": [
                      "No commission current has been set."
                    ]
                  },
                  {
                    "name": "PoolIdInUse",
                    "index": 28,
                    "docs": [
                      "Pool id currently in use."
                    ]
                  },
                  {
                    "name": "InvalidPoolId",
                    "index": 29,
                    "docs": [
                      "Pool id provided is not correct/usable."
                    ]
                  },
                  {
                    "name": "BondExtraRestricted",
                    "index": 30,
                    "docs": [
                      "Bonding extra is restricted to the exact pending reward amount."
                    ]
                  },
                  {
                    "name": "NothingToAdjust",
                    "index": 31,
                    "docs": [
                      "No imbalance in the ED deposit for the pool."
                    ]
                  },
                  {
                    "name": "NothingToSlash",
                    "index": 32,
                    "docs": [
                      "No slash pending that can be applied to the member."
                    ]
                  },
                  {
                    "name": "SlashTooLow",
                    "index": 33,
                    "docs": [
                      "The slash amount is too low to be applied."
                    ]
                  },
                  {
                    "name": "AlreadyMigrated",
                    "index": 34,
                    "docs": [
                      "The pool or member delegation has already migrated to delegate stake."
                    ]
                  },
                  {
                    "name": "NotMigrated",
                    "index": 35,
                    "docs": [
                      "The pool or member delegation has not migrated yet to delegate stake."
                    ]
                  },
                  {
                    "name": "NotSupported",
                    "index": 36,
                    "docs": [
                      "This call is not allowed in the current state of the pallet."
                    ]
                  },
                  {
                    "name": "Restricted",
                    "index": 37,
                    "docs": [
                      "Account is restricted from participation in pools. This may happen if the account is",
                      "staking in another way already."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "The `Error` enum of this pallet."
            ]
          }
        },
        {
          "id": 720,
          "type": {
            "path": [
              "pallet_nomination_pools",
              "pallet",
              "DefensiveError"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "NotEnoughSpaceInUnbondPool",
                    "index": 0
                  },
                  {
                    "name": "PoolNotFound",
                    "index": 1
                  },
                  {
                    "name": "RewardPoolNotFound",
                    "index": 2
                  },
                  {
                    "name": "SubPoolsNotFound",
                    "index": 3
                  },
                  {
                    "name": "BondedStashKilledPrematurely",
                    "index": 4
                  },
                  {
                    "name": "DelegationUnsupported",
                    "index": 5
                  },
                  {
                    "name": "SlashNotApplied",
                    "index": 6
                  }
                ]
              }
            }
          }
        },
        {
          "id": 721,
          "type": {
            "path": [
              "pallet_fast_unstake",
              "types",
              "UnstakeRequest"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "stashes",
                    "type": 722,
                    "typeName": "BoundedVec<(T::AccountId, BalanceOf<T>), T::BatchSize>"
                  },
                  {
                    "name": "checked",
                    "type": 723,
                    "typeName": "BoundedVec<EraIndex, MaxChecking<T>>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 722,
          "type": {
            "path": [
              "bounded_collections",
              "bounded_vec",
              "BoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 249
              },
              {
                "name": "S",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 248,
                    "typeName": "Vec<T>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 723,
          "type": {
            "path": [
              "bounded_collections",
              "bounded_vec",
              "BoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 4
              },
              {
                "name": "S",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 123,
                    "typeName": "Vec<T>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 724,
          "type": {
            "path": [
              "pallet_fast_unstake",
              "pallet",
              "Error"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "NotController",
                    "index": 0,
                    "docs": [
                      "The provided Controller account was not found.",
                      "",
                      "This means that the given account is not bonded."
                    ]
                  },
                  {
                    "name": "AlreadyQueued",
                    "index": 1,
                    "docs": [
                      "The bonded account has already been queued."
                    ]
                  },
                  {
                    "name": "NotFullyBonded",
                    "index": 2,
                    "docs": [
                      "The bonded account has active unlocking chunks."
                    ]
                  },
                  {
                    "name": "NotQueued",
                    "index": 3,
                    "docs": [
                      "The provided un-staker is not in the `Queue`."
                    ]
                  },
                  {
                    "name": "AlreadyHead",
                    "index": 4,
                    "docs": [
                      "The provided un-staker is already in Head, and cannot deregister."
                    ]
                  },
                  {
                    "name": "CallNotAllowed",
                    "index": 5,
                    "docs": [
                      "The call is not allowed at this point because the pallet is not active."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "The `Error` enum of this pallet."
            ]
          }
        },
        {
          "id": 725,
          "type": {
            "path": [
              "pallet_delegated_staking",
              "types",
              "Delegation"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "agent",
                    "type": 0,
                    "typeName": "T::AccountId"
                  },
                  {
                    "name": "amount",
                    "type": 6,
                    "typeName": "BalanceOf<T>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 726,
          "type": {
            "path": [
              "pallet_delegated_staking",
              "types",
              "AgentLedger"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "payee",
                    "type": 0,
                    "typeName": "T::AccountId"
                  },
                  {
                    "name": "total_delegated",
                    "type": 63,
                    "typeName": "BalanceOf<T>"
                  },
                  {
                    "name": "unclaimed_withdrawals",
                    "type": 63,
                    "typeName": "BalanceOf<T>"
                  },
                  {
                    "name": "pending_slash",
                    "type": 63,
                    "typeName": "BalanceOf<T>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 727,
          "type": {
            "path": [
              "pallet_delegated_staking",
              "pallet",
              "Error"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "NotAllowed",
                    "index": 0,
                    "docs": [
                      "The account cannot perform this operation."
                    ]
                  },
                  {
                    "name": "AlreadyStaking",
                    "index": 1,
                    "docs": [
                      "An existing staker cannot perform this action."
                    ]
                  },
                  {
                    "name": "InvalidRewardDestination",
                    "index": 2,
                    "docs": [
                      "Reward Destination cannot be same as `Agent` account."
                    ]
                  },
                  {
                    "name": "InvalidDelegation",
                    "index": 3,
                    "docs": [
                      "Delegation conditions are not met.",
                      "",
                      "Possible issues are",
                      "1) Cannot delegate to self,",
                      "2) Cannot delegate to multiple delegates."
                    ]
                  },
                  {
                    "name": "NotEnoughFunds",
                    "index": 4,
                    "docs": [
                      "The account does not have enough funds to perform the operation."
                    ]
                  },
                  {
                    "name": "NotAgent",
                    "index": 5,
                    "docs": [
                      "Not an existing `Agent` account."
                    ]
                  },
                  {
                    "name": "NotDelegator",
                    "index": 6,
                    "docs": [
                      "Not a Delegator account."
                    ]
                  },
                  {
                    "name": "BadState",
                    "index": 7,
                    "docs": [
                      "Some corruption in internal state."
                    ]
                  },
                  {
                    "name": "UnappliedSlash",
                    "index": 8,
                    "docs": [
                      "Unapplied pending slash restricts operation on `Agent`."
                    ]
                  },
                  {
                    "name": "NothingToSlash",
                    "index": 9,
                    "docs": [
                      "`Agent` has no pending slash to be applied."
                    ]
                  },
                  {
                    "name": "WithdrawFailed",
                    "index": 10,
                    "docs": [
                      "Failed to withdraw amount from Core Staking."
                    ]
                  },
                  {
                    "name": "NotSupported",
                    "index": 11,
                    "docs": [
                      "Operation not supported by this pallet."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "The `Error` enum of this pallet."
            ]
          }
        },
        {
          "id": 728,
          "type": {
            "path": [
              "polkadot_runtime_parachains",
              "configuration",
              "HostConfiguration"
            ],
            "params": [
              {
                "name": "BlockNumber",
                "type": 4
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "max_code_size",
                    "type": 4,
                    "typeName": "u32"
                  },
                  {
                    "name": "max_head_data_size",
                    "type": 4,
                    "typeName": "u32"
                  },
                  {
                    "name": "max_upward_queue_count",
                    "type": 4,
                    "typeName": "u32"
                  },
                  {
                    "name": "max_upward_queue_size",
                    "type": 4,
                    "typeName": "u32"
                  },
                  {
                    "name": "max_upward_message_size",
                    "type": 4,
                    "typeName": "u32"
                  },
                  {
                    "name": "max_upward_message_num_per_candidate",
                    "type": 4,
                    "typeName": "u32"
                  },
                  {
                    "name": "hrmp_max_message_num_per_candidate",
                    "type": 4,
                    "typeName": "u32"
                  },
                  {
                    "name": "validation_upgrade_cooldown",
                    "type": 4,
                    "typeName": "BlockNumber"
                  },
                  {
                    "name": "validation_upgrade_delay",
                    "type": 4,
                    "typeName": "BlockNumber"
                  },
                  {
                    "name": "async_backing_params",
                    "type": 266,
                    "typeName": "AsyncBackingParams"
                  },
                  {
                    "name": "max_pov_size",
                    "type": 4,
                    "typeName": "u32"
                  },
                  {
                    "name": "max_downward_message_size",
                    "type": 4,
                    "typeName": "u32"
                  },
                  {
                    "name": "hrmp_max_parachain_outbound_channels",
                    "type": 4,
                    "typeName": "u32"
                  },
                  {
                    "name": "hrmp_sender_deposit",
                    "type": 6,
                    "typeName": "Balance"
                  },
                  {
                    "name": "hrmp_recipient_deposit",
                    "type": 6,
                    "typeName": "Balance"
                  },
                  {
                    "name": "hrmp_channel_max_capacity",
                    "type": 4,
                    "typeName": "u32"
                  },
                  {
                    "name": "hrmp_channel_max_total_size",
                    "type": 4,
                    "typeName": "u32"
                  },
                  {
                    "name": "hrmp_max_parachain_inbound_channels",
                    "type": 4,
                    "typeName": "u32"
                  },
                  {
                    "name": "hrmp_channel_max_message_size",
                    "type": 4,
                    "typeName": "u32"
                  },
                  {
                    "name": "executor_params",
                    "type": 267,
                    "typeName": "ExecutorParams"
                  },
                  {
                    "name": "code_retention_period",
                    "type": 4,
                    "typeName": "BlockNumber"
                  },
                  {
                    "name": "max_validators",
                    "type": 154,
                    "typeName": "Option<u32>"
                  },
                  {
                    "name": "dispute_period",
                    "type": 4,
                    "typeName": "SessionIndex"
                  },
                  {
                    "name": "dispute_post_conclusion_acceptance_period",
                    "type": 4,
                    "typeName": "BlockNumber"
                  },
                  {
                    "name": "no_show_slots",
                    "type": 4,
                    "typeName": "u32"
                  },
                  {
                    "name": "n_delay_tranches",
                    "type": 4,
                    "typeName": "u32"
                  },
                  {
                    "name": "zeroth_delay_tranche_width",
                    "type": 4,
                    "typeName": "u32"
                  },
                  {
                    "name": "needed_approvals",
                    "type": 4,
                    "typeName": "u32"
                  },
                  {
                    "name": "relay_vrf_modulo_samples",
                    "type": 4,
                    "typeName": "u32"
                  },
                  {
                    "name": "pvf_voting_ttl",
                    "type": 4,
                    "typeName": "SessionIndex"
                  },
                  {
                    "name": "minimum_validation_upgrade_delay",
                    "type": 4,
                    "typeName": "BlockNumber"
                  },
                  {
                    "name": "minimum_backing_votes",
                    "type": 4,
                    "typeName": "u32"
                  },
                  {
                    "name": "node_features",
                    "type": 281,
                    "typeName": "NodeFeatures"
                  },
                  {
                    "name": "approval_voting_params",
                    "type": 272,
                    "typeName": "ApprovalVotingParams"
                  },
                  {
                    "name": "scheduler_params",
                    "type": 273,
                    "typeName": "SchedulerParams<BlockNumber>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 729,
          "type": {
            "def": {
              "sequence": {
                "type": 730
              }
            }
          }
        },
        {
          "id": 730,
          "type": {
            "def": {
              "tuple": [
                4,
                728
              ]
            }
          }
        },
        {
          "id": 731,
          "type": {
            "path": [
              "polkadot_runtime_parachains",
              "configuration",
              "pallet",
              "Error"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "InvalidNewValue",
                    "index": 0,
                    "docs": [
                      "The new value for a configuration parameter is invalid."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "The `Error` enum of this pallet."
            ]
          }
        },
        {
          "id": 732,
          "type": {
            "def": {
              "sequence": {
                "type": 283
              }
            }
          }
        },
        {
          "id": 733,
          "type": {
            "def": {
              "sequence": {
                "type": 137
              }
            }
          }
        },
        {
          "id": 734,
          "type": {
            "path": [
              "polkadot_runtime_parachains",
              "shared",
              "AllowedRelayParentsTracker"
            ],
            "params": [
              {
                "name": "Hash",
                "type": 13
              },
              {
                "name": "BlockNumber",
                "type": 4
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "buffer",
                    "type": 735,
                    "typeName": "VecDeque<(Hash, Hash)>"
                  },
                  {
                    "name": "latest_number",
                    "type": 4,
                    "typeName": "BlockNumber"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 735,
          "type": {
            "def": {
              "sequence": {
                "type": 736
              }
            }
          }
        },
        {
          "id": 736,
          "type": {
            "def": {
              "tuple": [
                13,
                13
              ]
            }
          }
        },
        {
          "id": 737,
          "type": {
            "def": {
              "sequence": {
                "type": 738
              }
            }
          }
        },
        {
          "id": 738,
          "type": {
            "path": [
              "polkadot_runtime_parachains",
              "inclusion",
              "CandidatePendingAvailability"
            ],
            "params": [
              {
                "name": "H",
                "type": 13
              },
              {
                "name": "N",
                "type": 4
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "core",
                    "type": 498,
                    "typeName": "CoreIndex"
                  },
                  {
                    "name": "hash",
                    "type": 304,
                    "typeName": "CandidateHash"
                  },
                  {
                    "name": "descriptor",
                    "type": 288,
                    "typeName": "CandidateDescriptor<H>"
                  },
                  {
                    "name": "commitments",
                    "type": 292,
                    "typeName": "CandidateCommitments"
                  },
                  {
                    "name": "availability_votes",
                    "type": 281,
                    "typeName": "BitVec<u8, BitOrderLsb0>"
                  },
                  {
                    "name": "backers",
                    "type": 281,
                    "typeName": "BitVec<u8, BitOrderLsb0>"
                  },
                  {
                    "name": "relay_parent_number",
                    "type": 4,
                    "typeName": "N"
                  },
                  {
                    "name": "backed_in_number",
                    "type": 4,
                    "typeName": "N"
                  },
                  {
                    "name": "backing_group",
                    "type": 499,
                    "typeName": "GroupIndex"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 739,
          "type": {
            "path": [
              "polkadot_runtime_parachains",
              "inclusion",
              "pallet",
              "Error"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "ValidatorIndexOutOfBounds",
                    "index": 0,
                    "docs": [
                      "Validator index out of bounds."
                    ]
                  },
                  {
                    "name": "UnscheduledCandidate",
                    "index": 1,
                    "docs": [
                      "Candidate submitted but para not scheduled."
                    ]
                  },
                  {
                    "name": "HeadDataTooLarge",
                    "index": 2,
                    "docs": [
                      "Head data exceeds the configured maximum."
                    ]
                  },
                  {
                    "name": "PrematureCodeUpgrade",
                    "index": 3,
                    "docs": [
                      "Code upgrade prematurely."
                    ]
                  },
                  {
                    "name": "NewCodeTooLarge",
                    "index": 4,
                    "docs": [
                      "Output code is too large"
                    ]
                  },
                  {
                    "name": "DisallowedRelayParent",
                    "index": 5,
                    "docs": [
                      "The candidate's relay-parent was not allowed. Either it was",
                      "not recent enough or it didn't advance based on the last parachain block."
                    ]
                  },
                  {
                    "name": "InvalidAssignment",
                    "index": 6,
                    "docs": [
                      "Failed to compute group index for the core: either it's out of bounds",
                      "or the relay parent doesn't belong to the current session."
                    ]
                  },
                  {
                    "name": "InvalidGroupIndex",
                    "index": 7,
                    "docs": [
                      "Invalid group index in core assignment."
                    ]
                  },
                  {
                    "name": "InsufficientBacking",
                    "index": 8,
                    "docs": [
                      "Insufficient (non-majority) backing."
                    ]
                  },
                  {
                    "name": "InvalidBacking",
                    "index": 9,
                    "docs": [
                      "Invalid (bad signature, unknown validator, etc.) backing."
                    ]
                  },
                  {
                    "name": "ValidationDataHashMismatch",
                    "index": 10,
                    "docs": [
                      "The validation data hash does not match expected."
                    ]
                  },
                  {
                    "name": "IncorrectDownwardMessageHandling",
                    "index": 11,
                    "docs": [
                      "The downward message queue is not processed correctly."
                    ]
                  },
                  {
                    "name": "InvalidUpwardMessages",
                    "index": 12,
                    "docs": [
                      "At least one upward message sent does not pass the acceptance criteria."
                    ]
                  },
                  {
                    "name": "HrmpWatermarkMishandling",
                    "index": 13,
                    "docs": [
                      "The candidate didn't follow the rules of HRMP watermark advancement."
                    ]
                  },
                  {
                    "name": "InvalidOutboundHrmp",
                    "index": 14,
                    "docs": [
                      "The HRMP messages sent by the candidate is not valid."
                    ]
                  },
                  {
                    "name": "InvalidValidationCodeHash",
                    "index": 15,
                    "docs": [
                      "The validation code hash of the candidate is not valid."
                    ]
                  },
                  {
                    "name": "ParaHeadMismatch",
                    "index": 16,
                    "docs": [
                      "The `para_head` hash in the candidate descriptor doesn't match the hash of the actual",
                      "para head in the commitments."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "The `Error` enum of this pallet."
            ]
          }
        },
        {
          "id": 740,
          "type": {
            "path": [
              "polkadot_primitives",
              "v8",
              "ScrapedOnChainVotes"
            ],
            "params": [
              {
                "name": "H",
                "type": 13
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "session",
                    "type": 4,
                    "typeName": "SessionIndex"
                  },
                  {
                    "name": "backing_validators_per_candidate",
                    "type": 741,
                    "typeName": "Vec<(CandidateReceipt<H>, Vec<(ValidatorIndex, ValidityAttestation)>)\n>"
                  },
                  {
                    "name": "disputes",
                    "type": 302,
                    "typeName": "MultiDisputeStatementSet"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 741,
          "type": {
            "def": {
              "sequence": {
                "type": 742
              }
            }
          }
        },
        {
          "id": 742,
          "type": {
            "def": {
              "tuple": [
                497,
                743
              ]
            }
          }
        },
        {
          "id": 743,
          "type": {
            "def": {
              "sequence": {
                "type": 744
              }
            }
          }
        },
        {
          "id": 744,
          "type": {
            "def": {
              "tuple": [
                283,
                301
              ]
            }
          }
        },
        {
          "id": 745,
          "type": {
            "path": [
              "polkadot_runtime_parachains",
              "paras_inherent",
              "pallet",
              "Error"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "TooManyInclusionInherents",
                    "index": 0,
                    "docs": [
                      "Inclusion inherent called more than once per block."
                    ]
                  },
                  {
                    "name": "InvalidParentHeader",
                    "index": 1,
                    "docs": [
                      "The hash of the submitted parent header doesn't correspond to the saved block hash of",
                      "the parent."
                    ]
                  },
                  {
                    "name": "InherentOverweight",
                    "index": 2,
                    "docs": [
                      "The data given to the inherent will result in an overweight block."
                    ]
                  },
                  {
                    "name": "CandidatesFilteredDuringExecution",
                    "index": 3,
                    "docs": [
                      "A candidate was filtered during inherent execution. This should have only been done",
                      "during creation."
                    ]
                  },
                  {
                    "name": "UnscheduledCandidate",
                    "index": 4,
                    "docs": [
                      "Too many candidates supplied."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "The `Error` enum of this pallet."
            ]
          }
        },
        {
          "id": 746,
          "type": {
            "def": {
              "sequence": {
                "type": 732
              }
            }
          }
        },
        {
          "id": 747,
          "type": {
            "def": {
              "sequence": {
                "type": 748
              }
            }
          }
        },
        {
          "id": 748,
          "type": {
            "path": [
              "polkadot_runtime_parachains",
              "scheduler",
              "pallet",
              "CoreOccupied"
            ],
            "params": [
              {
                "name": "N",
                "type": 4
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Free",
                    "index": 0
                  },
                  {
                    "name": "Paras",
                    "fields": [
                      {
                        "type": 749,
                        "typeName": "ParasEntry<N>"
                      }
                    ],
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 749,
          "type": {
            "path": [
              "polkadot_runtime_parachains",
              "scheduler",
              "pallet",
              "ParasEntry"
            ],
            "params": [
              {
                "name": "N",
                "type": 4
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "assignment",
                    "type": 750,
                    "typeName": "Assignment"
                  },
                  {
                    "name": "availability_timeouts",
                    "type": 4,
                    "typeName": "u32"
                  },
                  {
                    "name": "ttl",
                    "type": 4,
                    "typeName": "N"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 750,
          "type": {
            "path": [
              "polkadot_runtime_parachains",
              "scheduler",
              "common",
              "Assignment"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Pool",
                    "fields": [
                      {
                        "name": "para_id",
                        "type": 163,
                        "typeName": "ParaId"
                      },
                      {
                        "name": "core_index",
                        "type": 498,
                        "typeName": "CoreIndex"
                      }
                    ],
                    "index": 0
                  },
                  {
                    "name": "Bulk",
                    "fields": [
                      {
                        "type": 163,
                        "typeName": "ParaId"
                      }
                    ],
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 751,
          "type": {
            "path": [
              "BTreeMap"
            ],
            "params": [
              {
                "name": "K",
                "type": 498
              },
              {
                "name": "V",
                "type": 752
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 753
                  }
                ]
              }
            }
          }
        },
        {
          "id": 752,
          "type": {
            "def": {
              "sequence": {
                "type": 749
              }
            }
          }
        },
        {
          "id": 753,
          "type": {
            "def": {
              "sequence": {
                "type": 754
              }
            }
          }
        },
        {
          "id": 754,
          "type": {
            "def": {
              "tuple": [
                498,
                752
              ]
            }
          }
        },
        {
          "id": 755,
          "type": {
            "path": [
              "polkadot_runtime_parachains",
              "paras",
              "PvfCheckActiveVoteState"
            ],
            "params": [
              {
                "name": "BlockNumber",
                "type": 4
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "votes_accept",
                    "type": 281,
                    "typeName": "BitVec<u8, BitOrderLsb0>"
                  },
                  {
                    "name": "votes_reject",
                    "type": 281,
                    "typeName": "BitVec<u8, BitOrderLsb0>"
                  },
                  {
                    "name": "age",
                    "type": 4,
                    "typeName": "SessionIndex"
                  },
                  {
                    "name": "created_at",
                    "type": 4,
                    "typeName": "BlockNumber"
                  },
                  {
                    "name": "causes",
                    "type": 756,
                    "typeName": "Vec<PvfCheckCause<BlockNumber>>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 756,
          "type": {
            "def": {
              "sequence": {
                "type": 757
              }
            }
          }
        },
        {
          "id": 757,
          "type": {
            "path": [
              "polkadot_runtime_parachains",
              "paras",
              "PvfCheckCause"
            ],
            "params": [
              {
                "name": "BlockNumber",
                "type": 4
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Onboarding",
                    "fields": [
                      {
                        "type": 163,
                        "typeName": "ParaId"
                      }
                    ],
                    "index": 0
                  },
                  {
                    "name": "Upgrade",
                    "fields": [
                      {
                        "name": "id",
                        "type": 163,
                        "typeName": "ParaId"
                      },
                      {
                        "name": "included_at",
                        "type": 4,
                        "typeName": "BlockNumber"
                      },
                      {
                        "name": "upgrade_strategy",
                        "type": 758,
                        "typeName": "UpgradeStrategy"
                      }
                    ],
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 758,
          "type": {
            "path": [
              "polkadot_runtime_parachains",
              "paras",
              "UpgradeStrategy"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "SetGoAheadSignal",
                    "index": 0
                  },
                  {
                    "name": "ApplyAtExpectedBlock",
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 759,
          "type": {
            "def": {
              "sequence": {
                "type": 291
              }
            }
          }
        },
        {
          "id": 760,
          "type": {
            "def": {
              "sequence": {
                "type": 163
              }
            }
          }
        },
        {
          "id": 761,
          "type": {
            "path": [
              "polkadot_runtime_parachains",
              "paras",
              "ParaLifecycle"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Onboarding",
                    "index": 0
                  },
                  {
                    "name": "Parathread",
                    "index": 1
                  },
                  {
                    "name": "Parachain",
                    "index": 2
                  },
                  {
                    "name": "UpgradingParathread",
                    "index": 3
                  },
                  {
                    "name": "DowngradingParachain",
                    "index": 4
                  },
                  {
                    "name": "OffboardingParathread",
                    "index": 5
                  },
                  {
                    "name": "OffboardingParachain",
                    "index": 6
                  }
                ]
              }
            }
          }
        },
        {
          "id": 762,
          "type": {
            "def": {
              "tuple": [
                163,
                4
              ]
            }
          }
        },
        {
          "id": 763,
          "type": {
            "path": [
              "polkadot_runtime_parachains",
              "paras",
              "ParaPastCodeMeta"
            ],
            "params": [
              {
                "name": "N",
                "type": 4
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "upgrade_times",
                    "type": 764,
                    "typeName": "Vec<ReplacementTimes<N>>"
                  },
                  {
                    "name": "last_pruned",
                    "type": 154,
                    "typeName": "Option<N>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 764,
          "type": {
            "def": {
              "sequence": {
                "type": 765
              }
            }
          }
        },
        {
          "id": 765,
          "type": {
            "path": [
              "polkadot_runtime_parachains",
              "paras",
              "ReplacementTimes"
            ],
            "params": [
              {
                "name": "N",
                "type": 4
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "expected_at",
                    "type": 4,
                    "typeName": "N"
                  },
                  {
                    "name": "activated_at",
                    "type": 4,
                    "typeName": "N"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 766,
          "type": {
            "def": {
              "sequence": {
                "type": 762
              }
            }
          }
        },
        {
          "id": 767,
          "type": {
            "path": [
              "polkadot_primitives",
              "v8",
              "UpgradeGoAhead"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Abort",
                    "index": 0
                  },
                  {
                    "name": "GoAhead",
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 768,
          "type": {
            "path": [
              "polkadot_primitives",
              "v8",
              "UpgradeRestriction"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Present",
                    "index": 0
                  }
                ]
              }
            }
          }
        },
        {
          "id": 769,
          "type": {
            "path": [
              "polkadot_runtime_parachains",
              "paras",
              "ParaGenesisArgs"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "genesis_head",
                    "type": 299,
                    "typeName": "HeadData"
                  },
                  {
                    "name": "validation_code",
                    "type": 298,
                    "typeName": "ValidationCode"
                  },
                  {
                    "name": "para_kind",
                    "type": 8,
                    "typeName": "ParaKind"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 770,
          "type": {
            "path": [
              "polkadot_runtime_parachains",
              "paras",
              "pallet",
              "Error"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "NotRegistered",
                    "index": 0,
                    "docs": [
                      "Para is not registered in our system."
                    ]
                  },
                  {
                    "name": "CannotOnboard",
                    "index": 1,
                    "docs": [
                      "Para cannot be onboarded because it is already tracked by our system."
                    ]
                  },
                  {
                    "name": "CannotOffboard",
                    "index": 2,
                    "docs": [
                      "Para cannot be offboarded at this time."
                    ]
                  },
                  {
                    "name": "CannotUpgrade",
                    "index": 3,
                    "docs": [
                      "Para cannot be upgraded to a lease holding parachain."
                    ]
                  },
                  {
                    "name": "CannotDowngrade",
                    "index": 4,
                    "docs": [
                      "Para cannot be downgraded to an on-demand parachain."
                    ]
                  },
                  {
                    "name": "PvfCheckStatementStale",
                    "index": 5,
                    "docs": [
                      "The statement for PVF pre-checking is stale."
                    ]
                  },
                  {
                    "name": "PvfCheckStatementFuture",
                    "index": 6,
                    "docs": [
                      "The statement for PVF pre-checking is for a future session."
                    ]
                  },
                  {
                    "name": "PvfCheckValidatorIndexOutOfBounds",
                    "index": 7,
                    "docs": [
                      "Claimed validator index is out of bounds."
                    ]
                  },
                  {
                    "name": "PvfCheckInvalidSignature",
                    "index": 8,
                    "docs": [
                      "The signature for the PVF pre-checking is invalid."
                    ]
                  },
                  {
                    "name": "PvfCheckDoubleVote",
                    "index": 9,
                    "docs": [
                      "The given validator already has cast a vote."
                    ]
                  },
                  {
                    "name": "PvfCheckSubjectInvalid",
                    "index": 10,
                    "docs": [
                      "The given PVF does not exist at the moment of process a vote."
                    ]
                  },
                  {
                    "name": "CannotUpgradeCode",
                    "index": 11,
                    "docs": [
                      "Parachain cannot currently schedule a code upgrade."
                    ]
                  },
                  {
                    "name": "InvalidCode",
                    "index": 12,
                    "docs": [
                      "Invalid validation code size."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "The `Error` enum of this pallet."
            ]
          }
        },
        {
          "id": 771,
          "type": {
            "def": {
              "sequence": {
                "type": 772
              }
            }
          }
        },
        {
          "id": 772,
          "type": {
            "path": [
              "polkadot_runtime_parachains",
              "initializer",
              "BufferedSessionChange"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "validators",
                    "type": 733,
                    "typeName": "Vec<ValidatorId>"
                  },
                  {
                    "name": "queued",
                    "type": 733,
                    "typeName": "Vec<ValidatorId>"
                  },
                  {
                    "name": "session_index",
                    "type": 4,
                    "typeName": "SessionIndex"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 773,
          "type": {
            "def": {
              "sequence": {
                "type": 774
              }
            }
          }
        },
        {
          "id": 774,
          "type": {
            "path": [
              "polkadot_core_primitives",
              "InboundDownwardMessage"
            ],
            "params": [
              {
                "name": "BlockNumber",
                "type": 4
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "sent_at",
                    "type": 4,
                    "typeName": "BlockNumber"
                  },
                  {
                    "name": "msg",
                    "type": 14,
                    "typeName": "DownwardMessage"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 775,
          "type": {
            "path": [
              "polkadot_runtime_parachains",
              "hrmp",
              "HrmpOpenChannelRequest"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "confirmed",
                    "type": 8,
                    "typeName": "bool"
                  },
                  {
                    "name": "_age",
                    "type": 4,
                    "typeName": "SessionIndex"
                  },
                  {
                    "name": "sender_deposit",
                    "type": 6,
                    "typeName": "Balance"
                  },
                  {
                    "name": "max_message_size",
                    "type": 4,
                    "typeName": "u32"
                  },
                  {
                    "name": "max_capacity",
                    "type": 4,
                    "typeName": "u32"
                  },
                  {
                    "name": "max_total_size",
                    "type": 4,
                    "typeName": "u32"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 776,
          "type": {
            "def": {
              "sequence": {
                "type": 315
              }
            }
          }
        },
        {
          "id": 777,
          "type": {
            "path": [
              "polkadot_runtime_parachains",
              "hrmp",
              "HrmpChannel"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "max_capacity",
                    "type": 4,
                    "typeName": "u32"
                  },
                  {
                    "name": "max_total_size",
                    "type": 4,
                    "typeName": "u32"
                  },
                  {
                    "name": "max_message_size",
                    "type": 4,
                    "typeName": "u32"
                  },
                  {
                    "name": "msg_count",
                    "type": 4,
                    "typeName": "u32"
                  },
                  {
                    "name": "total_size",
                    "type": 4,
                    "typeName": "u32"
                  },
                  {
                    "name": "mqc_head",
                    "type": 167,
                    "typeName": "Option<Hash>"
                  },
                  {
                    "name": "sender_deposit",
                    "type": 6,
                    "typeName": "Balance"
                  },
                  {
                    "name": "recipient_deposit",
                    "type": 6,
                    "typeName": "Balance"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 778,
          "type": {
            "def": {
              "sequence": {
                "type": 779
              }
            }
          }
        },
        {
          "id": 779,
          "type": {
            "path": [
              "polkadot_core_primitives",
              "InboundHrmpMessage"
            ],
            "params": [
              {
                "name": "BlockNumber",
                "type": 4
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "sent_at",
                    "type": 4,
                    "typeName": "BlockNumber"
                  },
                  {
                    "name": "data",
                    "type": 14,
                    "typeName": "alloc::vec::Vec<u8>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 780,
          "type": {
            "def": {
              "sequence": {
                "type": 781
              }
            }
          }
        },
        {
          "id": 781,
          "type": {
            "def": {
              "tuple": [
                4,
                760
              ]
            }
          }
        },
        {
          "id": 782,
          "type": {
            "path": [
              "polkadot_runtime_parachains",
              "hrmp",
              "pallet",
              "Error"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "OpenHrmpChannelToSelf",
                    "index": 0,
                    "docs": [
                      "The sender tried to open a channel to themselves."
                    ]
                  },
                  {
                    "name": "OpenHrmpChannelInvalidRecipient",
                    "index": 1,
                    "docs": [
                      "The recipient is not a valid para."
                    ]
                  },
                  {
                    "name": "OpenHrmpChannelZeroCapacity",
                    "index": 2,
                    "docs": [
                      "The requested capacity is zero."
                    ]
                  },
                  {
                    "name": "OpenHrmpChannelCapacityExceedsLimit",
                    "index": 3,
                    "docs": [
                      "The requested capacity exceeds the global limit."
                    ]
                  },
                  {
                    "name": "OpenHrmpChannelZeroMessageSize",
                    "index": 4,
                    "docs": [
                      "The requested maximum message size is 0."
                    ]
                  },
                  {
                    "name": "OpenHrmpChannelMessageSizeExceedsLimit",
                    "index": 5,
                    "docs": [
                      "The open request requested the message size that exceeds the global limit."
                    ]
                  },
                  {
                    "name": "OpenHrmpChannelAlreadyExists",
                    "index": 6,
                    "docs": [
                      "The channel already exists"
                    ]
                  },
                  {
                    "name": "OpenHrmpChannelAlreadyRequested",
                    "index": 7,
                    "docs": [
                      "There is already a request to open the same channel."
                    ]
                  },
                  {
                    "name": "OpenHrmpChannelLimitExceeded",
                    "index": 8,
                    "docs": [
                      "The sender already has the maximum number of allowed outbound channels."
                    ]
                  },
                  {
                    "name": "AcceptHrmpChannelDoesntExist",
                    "index": 9,
                    "docs": [
                      "The channel from the sender to the origin doesn't exist."
                    ]
                  },
                  {
                    "name": "AcceptHrmpChannelAlreadyConfirmed",
                    "index": 10,
                    "docs": [
                      "The channel is already confirmed."
                    ]
                  },
                  {
                    "name": "AcceptHrmpChannelLimitExceeded",
                    "index": 11,
                    "docs": [
                      "The recipient already has the maximum number of allowed inbound channels."
                    ]
                  },
                  {
                    "name": "CloseHrmpChannelUnauthorized",
                    "index": 12,
                    "docs": [
                      "The origin tries to close a channel where it is neither the sender nor the recipient."
                    ]
                  },
                  {
                    "name": "CloseHrmpChannelDoesntExist",
                    "index": 13,
                    "docs": [
                      "The channel to be closed doesn't exist."
                    ]
                  },
                  {
                    "name": "CloseHrmpChannelAlreadyUnderway",
                    "index": 14,
                    "docs": [
                      "The channel close request is already requested."
                    ]
                  },
                  {
                    "name": "CancelHrmpOpenChannelUnauthorized",
                    "index": 15,
                    "docs": [
                      "Canceling is requested by neither the sender nor recipient of the open channel request."
                    ]
                  },
                  {
                    "name": "OpenHrmpChannelDoesntExist",
                    "index": 16,
                    "docs": [
                      "The open request doesn't exist."
                    ]
                  },
                  {
                    "name": "OpenHrmpChannelAlreadyConfirmed",
                    "index": 17,
                    "docs": [
                      "Cannot cancel an HRMP open channel request because it is already confirmed."
                    ]
                  },
                  {
                    "name": "WrongWitness",
                    "index": 18,
                    "docs": [
                      "The provided witness data is wrong."
                    ]
                  },
                  {
                    "name": "ChannelCreationNotAuthorized",
                    "index": 19,
                    "docs": [
                      "The channel between these two chains cannot be authorized."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "The `Error` enum of this pallet."
            ]
          }
        },
        {
          "id": 783,
          "type": {
            "def": {
              "sequence": {
                "type": 138
              }
            }
          }
        },
        {
          "id": 784,
          "type": {
            "path": [
              "polkadot_primitives",
              "v8",
              "SessionInfo"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "active_validator_indices",
                    "type": 732,
                    "typeName": "Vec<ValidatorIndex>"
                  },
                  {
                    "name": "random_seed",
                    "type": 1,
                    "typeName": "[u8; 32]"
                  },
                  {
                    "name": "dispute_period",
                    "type": 4,
                    "typeName": "SessionIndex"
                  },
                  {
                    "name": "validators",
                    "type": 785,
                    "typeName": "IndexedVec<ValidatorIndex, ValidatorId>"
                  },
                  {
                    "name": "discovery_keys",
                    "type": 624,
                    "typeName": "Vec<AuthorityDiscoveryId>"
                  },
                  {
                    "name": "assignment_keys",
                    "type": 783,
                    "typeName": "Vec<AssignmentId>"
                  },
                  {
                    "name": "validator_groups",
                    "type": 786,
                    "typeName": "IndexedVec<GroupIndex, Vec<ValidatorIndex>>"
                  },
                  {
                    "name": "n_cores",
                    "type": 4,
                    "typeName": "u32"
                  },
                  {
                    "name": "zeroth_delay_tranche_width",
                    "type": 4,
                    "typeName": "u32"
                  },
                  {
                    "name": "relay_vrf_modulo_samples",
                    "type": 4,
                    "typeName": "u32"
                  },
                  {
                    "name": "n_delay_tranches",
                    "type": 4,
                    "typeName": "u32"
                  },
                  {
                    "name": "no_show_slots",
                    "type": 4,
                    "typeName": "u32"
                  },
                  {
                    "name": "needed_approvals",
                    "type": 4,
                    "typeName": "u32"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 785,
          "type": {
            "path": [
              "polkadot_primitives",
              "v8",
              "IndexedVec"
            ],
            "params": [
              {
                "name": "K",
                "type": 283
              },
              {
                "name": "V",
                "type": 137
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 733,
                    "typeName": "Vec<V>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 786,
          "type": {
            "path": [
              "polkadot_primitives",
              "v8",
              "IndexedVec"
            ],
            "params": [
              {
                "name": "K",
                "type": 499
              },
              {
                "name": "V",
                "type": 732
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 746,
                    "typeName": "Vec<V>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 787,
          "type": {
            "def": {
              "tuple": [
                4,
                304
              ]
            }
          }
        },
        {
          "id": 788,
          "type": {
            "path": [
              "polkadot_primitives",
              "v8",
              "DisputeState"
            ],
            "params": [
              {
                "name": "N",
                "type": 4
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "validators_for",
                    "type": 281,
                    "typeName": "BitVec<u8, bitvec::order::Lsb0>"
                  },
                  {
                    "name": "validators_against",
                    "type": 281,
                    "typeName": "BitVec<u8, bitvec::order::Lsb0>"
                  },
                  {
                    "name": "start",
                    "type": 4,
                    "typeName": "N"
                  },
                  {
                    "name": "concluded_at",
                    "type": 154,
                    "typeName": "Option<N>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 789,
          "type": {
            "path": [
              "BTreeSet"
            ],
            "params": [
              {
                "name": "T",
                "type": 283
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 732
                  }
                ]
              }
            }
          }
        },
        {
          "id": 790,
          "type": {
            "path": [
              "polkadot_runtime_parachains",
              "disputes",
              "pallet",
              "Error"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "DuplicateDisputeStatementSets",
                    "index": 0,
                    "docs": [
                      "Duplicate dispute statement sets provided."
                    ]
                  },
                  {
                    "name": "AncientDisputeStatement",
                    "index": 1,
                    "docs": [
                      "Ancient dispute statement provided."
                    ]
                  },
                  {
                    "name": "ValidatorIndexOutOfBounds",
                    "index": 2,
                    "docs": [
                      "Validator index on statement is out of bounds for session."
                    ]
                  },
                  {
                    "name": "InvalidSignature",
                    "index": 3,
                    "docs": [
                      "Invalid signature on statement."
                    ]
                  },
                  {
                    "name": "DuplicateStatement",
                    "index": 4,
                    "docs": [
                      "Validator vote submitted more than once to dispute."
                    ]
                  },
                  {
                    "name": "SingleSidedDispute",
                    "index": 5,
                    "docs": [
                      "A dispute where there are only votes on one side."
                    ]
                  },
                  {
                    "name": "MaliciousBacker",
                    "index": 6,
                    "docs": [
                      "A dispute vote from a malicious backer."
                    ]
                  },
                  {
                    "name": "MissingBackingVotes",
                    "index": 7,
                    "docs": [
                      "No backing votes were provides along dispute statements."
                    ]
                  },
                  {
                    "name": "UnconfirmedDispute",
                    "index": 8,
                    "docs": [
                      "Unconfirmed dispute statement sets provided."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "The `Error` enum of this pallet."
            ]
          }
        },
        {
          "id": 791,
          "type": {
            "path": [
              "polkadot_primitives",
              "v8",
              "slashing",
              "PendingSlashes"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "keys",
                    "type": 792,
                    "typeName": "BTreeMap<ValidatorIndex, ValidatorId>"
                  },
                  {
                    "name": "kind",
                    "type": 320,
                    "typeName": "SlashingOffenceKind"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 792,
          "type": {
            "path": [
              "BTreeMap"
            ],
            "params": [
              {
                "name": "K",
                "type": 283
              },
              {
                "name": "V",
                "type": 137
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 793
                  }
                ]
              }
            }
          }
        },
        {
          "id": 793,
          "type": {
            "def": {
              "sequence": {
                "type": 794
              }
            }
          }
        },
        {
          "id": 794,
          "type": {
            "def": {
              "tuple": [
                283,
                137
              ]
            }
          }
        },
        {
          "id": 795,
          "type": {
            "path": [
              "polkadot_runtime_parachains",
              "disputes",
              "slashing",
              "pallet",
              "Error"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "InvalidKeyOwnershipProof",
                    "index": 0,
                    "docs": [
                      "The key ownership proof is invalid."
                    ]
                  },
                  {
                    "name": "InvalidSessionIndex",
                    "index": 1,
                    "docs": [
                      "The session index is too old or invalid."
                    ]
                  },
                  {
                    "name": "InvalidCandidateHash",
                    "index": 2,
                    "docs": [
                      "The candidate hash is invalid."
                    ]
                  },
                  {
                    "name": "InvalidValidatorIndex",
                    "index": 3,
                    "docs": [
                      "There is no pending slash for the given validator index and time",
                      "slot."
                    ]
                  },
                  {
                    "name": "ValidatorIndexIdMismatch",
                    "index": 4,
                    "docs": [
                      "The validator index does not match the validator id."
                    ]
                  },
                  {
                    "name": "DuplicateSlashingReport",
                    "index": 5,
                    "docs": [
                      "The given slashing report is valid but already previously reported."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "The `Error` enum of this pallet."
            ]
          }
        },
        {
          "id": 796,
          "type": {
            "path": [
              "polkadot_runtime_parachains",
              "on_demand",
              "types",
              "CoreAffinityCount"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "core_index",
                    "type": 498,
                    "typeName": "CoreIndex"
                  },
                  {
                    "name": "count",
                    "type": 4,
                    "typeName": "u32"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 797,
          "type": {
            "path": [
              "polkadot_runtime_parachains",
              "on_demand",
              "types",
              "QueueStatusType"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "traffic",
                    "type": 425,
                    "typeName": "FixedU128"
                  },
                  {
                    "name": "next_index",
                    "type": 798,
                    "typeName": "QueueIndex"
                  },
                  {
                    "name": "smallest_index",
                    "type": 798,
                    "typeName": "QueueIndex"
                  },
                  {
                    "name": "freed_indices",
                    "type": 799,
                    "typeName": "BinaryHeap<ReverseQueueIndex>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 798,
          "type": {
            "path": [
              "polkadot_runtime_parachains",
              "on_demand",
              "types",
              "QueueIndex"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 4,
                    "typeName": "u32"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 799,
          "type": {
            "path": [
              "BinaryHeap"
            ],
            "params": [
              {
                "name": "T",
                "type": 800
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 801
                  }
                ]
              }
            }
          }
        },
        {
          "id": 800,
          "type": {
            "path": [
              "polkadot_runtime_parachains",
              "on_demand",
              "types",
              "ReverseQueueIndex"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 4,
                    "typeName": "u32"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 801,
          "type": {
            "def": {
              "sequence": {
                "type": 800
              }
            }
          }
        },
        {
          "id": 802,
          "type": {
            "path": [
              "BinaryHeap"
            ],
            "params": [
              {
                "name": "T",
                "type": 803
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 804
                  }
                ]
              }
            }
          }
        },
        {
          "id": 803,
          "type": {
            "path": [
              "polkadot_runtime_parachains",
              "on_demand",
              "types",
              "EnqueuedOrder"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "para_id",
                    "type": 163,
                    "typeName": "ParaId"
                  },
                  {
                    "name": "idx",
                    "type": 798,
                    "typeName": "QueueIndex"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 804,
          "type": {
            "def": {
              "sequence": {
                "type": 803
              }
            }
          }
        },
        {
          "id": 805,
          "type": {
            "path": [
              "bounded_collections",
              "bounded_vec",
              "BoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 6
              },
              {
                "name": "S",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 806,
                    "typeName": "Vec<T>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 806,
          "type": {
            "def": {
              "sequence": {
                "type": 6
              }
            }
          }
        },
        {
          "id": 807,
          "type": {
            "path": [
              "polkadot_runtime_parachains",
              "on_demand",
              "pallet",
              "Error"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "QueueFull",
                    "index": 0,
                    "docs": [
                      "The order queue is full, `place_order` will not continue."
                    ]
                  },
                  {
                    "name": "SpotPriceHigherThanMaxAmount",
                    "index": 1,
                    "docs": [
                      "The current spot price is higher than the max amount specified in the `place_order`",
                      "call, making it invalid."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "The `Error` enum of this pallet."
            ]
          }
        },
        {
          "id": 808,
          "type": {
            "def": {
              "tuple": [
                4,
                498
              ]
            }
          }
        },
        {
          "id": 809,
          "type": {
            "path": [
              "polkadot_runtime_parachains",
              "assigner_coretime",
              "Schedule"
            ],
            "params": [
              {
                "name": "N",
                "type": 4
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "assignments",
                    "type": 332,
                    "typeName": "Vec<(CoreAssignment, PartsOf57600)>"
                  },
                  {
                    "name": "end_hint",
                    "type": 154,
                    "typeName": "Option<N>"
                  },
                  {
                    "name": "next_schedule",
                    "type": 154,
                    "typeName": "Option<N>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 810,
          "type": {
            "path": [
              "polkadot_runtime_parachains",
              "assigner_coretime",
              "CoreDescriptor"
            ],
            "params": [
              {
                "name": "N",
                "type": 4
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "queue",
                    "type": 811,
                    "typeName": "Option<QueueDescriptor<N>>"
                  },
                  {
                    "name": "current_work",
                    "type": 813,
                    "typeName": "Option<WorkState<N>>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 811,
          "type": {
            "path": [
              "Option"
            ],
            "params": [
              {
                "name": "T",
                "type": 812
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "None",
                    "index": 0
                  },
                  {
                    "name": "Some",
                    "fields": [
                      {
                        "type": 812
                      }
                    ],
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 812,
          "type": {
            "path": [
              "polkadot_runtime_parachains",
              "assigner_coretime",
              "QueueDescriptor"
            ],
            "params": [
              {
                "name": "N",
                "type": 4
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "first",
                    "type": 4,
                    "typeName": "N"
                  },
                  {
                    "name": "last",
                    "type": 4,
                    "typeName": "N"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 813,
          "type": {
            "path": [
              "Option"
            ],
            "params": [
              {
                "name": "T",
                "type": 814
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "None",
                    "index": 0
                  },
                  {
                    "name": "Some",
                    "fields": [
                      {
                        "type": 814
                      }
                    ],
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 814,
          "type": {
            "path": [
              "polkadot_runtime_parachains",
              "assigner_coretime",
              "WorkState"
            ],
            "params": [
              {
                "name": "N",
                "type": 4
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "assignments",
                    "type": 815,
                    "typeName": "Vec<(CoreAssignment, AssignmentState)>"
                  },
                  {
                    "name": "end_hint",
                    "type": 154,
                    "typeName": "Option<N>"
                  },
                  {
                    "name": "pos",
                    "type": 93,
                    "typeName": "u16"
                  },
                  {
                    "name": "step",
                    "type": 335,
                    "typeName": "PartsOf57600"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 815,
          "type": {
            "def": {
              "sequence": {
                "type": 816
              }
            }
          }
        },
        {
          "id": 816,
          "type": {
            "def": {
              "tuple": [
                334,
                817
              ]
            }
          }
        },
        {
          "id": 817,
          "type": {
            "path": [
              "polkadot_runtime_parachains",
              "assigner_coretime",
              "AssignmentState"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "ratio",
                    "type": 335,
                    "typeName": "PartsOf57600"
                  },
                  {
                    "name": "remaining",
                    "type": 335,
                    "typeName": "PartsOf57600"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 818,
          "type": {
            "path": [
              "polkadot_runtime_parachains",
              "assigner_coretime",
              "pallet",
              "Error"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "AssignmentsEmpty",
                    "index": 0
                  },
                  {
                    "name": "OverScheduled",
                    "index": 1,
                    "docs": [
                      "Assignments together exceeded 57600."
                    ]
                  },
                  {
                    "name": "UnderScheduled",
                    "index": 2,
                    "docs": [
                      "Assignments together less than 57600"
                    ]
                  },
                  {
                    "name": "DisallowedInsert",
                    "index": 3,
                    "docs": [
                      "assign_core is only allowed to append new assignments at the end of already existing",
                      "ones."
                    ]
                  },
                  {
                    "name": "DuplicateInsert",
                    "index": 4,
                    "docs": [
                      "Tried to insert a schedule for the same core and block number as an existing schedule"
                    ]
                  },
                  {
                    "name": "AssignmentsNotSorted",
                    "index": 5,
                    "docs": [
                      "Tried to add an unsorted set of assignments"
                    ]
                  }
                ]
              }
            },
            "docs": [
              "The `Error` enum of this pallet."
            ]
          }
        },
        {
          "id": 819,
          "type": {
            "path": [
              "polkadot_runtime_common",
              "paras_registrar",
              "ParaInfo"
            ],
            "params": [
              {
                "name": "Account",
                "type": 0
              },
              {
                "name": "Balance",
                "type": 6
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "manager",
                    "type": 0,
                    "typeName": "Account"
                  },
                  {
                    "name": "deposit",
                    "type": 6,
                    "typeName": "Balance"
                  },
                  {
                    "name": "locked",
                    "type": 820,
                    "typeName": "Option<bool>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 820,
          "type": {
            "path": [
              "Option"
            ],
            "params": [
              {
                "name": "T",
                "type": 8
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "None",
                    "index": 0
                  },
                  {
                    "name": "Some",
                    "fields": [
                      {
                        "type": 8
                      }
                    ],
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 821,
          "type": {
            "path": [
              "polkadot_runtime_common",
              "paras_registrar",
              "pallet",
              "Error"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "NotRegistered",
                    "index": 0,
                    "docs": [
                      "The ID is not registered."
                    ]
                  },
                  {
                    "name": "AlreadyRegistered",
                    "index": 1,
                    "docs": [
                      "The ID is already registered."
                    ]
                  },
                  {
                    "name": "NotOwner",
                    "index": 2,
                    "docs": [
                      "The caller is not the owner of this Id."
                    ]
                  },
                  {
                    "name": "CodeTooLarge",
                    "index": 3,
                    "docs": [
                      "Invalid para code size."
                    ]
                  },
                  {
                    "name": "HeadDataTooLarge",
                    "index": 4,
                    "docs": [
                      "Invalid para head data size."
                    ]
                  },
                  {
                    "name": "NotParachain",
                    "index": 5,
                    "docs": [
                      "Para is not a Parachain."
                    ]
                  },
                  {
                    "name": "NotParathread",
                    "index": 6,
                    "docs": [
                      "Para is not a Parathread (on-demand parachain)."
                    ]
                  },
                  {
                    "name": "CannotDeregister",
                    "index": 7,
                    "docs": [
                      "Cannot deregister para"
                    ]
                  },
                  {
                    "name": "CannotDowngrade",
                    "index": 8,
                    "docs": [
                      "Cannot schedule downgrade of lease holding parachain to on-demand parachain"
                    ]
                  },
                  {
                    "name": "CannotUpgrade",
                    "index": 9,
                    "docs": [
                      "Cannot schedule upgrade of on-demand parachain to lease holding parachain"
                    ]
                  },
                  {
                    "name": "ParaLocked",
                    "index": 10,
                    "docs": [
                      "Para is locked from manipulation by the manager. Must use parachain or relay chain",
                      "governance."
                    ]
                  },
                  {
                    "name": "NotReserved",
                    "index": 11,
                    "docs": [
                      "The ID given for registration has not been reserved."
                    ]
                  },
                  {
                    "name": "InvalidCode",
                    "index": 12,
                    "docs": [
                      "The validation code is invalid."
                    ]
                  },
                  {
                    "name": "CannotSwap",
                    "index": 13,
                    "docs": [
                      "Cannot perform a parachain slot / lifecycle swap. Check that the state of both paras",
                      "are correct for the swap to work."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "The `Error` enum of this pallet."
            ]
          }
        },
        {
          "id": 822,
          "type": {
            "def": {
              "sequence": {
                "type": 543
              }
            }
          }
        },
        {
          "id": 823,
          "type": {
            "path": [
              "polkadot_runtime_common",
              "slots",
              "pallet",
              "Error"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "ParaNotOnboarding",
                    "index": 0,
                    "docs": [
                      "The parachain ID is not onboarding."
                    ]
                  },
                  {
                    "name": "LeaseError",
                    "index": 1,
                    "docs": [
                      "There was an error with the lease."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "The `Error` enum of this pallet."
            ]
          }
        },
        {
          "id": 824,
          "type": {
            "def": {
              "tuple": [
                0,
                163
              ]
            }
          }
        },
        {
          "id": 825,
          "type": {
            "def": {
              "array": {
                "len": 36,
                "type": 826
              }
            }
          }
        },
        {
          "id": 826,
          "type": {
            "path": [
              "Option"
            ],
            "params": [
              {
                "name": "T",
                "type": 827
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "None",
                    "index": 0
                  },
                  {
                    "name": "Some",
                    "fields": [
                      {
                        "type": 827
                      }
                    ],
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 827,
          "type": {
            "def": {
              "tuple": [
                0,
                163,
                6
              ]
            }
          }
        },
        {
          "id": 828,
          "type": {
            "path": [
              "polkadot_runtime_common",
              "auctions",
              "pallet",
              "Error"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "AuctionInProgress",
                    "index": 0,
                    "docs": [
                      "This auction is already in progress."
                    ]
                  },
                  {
                    "name": "LeasePeriodInPast",
                    "index": 1,
                    "docs": [
                      "The lease period is in the past."
                    ]
                  },
                  {
                    "name": "ParaNotRegistered",
                    "index": 2,
                    "docs": [
                      "Para is not registered"
                    ]
                  },
                  {
                    "name": "NotCurrentAuction",
                    "index": 3,
                    "docs": [
                      "Not a current auction."
                    ]
                  },
                  {
                    "name": "NotAuction",
                    "index": 4,
                    "docs": [
                      "Not an auction."
                    ]
                  },
                  {
                    "name": "AuctionEnded",
                    "index": 5,
                    "docs": [
                      "Auction has already ended."
                    ]
                  },
                  {
                    "name": "AlreadyLeasedOut",
                    "index": 6,
                    "docs": [
                      "The para is already leased out for part of this range."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "The `Error` enum of this pallet."
            ]
          }
        },
        {
          "id": 829,
          "type": {
            "path": [
              "polkadot_runtime_common",
              "crowdloan",
              "FundInfo"
            ],
            "params": [
              {
                "name": "AccountId",
                "type": 0
              },
              {
                "name": "Balance",
                "type": 6
              },
              {
                "name": "BlockNumber",
                "type": 4
              },
              {
                "name": "LeasePeriod",
                "type": 4
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "depositor",
                    "type": 0,
                    "typeName": "AccountId"
                  },
                  {
                    "name": "verifier",
                    "type": 327,
                    "typeName": "Option<MultiSigner>"
                  },
                  {
                    "name": "deposit",
                    "type": 6,
                    "typeName": "Balance"
                  },
                  {
                    "name": "raised",
                    "type": 6,
                    "typeName": "Balance"
                  },
                  {
                    "name": "end",
                    "type": 4,
                    "typeName": "BlockNumber"
                  },
                  {
                    "name": "cap",
                    "type": 6,
                    "typeName": "Balance"
                  },
                  {
                    "name": "last_contribution",
                    "type": 830,
                    "typeName": "LastContribution<BlockNumber>"
                  },
                  {
                    "name": "first_period",
                    "type": 4,
                    "typeName": "LeasePeriod"
                  },
                  {
                    "name": "last_period",
                    "type": 4,
                    "typeName": "LeasePeriod"
                  },
                  {
                    "name": "fund_index",
                    "type": 4,
                    "typeName": "FundIndex"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 830,
          "type": {
            "path": [
              "polkadot_runtime_common",
              "crowdloan",
              "LastContribution"
            ],
            "params": [
              {
                "name": "BlockNumber",
                "type": 4
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Never",
                    "index": 0
                  },
                  {
                    "name": "PreEnding",
                    "fields": [
                      {
                        "type": 4,
                        "typeName": "u32"
                      }
                    ],
                    "index": 1
                  },
                  {
                    "name": "Ending",
                    "fields": [
                      {
                        "type": 4,
                        "typeName": "BlockNumber"
                      }
                    ],
                    "index": 2
                  }
                ]
              }
            }
          }
        },
        {
          "id": 831,
          "type": {
            "path": [
              "polkadot_runtime_common",
              "crowdloan",
              "pallet",
              "Error"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "FirstPeriodInPast",
                    "index": 0,
                    "docs": [
                      "The current lease period is more than the first lease period."
                    ]
                  },
                  {
                    "name": "FirstPeriodTooFarInFuture",
                    "index": 1,
                    "docs": [
                      "The first lease period needs to at least be less than 3 `max_value`."
                    ]
                  },
                  {
                    "name": "LastPeriodBeforeFirstPeriod",
                    "index": 2,
                    "docs": [
                      "Last lease period must be greater than first lease period."
                    ]
                  },
                  {
                    "name": "LastPeriodTooFarInFuture",
                    "index": 3,
                    "docs": [
                      "The last lease period cannot be more than 3 periods after the first period."
                    ]
                  },
                  {
                    "name": "CannotEndInPast",
                    "index": 4,
                    "docs": [
                      "The campaign ends before the current block number. The end must be in the future."
                    ]
                  },
                  {
                    "name": "EndTooFarInFuture",
                    "index": 5,
                    "docs": [
                      "The end date for this crowdloan is not sensible."
                    ]
                  },
                  {
                    "name": "Overflow",
                    "index": 6,
                    "docs": [
                      "There was an overflow."
                    ]
                  },
                  {
                    "name": "ContributionTooSmall",
                    "index": 7,
                    "docs": [
                      "The contribution was below the minimum, `MinContribution`."
                    ]
                  },
                  {
                    "name": "InvalidParaId",
                    "index": 8,
                    "docs": [
                      "Invalid fund index."
                    ]
                  },
                  {
                    "name": "CapExceeded",
                    "index": 9,
                    "docs": [
                      "Contributions exceed maximum amount."
                    ]
                  },
                  {
                    "name": "ContributionPeriodOver",
                    "index": 10,
                    "docs": [
                      "The contribution period has already ended."
                    ]
                  },
                  {
                    "name": "InvalidOrigin",
                    "index": 11,
                    "docs": [
                      "The origin of this call is invalid."
                    ]
                  },
                  {
                    "name": "NotParachain",
                    "index": 12,
                    "docs": [
                      "This crowdloan does not correspond to a parachain."
                    ]
                  },
                  {
                    "name": "LeaseActive",
                    "index": 13,
                    "docs": [
                      "This parachain lease is still active and retirement cannot yet begin."
                    ]
                  },
                  {
                    "name": "BidOrLeaseActive",
                    "index": 14,
                    "docs": [
                      "This parachain's bid or lease is still active and withdraw cannot yet begin."
                    ]
                  },
                  {
                    "name": "FundNotEnded",
                    "index": 15,
                    "docs": [
                      "The crowdloan has not yet ended."
                    ]
                  },
                  {
                    "name": "NoContributions",
                    "index": 16,
                    "docs": [
                      "There are no contributions stored in this crowdloan."
                    ]
                  },
                  {
                    "name": "NotReadyToDissolve",
                    "index": 17,
                    "docs": [
                      "The crowdloan is not ready to dissolve. Potentially still has a slot or in retirement",
                      "period."
                    ]
                  },
                  {
                    "name": "InvalidSignature",
                    "index": 18,
                    "docs": [
                      "Invalid signature."
                    ]
                  },
                  {
                    "name": "MemoTooLarge",
                    "index": 19,
                    "docs": [
                      "The provided memo is too large."
                    ]
                  },
                  {
                    "name": "AlreadyInNewRaise",
                    "index": 20,
                    "docs": [
                      "The fund is already in `NewRaise`"
                    ]
                  },
                  {
                    "name": "VrfDelayInProgress",
                    "index": 21,
                    "docs": [
                      "No contributions allowed during the VRF delay"
                    ]
                  },
                  {
                    "name": "NoLeasePeriod",
                    "index": 22,
                    "docs": [
                      "A lease period has not started yet, due to an offset in the starting block."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "The `Error` enum of this pallet."
            ]
          }
        },
        {
          "id": 832,
          "type": {
            "path": [
              "polkadot_runtime_parachains",
              "coretime",
              "pallet",
              "Error"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "NotBroker",
                    "index": 0,
                    "docs": [
                      "The paraid making the call is not the coretime brokerage system parachain."
                    ]
                  },
                  {
                    "name": "RequestedFutureRevenue",
                    "index": 1,
                    "docs": [
                      "Requested revenue information `when` parameter was in the future from the current",
                      "block height."
                    ]
                  },
                  {
                    "name": "AssetTransferFailed",
                    "index": 2,
                    "docs": [
                      "Failed to transfer assets to the coretime chain"
                    ]
                  }
                ]
              }
            },
            "docs": [
              "The `Error` enum of this pallet."
            ]
          }
        },
        {
          "id": 833,
          "type": {
            "path": [
              "pallet_xcm",
              "pallet",
              "QueryStatus"
            ],
            "params": [
              {
                "name": "BlockNumber",
                "type": 4
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Pending",
                    "fields": [
                      {
                        "name": "responder",
                        "type": 81,
                        "typeName": "VersionedLocation"
                      },
                      {
                        "name": "maybe_match_querier",
                        "type": 834,
                        "typeName": "Option<VersionedLocation>"
                      },
                      {
                        "name": "maybe_notify",
                        "type": 835,
                        "typeName": "Option<(u8, u8)>"
                      },
                      {
                        "name": "timeout",
                        "type": 4,
                        "typeName": "BlockNumber"
                      }
                    ],
                    "index": 0
                  },
                  {
                    "name": "VersionNotifier",
                    "fields": [
                      {
                        "name": "origin",
                        "type": 81,
                        "typeName": "VersionedLocation"
                      },
                      {
                        "name": "is_active",
                        "type": 8,
                        "typeName": "bool"
                      }
                    ],
                    "index": 1
                  },
                  {
                    "name": "Ready",
                    "fields": [
                      {
                        "name": "response",
                        "type": 837,
                        "typeName": "VersionedResponse"
                      },
                      {
                        "name": "at",
                        "type": 4,
                        "typeName": "BlockNumber"
                      }
                    ],
                    "index": 2
                  }
                ]
              }
            }
          }
        },
        {
          "id": 834,
          "type": {
            "path": [
              "Option"
            ],
            "params": [
              {
                "name": "T",
                "type": 81
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "None",
                    "index": 0
                  },
                  {
                    "name": "Some",
                    "fields": [
                      {
                        "type": 81
                      }
                    ],
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 835,
          "type": {
            "path": [
              "Option"
            ],
            "params": [
              {
                "name": "T",
                "type": 836
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "None",
                    "index": 0
                  },
                  {
                    "name": "Some",
                    "fields": [
                      {
                        "type": 836
                      }
                    ],
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 836,
          "type": {
            "def": {
              "tuple": [
                2,
                2
              ]
            }
          }
        },
        {
          "id": 837,
          "type": {
            "path": [
              "xcm",
              "VersionedResponse"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "V2",
                    "fields": [
                      {
                        "type": 354,
                        "typeName": "v2::Response"
                      }
                    ],
                    "index": 2
                  },
                  {
                    "name": "V3",
                    "fields": [
                      {
                        "type": 372,
                        "typeName": "v3::Response"
                      }
                    ],
                    "index": 3
                  },
                  {
                    "name": "V4",
                    "fields": [
                      {
                        "type": 397,
                        "typeName": "v4::Response"
                      }
                    ],
                    "index": 4
                  }
                ]
              }
            }
          }
        },
        {
          "id": 838,
          "type": {
            "def": {
              "tuple": [
                4,
                81
              ]
            }
          }
        },
        {
          "id": 839,
          "type": {
            "def": {
              "tuple": [
                12,
                10,
                4
              ]
            }
          }
        },
        {
          "id": 840,
          "type": {
            "path": [
              "bounded_collections",
              "bounded_vec",
              "BoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 841
              },
              {
                "name": "S",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 842,
                    "typeName": "Vec<T>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 841,
          "type": {
            "def": {
              "tuple": [
                81,
                4
              ]
            }
          }
        },
        {
          "id": 842,
          "type": {
            "def": {
              "sequence": {
                "type": 841
              }
            }
          }
        },
        {
          "id": 843,
          "type": {
            "path": [
              "pallet_xcm",
              "pallet",
              "VersionMigrationStage"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "MigrateSupportedVersion",
                    "index": 0
                  },
                  {
                    "name": "MigrateVersionNotifiers",
                    "index": 1
                  },
                  {
                    "name": "NotifyCurrentTargets",
                    "fields": [
                      {
                        "type": 844,
                        "typeName": "Option<Vec<u8>>"
                      }
                    ],
                    "index": 2
                  },
                  {
                    "name": "MigrateAndNotifyOldTargets",
                    "index": 3
                  }
                ]
              }
            }
          }
        },
        {
          "id": 844,
          "type": {
            "path": [
              "Option"
            ],
            "params": [
              {
                "name": "T",
                "type": 14
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "None",
                    "index": 0
                  },
                  {
                    "name": "Some",
                    "fields": [
                      {
                        "type": 14
                      }
                    ],
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 845,
          "type": {
            "def": {
              "tuple": [
                4,
                0,
                420
              ]
            }
          }
        },
        {
          "id": 846,
          "type": {
            "path": [
              "pallet_xcm",
              "pallet",
              "RemoteLockedFungibleRecord"
            ],
            "params": [
              {
                "name": "ConsumerIdentifier",
                "type": 35
              },
              {
                "name": "MaxConsumers",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "amount",
                    "type": 6,
                    "typeName": "u128"
                  },
                  {
                    "name": "owner",
                    "type": 81,
                    "typeName": "VersionedLocation"
                  },
                  {
                    "name": "locker",
                    "type": 81,
                    "typeName": "VersionedLocation"
                  },
                  {
                    "name": "consumers",
                    "type": 847,
                    "typeName": "BoundedVec<(ConsumerIdentifier, u128), MaxConsumers>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 847,
          "type": {
            "path": [
              "bounded_collections",
              "bounded_vec",
              "BoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 848
              },
              {
                "name": "S",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 849,
                    "typeName": "Vec<T>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 848,
          "type": {
            "def": {
              "tuple": [
                35,
                6
              ]
            }
          }
        },
        {
          "id": 849,
          "type": {
            "def": {
              "sequence": {
                "type": 848
              }
            }
          }
        },
        {
          "id": 850,
          "type": {
            "path": [
              "bounded_collections",
              "bounded_vec",
              "BoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 851
              },
              {
                "name": "S",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 852,
                    "typeName": "Vec<T>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 851,
          "type": {
            "def": {
              "tuple": [
                6,
                81
              ]
            }
          }
        },
        {
          "id": 852,
          "type": {
            "def": {
              "sequence": {
                "type": 851
              }
            }
          }
        },
        {
          "id": 853,
          "type": {
            "path": [
              "pallet_xcm",
              "pallet",
              "Error"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Unreachable",
                    "index": 0,
                    "docs": [
                      "The desired destination was unreachable, generally because there is a no way of routing",
                      "to it."
                    ]
                  },
                  {
                    "name": "SendFailure",
                    "index": 1,
                    "docs": [
                      "There was some other issue (i.e. not to do with routing) in sending the message.",
                      "Perhaps a lack of space for buffering the message."
                    ]
                  },
                  {
                    "name": "Filtered",
                    "index": 2,
                    "docs": [
                      "The message execution fails the filter."
                    ]
                  },
                  {
                    "name": "UnweighableMessage",
                    "index": 3,
                    "docs": [
                      "The message's weight could not be determined."
                    ]
                  },
                  {
                    "name": "DestinationNotInvertible",
                    "index": 4,
                    "docs": [
                      "The destination `Location` provided cannot be inverted."
                    ]
                  },
                  {
                    "name": "Empty",
                    "index": 5,
                    "docs": [
                      "The assets to be sent are empty."
                    ]
                  },
                  {
                    "name": "CannotReanchor",
                    "index": 6,
                    "docs": [
                      "Could not re-anchor the assets to declare the fees for the destination chain."
                    ]
                  },
                  {
                    "name": "TooManyAssets",
                    "index": 7,
                    "docs": [
                      "Too many assets have been attempted for transfer."
                    ]
                  },
                  {
                    "name": "InvalidOrigin",
                    "index": 8,
                    "docs": [
                      "Origin is invalid for sending."
                    ]
                  },
                  {
                    "name": "BadVersion",
                    "index": 9,
                    "docs": [
                      "The version of the `Versioned` value used is not able to be interpreted."
                    ]
                  },
                  {
                    "name": "BadLocation",
                    "index": 10,
                    "docs": [
                      "The given location could not be used (e.g. because it cannot be expressed in the",
                      "desired version of XCM)."
                    ]
                  },
                  {
                    "name": "NoSubscription",
                    "index": 11,
                    "docs": [
                      "The referenced subscription could not be found."
                    ]
                  },
                  {
                    "name": "AlreadySubscribed",
                    "index": 12,
                    "docs": [
                      "The location is invalid since it already has a subscription from us."
                    ]
                  },
                  {
                    "name": "CannotCheckOutTeleport",
                    "index": 13,
                    "docs": [
                      "Could not check-out the assets for teleportation to the destination chain."
                    ]
                  },
                  {
                    "name": "LowBalance",
                    "index": 14,
                    "docs": [
                      "The owner does not own (all) of the asset that they wish to do the operation on."
                    ]
                  },
                  {
                    "name": "TooManyLocks",
                    "index": 15,
                    "docs": [
                      "The asset owner has too many locks on the asset."
                    ]
                  },
                  {
                    "name": "AccountNotSovereign",
                    "index": 16,
                    "docs": [
                      "The given account is not an identifiable sovereign account for any location."
                    ]
                  },
                  {
                    "name": "FeesNotMet",
                    "index": 17,
                    "docs": [
                      "The operation required fees to be paid which the initiator could not meet."
                    ]
                  },
                  {
                    "name": "LockNotFound",
                    "index": 18,
                    "docs": [
                      "A remote lock with the corresponding data could not be found."
                    ]
                  },
                  {
                    "name": "InUse",
                    "index": 19,
                    "docs": [
                      "The unlock operation cannot succeed because there are still consumers of the lock."
                    ]
                  },
                  {
                    "name": "InvalidAssetUnknownReserve",
                    "index": 21,
                    "docs": [
                      "Invalid asset, reserve chain could not be determined for it."
                    ]
                  },
                  {
                    "name": "InvalidAssetUnsupportedReserve",
                    "index": 22,
                    "docs": [
                      "Invalid asset, do not support remote asset reserves with different fees reserves."
                    ]
                  },
                  {
                    "name": "TooManyReserves",
                    "index": 23,
                    "docs": [
                      "Too many assets with different reserve locations have been attempted for transfer."
                    ]
                  },
                  {
                    "name": "LocalExecutionIncomplete",
                    "index": 24,
                    "docs": [
                      "Local XCM execution incomplete."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "The `Error` enum of this pallet."
            ]
          }
        },
        {
          "id": 854,
          "type": {
            "path": [
              "pallet_message_queue",
              "BookState"
            ],
            "params": [
              {
                "name": "MessageOrigin",
                "type": 422
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "begin",
                    "type": 4,
                    "typeName": "PageIndex"
                  },
                  {
                    "name": "end",
                    "type": 4,
                    "typeName": "PageIndex"
                  },
                  {
                    "name": "count",
                    "type": 4,
                    "typeName": "PageIndex"
                  },
                  {
                    "name": "ready_neighbours",
                    "type": 855,
                    "typeName": "Option<Neighbours<MessageOrigin>>"
                  },
                  {
                    "name": "message_count",
                    "type": 12,
                    "typeName": "u64"
                  },
                  {
                    "name": "size",
                    "type": 12,
                    "typeName": "u64"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 855,
          "type": {
            "path": [
              "Option"
            ],
            "params": [
              {
                "name": "T",
                "type": 856
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "None",
                    "index": 0
                  },
                  {
                    "name": "Some",
                    "fields": [
                      {
                        "type": 856
                      }
                    ],
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 856,
          "type": {
            "path": [
              "pallet_message_queue",
              "Neighbours"
            ],
            "params": [
              {
                "name": "MessageOrigin",
                "type": 422
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "prev",
                    "type": 422,
                    "typeName": "MessageOrigin"
                  },
                  {
                    "name": "next",
                    "type": 422,
                    "typeName": "MessageOrigin"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 857,
          "type": {
            "def": {
              "tuple": [
                422,
                4
              ]
            }
          }
        },
        {
          "id": 858,
          "type": {
            "path": [
              "pallet_message_queue",
              "Page"
            ],
            "params": [
              {
                "name": "Size",
                "type": 4
              },
              {
                "name": "HeapSize",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "remaining",
                    "type": 4,
                    "typeName": "Size"
                  },
                  {
                    "name": "remaining_size",
                    "type": 4,
                    "typeName": "Size"
                  },
                  {
                    "name": "first_index",
                    "type": 4,
                    "typeName": "Size"
                  },
                  {
                    "name": "first",
                    "type": 4,
                    "typeName": "Size"
                  },
                  {
                    "name": "last",
                    "type": 4,
                    "typeName": "Size"
                  },
                  {
                    "name": "heap",
                    "type": 859,
                    "typeName": "BoundedVec<u8, IntoU32<HeapSize, Size>>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 859,
          "type": {
            "path": [
              "bounded_collections",
              "bounded_vec",
              "BoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 2
              },
              {
                "name": "S",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 14,
                    "typeName": "Vec<T>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 860,
          "type": {
            "path": [
              "pallet_message_queue",
              "pallet",
              "Error"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "NotReapable",
                    "index": 0,
                    "docs": [
                      "Page is not reapable because it has items remaining to be processed and is not old",
                      "enough."
                    ]
                  },
                  {
                    "name": "NoPage",
                    "index": 1,
                    "docs": [
                      "Page to be reaped does not exist."
                    ]
                  },
                  {
                    "name": "NoMessage",
                    "index": 2,
                    "docs": [
                      "The referenced message could not be found."
                    ]
                  },
                  {
                    "name": "AlreadyProcessed",
                    "index": 3,
                    "docs": [
                      "The message was already processed and cannot be processed again."
                    ]
                  },
                  {
                    "name": "Queued",
                    "index": 4,
                    "docs": [
                      "The message is queued for future execution."
                    ]
                  },
                  {
                    "name": "InsufficientWeight",
                    "index": 5,
                    "docs": [
                      "There is temporarily not enough weight to continue servicing messages."
                    ]
                  },
                  {
                    "name": "TemporarilyUnprocessable",
                    "index": 6,
                    "docs": [
                      "This message is temporarily unprocessable.",
                      "",
                      "Such errors are expected, but not guaranteed, to resolve themselves eventually through",
                      "retrying."
                    ]
                  },
                  {
                    "name": "QueuePaused",
                    "index": 7,
                    "docs": [
                      "The queue is paused and no message can be executed from it.",
                      "",
                      "This can change at any time and may resolve in the future by re-trying."
                    ]
                  },
                  {
                    "name": "RecursiveDisallowed",
                    "index": 8,
                    "docs": [
                      "Another call is in progress and needs to finish before this call can happen."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "The `Error` enum of this pallet."
            ]
          }
        },
        {
          "id": 861,
          "type": {
            "path": [
              "pallet_asset_rate",
              "pallet",
              "Error"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "UnknownAssetKind",
                    "index": 0,
                    "docs": [
                      "The given asset ID is unknown."
                    ]
                  },
                  {
                    "name": "AlreadyExists",
                    "index": 1,
                    "docs": [
                      "The given asset ID already has an assigned conversion rate and cannot be re-created."
                    ]
                  },
                  {
                    "name": "Overflow",
                    "index": 2,
                    "docs": [
                      "Overflow ocurred when calculating the inverse rate."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "The `Error` enum of this pallet."
            ]
          }
        },
        {
          "id": 862,
          "type": {
            "path": [
              "bounded_collections",
              "bounded_vec",
              "BoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 140
              },
              {
                "name": "S",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 863,
                    "typeName": "Vec<T>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 863,
          "type": {
            "def": {
              "sequence": {
                "type": 140
              }
            }
          }
        },
        {
          "id": 864,
          "type": {
            "path": [
              "pallet_beefy",
              "pallet",
              "Error"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "InvalidKeyOwnershipProof",
                    "index": 0,
                    "docs": [
                      "A key ownership proof provided as part of an equivocation report is invalid."
                    ]
                  },
                  {
                    "name": "InvalidDoubleVotingProof",
                    "index": 1,
                    "docs": [
                      "A double voting proof provided as part of an equivocation report is invalid."
                    ]
                  },
                  {
                    "name": "InvalidForkVotingProof",
                    "index": 2,
                    "docs": [
                      "A fork voting proof provided as part of an equivocation report is invalid."
                    ]
                  },
                  {
                    "name": "InvalidFutureBlockVotingProof",
                    "index": 3,
                    "docs": [
                      "A future block voting proof provided as part of an equivocation report is invalid."
                    ]
                  },
                  {
                    "name": "InvalidEquivocationProofSession",
                    "index": 4,
                    "docs": [
                      "The session of the equivocation proof is invalid"
                    ]
                  },
                  {
                    "name": "DuplicateOffenceReport",
                    "index": 5,
                    "docs": [
                      "A given equivocation report is valid but already previously reported."
                    ]
                  },
                  {
                    "name": "InvalidConfiguration",
                    "index": 6,
                    "docs": [
                      "Submitted configuration is invalid."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "The `Error` enum of this pallet."
            ]
          }
        },
        {
          "id": 865,
          "type": {
            "path": [
              "sp_consensus_beefy",
              "mmr",
              "BeefyAuthoritySet"
            ],
            "params": [
              {
                "name": "AuthoritySetCommitment",
                "type": 13
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "id",
                    "type": 12,
                    "typeName": "crate::ValidatorSetId"
                  },
                  {
                    "name": "len",
                    "type": 4,
                    "typeName": "u32"
                  },
                  {
                    "name": "keyset_commitment",
                    "type": 13,
                    "typeName": "AuthoritySetCommitment"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 866,
          "type": {
            "path": [
              "pallet_rc_migrator",
              "accounts",
              "AccountState"
            ],
            "params": [
              {
                "name": "Balance",
                "type": 6
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Migrate",
                    "index": 0
                  },
                  {
                    "name": "Preserve",
                    "index": 1
                  },
                  {
                    "name": "Part",
                    "fields": [
                      {
                        "name": "reserved",
                        "type": 6,
                        "typeName": "Balance"
                      }
                    ],
                    "index": 2
                  }
                ]
              }
            }
          }
        },
        {
          "id": 867,
          "type": {
            "path": [
              "pallet_rc_migrator",
              "pallet",
              "Error"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Unreachable",
                    "index": 0
                  },
                  {
                    "name": "OutOfWeight",
                    "index": 1
                  },
                  {
                    "name": "XcmError",
                    "index": 2,
                    "docs": [
                      "Failed to send XCM message to AH."
                    ]
                  },
                  {
                    "name": "FailedToWithdrawAccount",
                    "index": 3,
                    "docs": [
                      "Failed to withdraw account from RC for migration to AH."
                    ]
                  },
                  {
                    "name": "PastBlockNumber",
                    "index": 4,
                    "docs": [
                      "Indicates that the specified block number is in the past."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "The `Error` enum of this pallet."
            ]
          }
        },
        {
          "id": 868,
          "type": {
            "path": [
              "sp_runtime",
              "generic",
              "unchecked_extrinsic",
              "UncheckedExtrinsic"
            ],
            "params": [
              {
                "name": "Address",
                "type": 115
              },
              {
                "name": "Call",
                "type": 95
              },
              {
                "name": "Signature",
                "type": 330
              },
              {
                "name": "Extra",
                "type": 869
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 14
                  }
                ]
              }
            }
          }
        },
        {
          "id": 869,
          "type": {
            "def": {
              "tuple": [
                870,
                871,
                872,
                873,
                874,
                876,
                877,
                878,
                879,
                880
              ]
            }
          }
        },
        {
          "id": 870,
          "type": {
            "path": [
              "frame_system",
              "extensions",
              "check_non_zero_sender",
              "CheckNonZeroSender"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "composite": {}
            }
          }
        },
        {
          "id": 871,
          "type": {
            "path": [
              "frame_system",
              "extensions",
              "check_spec_version",
              "CheckSpecVersion"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "composite": {}
            }
          }
        },
        {
          "id": 872,
          "type": {
            "path": [
              "frame_system",
              "extensions",
              "check_tx_version",
              "CheckTxVersion"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "composite": {}
            }
          }
        },
        {
          "id": 873,
          "type": {
            "path": [
              "frame_system",
              "extensions",
              "check_genesis",
              "CheckGenesis"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "composite": {}
            }
          }
        },
        {
          "id": 874,
          "type": {
            "path": [
              "frame_system",
              "extensions",
              "check_mortality",
              "CheckMortality"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 875,
                    "typeName": "Era"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 875,
          "type": {
            "path": [
              "sp_runtime",
              "generic",
              "era",
              "Era"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Immortal",
                    "index": 0
                  },
                  {
                    "name": "Mortal1",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 1
                  },
                  {
                    "name": "Mortal2",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 2
                  },
                  {
                    "name": "Mortal3",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 3
                  },
                  {
                    "name": "Mortal4",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 4
                  },
                  {
                    "name": "Mortal5",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 5
                  },
                  {
                    "name": "Mortal6",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 6
                  },
                  {
                    "name": "Mortal7",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 7
                  },
                  {
                    "name": "Mortal8",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 8
                  },
                  {
                    "name": "Mortal9",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 9
                  },
                  {
                    "name": "Mortal10",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 10
                  },
                  {
                    "name": "Mortal11",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 11
                  },
                  {
                    "name": "Mortal12",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 12
                  },
                  {
                    "name": "Mortal13",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 13
                  },
                  {
                    "name": "Mortal14",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 14
                  },
                  {
                    "name": "Mortal15",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 15
                  },
                  {
                    "name": "Mortal16",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 16
                  },
                  {
                    "name": "Mortal17",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 17
                  },
                  {
                    "name": "Mortal18",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 18
                  },
                  {
                    "name": "Mortal19",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 19
                  },
                  {
                    "name": "Mortal20",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 20
                  },
                  {
                    "name": "Mortal21",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 21
                  },
                  {
                    "name": "Mortal22",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 22
                  },
                  {
                    "name": "Mortal23",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 23
                  },
                  {
                    "name": "Mortal24",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 24
                  },
                  {
                    "name": "Mortal25",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 25
                  },
                  {
                    "name": "Mortal26",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 26
                  },
                  {
                    "name": "Mortal27",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 27
                  },
                  {
                    "name": "Mortal28",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 28
                  },
                  {
                    "name": "Mortal29",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 29
                  },
                  {
                    "name": "Mortal30",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 30
                  },
                  {
                    "name": "Mortal31",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 31
                  },
                  {
                    "name": "Mortal32",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 32
                  },
                  {
                    "name": "Mortal33",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 33
                  },
                  {
                    "name": "Mortal34",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 34
                  },
                  {
                    "name": "Mortal35",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 35
                  },
                  {
                    "name": "Mortal36",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 36
                  },
                  {
                    "name": "Mortal37",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 37
                  },
                  {
                    "name": "Mortal38",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 38
                  },
                  {
                    "name": "Mortal39",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 39
                  },
                  {
                    "name": "Mortal40",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 40
                  },
                  {
                    "name": "Mortal41",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 41
                  },
                  {
                    "name": "Mortal42",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 42
                  },
                  {
                    "name": "Mortal43",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 43
                  },
                  {
                    "name": "Mortal44",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 44
                  },
                  {
                    "name": "Mortal45",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 45
                  },
                  {
                    "name": "Mortal46",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 46
                  },
                  {
                    "name": "Mortal47",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 47
                  },
                  {
                    "name": "Mortal48",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 48
                  },
                  {
                    "name": "Mortal49",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 49
                  },
                  {
                    "name": "Mortal50",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 50
                  },
                  {
                    "name": "Mortal51",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 51
                  },
                  {
                    "name": "Mortal52",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 52
                  },
                  {
                    "name": "Mortal53",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 53
                  },
                  {
                    "name": "Mortal54",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 54
                  },
                  {
                    "name": "Mortal55",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 55
                  },
                  {
                    "name": "Mortal56",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 56
                  },
                  {
                    "name": "Mortal57",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 57
                  },
                  {
                    "name": "Mortal58",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 58
                  },
                  {
                    "name": "Mortal59",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 59
                  },
                  {
                    "name": "Mortal60",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 60
                  },
                  {
                    "name": "Mortal61",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 61
                  },
                  {
                    "name": "Mortal62",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 62
                  },
                  {
                    "name": "Mortal63",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 63
                  },
                  {
                    "name": "Mortal64",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 64
                  },
                  {
                    "name": "Mortal65",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 65
                  },
                  {
                    "name": "Mortal66",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 66
                  },
                  {
                    "name": "Mortal67",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 67
                  },
                  {
                    "name": "Mortal68",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 68
                  },
                  {
                    "name": "Mortal69",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 69
                  },
                  {
                    "name": "Mortal70",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 70
                  },
                  {
                    "name": "Mortal71",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 71
                  },
                  {
                    "name": "Mortal72",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 72
                  },
                  {
                    "name": "Mortal73",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 73
                  },
                  {
                    "name": "Mortal74",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 74
                  },
                  {
                    "name": "Mortal75",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 75
                  },
                  {
                    "name": "Mortal76",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 76
                  },
                  {
                    "name": "Mortal77",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 77
                  },
                  {
                    "name": "Mortal78",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 78
                  },
                  {
                    "name": "Mortal79",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 79
                  },
                  {
                    "name": "Mortal80",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 80
                  },
                  {
                    "name": "Mortal81",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 81
                  },
                  {
                    "name": "Mortal82",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 82
                  },
                  {
                    "name": "Mortal83",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 83
                  },
                  {
                    "name": "Mortal84",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 84
                  },
                  {
                    "name": "Mortal85",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 85
                  },
                  {
                    "name": "Mortal86",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 86
                  },
                  {
                    "name": "Mortal87",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 87
                  },
                  {
                    "name": "Mortal88",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 88
                  },
                  {
                    "name": "Mortal89",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 89
                  },
                  {
                    "name": "Mortal90",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 90
                  },
                  {
                    "name": "Mortal91",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 91
                  },
                  {
                    "name": "Mortal92",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 92
                  },
                  {
                    "name": "Mortal93",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 93
                  },
                  {
                    "name": "Mortal94",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 94
                  },
                  {
                    "name": "Mortal95",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 95
                  },
                  {
                    "name": "Mortal96",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 96
                  },
                  {
                    "name": "Mortal97",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 97
                  },
                  {
                    "name": "Mortal98",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 98
                  },
                  {
                    "name": "Mortal99",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 99
                  },
                  {
                    "name": "Mortal100",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 100
                  },
                  {
                    "name": "Mortal101",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 101
                  },
                  {
                    "name": "Mortal102",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 102
                  },
                  {
                    "name": "Mortal103",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 103
                  },
                  {
                    "name": "Mortal104",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 104
                  },
                  {
                    "name": "Mortal105",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 105
                  },
                  {
                    "name": "Mortal106",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 106
                  },
                  {
                    "name": "Mortal107",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 107
                  },
                  {
                    "name": "Mortal108",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 108
                  },
                  {
                    "name": "Mortal109",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 109
                  },
                  {
                    "name": "Mortal110",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 110
                  },
                  {
                    "name": "Mortal111",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 111
                  },
                  {
                    "name": "Mortal112",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 112
                  },
                  {
                    "name": "Mortal113",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 113
                  },
                  {
                    "name": "Mortal114",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 114
                  },
                  {
                    "name": "Mortal115",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 115
                  },
                  {
                    "name": "Mortal116",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 116
                  },
                  {
                    "name": "Mortal117",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 117
                  },
                  {
                    "name": "Mortal118",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 118
                  },
                  {
                    "name": "Mortal119",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 119
                  },
                  {
                    "name": "Mortal120",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 120
                  },
                  {
                    "name": "Mortal121",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 121
                  },
                  {
                    "name": "Mortal122",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 122
                  },
                  {
                    "name": "Mortal123",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 123
                  },
                  {
                    "name": "Mortal124",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 124
                  },
                  {
                    "name": "Mortal125",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 125
                  },
                  {
                    "name": "Mortal126",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 126
                  },
                  {
                    "name": "Mortal127",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 127
                  },
                  {
                    "name": "Mortal128",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 128
                  },
                  {
                    "name": "Mortal129",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 129
                  },
                  {
                    "name": "Mortal130",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 130
                  },
                  {
                    "name": "Mortal131",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 131
                  },
                  {
                    "name": "Mortal132",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 132
                  },
                  {
                    "name": "Mortal133",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 133
                  },
                  {
                    "name": "Mortal134",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 134
                  },
                  {
                    "name": "Mortal135",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 135
                  },
                  {
                    "name": "Mortal136",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 136
                  },
                  {
                    "name": "Mortal137",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 137
                  },
                  {
                    "name": "Mortal138",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 138
                  },
                  {
                    "name": "Mortal139",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 139
                  },
                  {
                    "name": "Mortal140",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 140
                  },
                  {
                    "name": "Mortal141",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 141
                  },
                  {
                    "name": "Mortal142",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 142
                  },
                  {
                    "name": "Mortal143",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 143
                  },
                  {
                    "name": "Mortal144",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 144
                  },
                  {
                    "name": "Mortal145",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 145
                  },
                  {
                    "name": "Mortal146",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 146
                  },
                  {
                    "name": "Mortal147",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 147
                  },
                  {
                    "name": "Mortal148",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 148
                  },
                  {
                    "name": "Mortal149",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 149
                  },
                  {
                    "name": "Mortal150",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 150
                  },
                  {
                    "name": "Mortal151",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 151
                  },
                  {
                    "name": "Mortal152",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 152
                  },
                  {
                    "name": "Mortal153",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 153
                  },
                  {
                    "name": "Mortal154",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 154
                  },
                  {
                    "name": "Mortal155",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 155
                  },
                  {
                    "name": "Mortal156",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 156
                  },
                  {
                    "name": "Mortal157",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 157
                  },
                  {
                    "name": "Mortal158",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 158
                  },
                  {
                    "name": "Mortal159",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 159
                  },
                  {
                    "name": "Mortal160",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 160
                  },
                  {
                    "name": "Mortal161",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 161
                  },
                  {
                    "name": "Mortal162",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 162
                  },
                  {
                    "name": "Mortal163",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 163
                  },
                  {
                    "name": "Mortal164",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 164
                  },
                  {
                    "name": "Mortal165",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 165
                  },
                  {
                    "name": "Mortal166",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 166
                  },
                  {
                    "name": "Mortal167",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 167
                  },
                  {
                    "name": "Mortal168",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 168
                  },
                  {
                    "name": "Mortal169",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 169
                  },
                  {
                    "name": "Mortal170",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 170
                  },
                  {
                    "name": "Mortal171",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 171
                  },
                  {
                    "name": "Mortal172",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 172
                  },
                  {
                    "name": "Mortal173",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 173
                  },
                  {
                    "name": "Mortal174",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 174
                  },
                  {
                    "name": "Mortal175",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 175
                  },
                  {
                    "name": "Mortal176",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 176
                  },
                  {
                    "name": "Mortal177",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 177
                  },
                  {
                    "name": "Mortal178",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 178
                  },
                  {
                    "name": "Mortal179",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 179
                  },
                  {
                    "name": "Mortal180",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 180
                  },
                  {
                    "name": "Mortal181",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 181
                  },
                  {
                    "name": "Mortal182",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 182
                  },
                  {
                    "name": "Mortal183",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 183
                  },
                  {
                    "name": "Mortal184",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 184
                  },
                  {
                    "name": "Mortal185",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 185
                  },
                  {
                    "name": "Mortal186",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 186
                  },
                  {
                    "name": "Mortal187",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 187
                  },
                  {
                    "name": "Mortal188",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 188
                  },
                  {
                    "name": "Mortal189",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 189
                  },
                  {
                    "name": "Mortal190",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 190
                  },
                  {
                    "name": "Mortal191",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 191
                  },
                  {
                    "name": "Mortal192",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 192
                  },
                  {
                    "name": "Mortal193",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 193
                  },
                  {
                    "name": "Mortal194",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 194
                  },
                  {
                    "name": "Mortal195",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 195
                  },
                  {
                    "name": "Mortal196",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 196
                  },
                  {
                    "name": "Mortal197",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 197
                  },
                  {
                    "name": "Mortal198",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 198
                  },
                  {
                    "name": "Mortal199",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 199
                  },
                  {
                    "name": "Mortal200",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 200
                  },
                  {
                    "name": "Mortal201",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 201
                  },
                  {
                    "name": "Mortal202",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 202
                  },
                  {
                    "name": "Mortal203",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 203
                  },
                  {
                    "name": "Mortal204",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 204
                  },
                  {
                    "name": "Mortal205",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 205
                  },
                  {
                    "name": "Mortal206",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 206
                  },
                  {
                    "name": "Mortal207",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 207
                  },
                  {
                    "name": "Mortal208",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 208
                  },
                  {
                    "name": "Mortal209",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 209
                  },
                  {
                    "name": "Mortal210",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 210
                  },
                  {
                    "name": "Mortal211",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 211
                  },
                  {
                    "name": "Mortal212",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 212
                  },
                  {
                    "name": "Mortal213",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 213
                  },
                  {
                    "name": "Mortal214",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 214
                  },
                  {
                    "name": "Mortal215",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 215
                  },
                  {
                    "name": "Mortal216",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 216
                  },
                  {
                    "name": "Mortal217",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 217
                  },
                  {
                    "name": "Mortal218",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 218
                  },
                  {
                    "name": "Mortal219",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 219
                  },
                  {
                    "name": "Mortal220",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 220
                  },
                  {
                    "name": "Mortal221",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 221
                  },
                  {
                    "name": "Mortal222",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 222
                  },
                  {
                    "name": "Mortal223",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 223
                  },
                  {
                    "name": "Mortal224",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 224
                  },
                  {
                    "name": "Mortal225",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 225
                  },
                  {
                    "name": "Mortal226",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 226
                  },
                  {
                    "name": "Mortal227",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 227
                  },
                  {
                    "name": "Mortal228",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 228
                  },
                  {
                    "name": "Mortal229",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 229
                  },
                  {
                    "name": "Mortal230",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 230
                  },
                  {
                    "name": "Mortal231",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 231
                  },
                  {
                    "name": "Mortal232",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 232
                  },
                  {
                    "name": "Mortal233",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 233
                  },
                  {
                    "name": "Mortal234",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 234
                  },
                  {
                    "name": "Mortal235",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 235
                  },
                  {
                    "name": "Mortal236",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 236
                  },
                  {
                    "name": "Mortal237",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 237
                  },
                  {
                    "name": "Mortal238",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 238
                  },
                  {
                    "name": "Mortal239",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 239
                  },
                  {
                    "name": "Mortal240",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 240
                  },
                  {
                    "name": "Mortal241",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 241
                  },
                  {
                    "name": "Mortal242",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 242
                  },
                  {
                    "name": "Mortal243",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 243
                  },
                  {
                    "name": "Mortal244",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 244
                  },
                  {
                    "name": "Mortal245",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 245
                  },
                  {
                    "name": "Mortal246",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 246
                  },
                  {
                    "name": "Mortal247",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 247
                  },
                  {
                    "name": "Mortal248",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 248
                  },
                  {
                    "name": "Mortal249",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 249
                  },
                  {
                    "name": "Mortal250",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 250
                  },
                  {
                    "name": "Mortal251",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 251
                  },
                  {
                    "name": "Mortal252",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 252
                  },
                  {
                    "name": "Mortal253",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 253
                  },
                  {
                    "name": "Mortal254",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 254
                  },
                  {
                    "name": "Mortal255",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 255
                  }
                ]
              }
            }
          }
        },
        {
          "id": 876,
          "type": {
            "path": [
              "frame_system",
              "extensions",
              "check_nonce",
              "CheckNonce"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 59,
                    "typeName": "T::Nonce"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 877,
          "type": {
            "path": [
              "frame_system",
              "extensions",
              "check_weight",
              "CheckWeight"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "composite": {}
            }
          }
        },
        {
          "id": 878,
          "type": {
            "path": [
              "pallet_transaction_payment",
              "ChargeTransactionPayment"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 63,
                    "typeName": "BalanceOf<T>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 879,
          "type": {
            "path": [
              "polkadot_runtime_common",
              "claims",
              "PrevalidateAttests"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "composite": {}
            }
          }
        },
        {
          "id": 880,
          "type": {
            "path": [
              "frame_metadata_hash_extension",
              "CheckMetadataHash"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "mode",
                    "type": 881,
                    "typeName": "Mode"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 881,
          "type": {
            "path": [
              "frame_metadata_hash_extension",
              "Mode"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Disabled",
                    "index": 0
                  },
                  {
                    "name": "Enabled",
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 882,
          "type": {
            "path": [
              "polkadot_runtime",
              "Runtime"
            ],
            "def": {
              "composite": {}
            }
          }
        }
      ]
    },
    "pallets": [
      {
        "name": "System",
        "storage": {
          "prefix": "System",
          "entries": [
            {
              "name": "Account",
              "modifier": "Default",
              "ty": {
                "Map": {
                  "hashers": [
                    "Blake2_128Concat"
                  ],
                  "key": 0,
                  "value": 3
                }
              },
              "default": [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                128
              ],
              "docs": [
                " The full account information for a particular account ID."
              ]
            },
            {
              "name": "ExtrinsicCount",
              "modifier": "Optional",
              "ty": {
                "Plain": 4
              },
              "default": [
                0
              ],
              "docs": [
                " Total extrinsics count for the current block."
              ]
            },
            {
              "name": "InherentsApplied",
              "modifier": "Default",
              "ty": {
                "Plain": 8
              },
              "default": [
                0
              ],
              "docs": [
                " Whether all inherents have been applied."
              ]
            },
            {
              "name": "BlockWeight",
              "modifier": "Default",
              "ty": {
                "Plain": 9
              },
              "default": [
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The current weight for the block."
              ]
            },
            {
              "name": "AllExtrinsicsLen",
              "modifier": "Optional",
              "ty": {
                "Plain": 4
              },
              "default": [
                0
              ],
              "docs": [
                " Total length (in bytes) for all extrinsics put together, for the current block."
              ]
            },
            {
              "name": "BlockHash",
              "modifier": "Default",
              "ty": {
                "Map": {
                  "hashers": [
                    "Twox64Concat"
                  ],
                  "key": 4,
                  "value": 13
                }
              },
              "default": [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " Map of block numbers to block hashes."
              ]
            },
            {
              "name": "ExtrinsicData",
              "modifier": "Default",
              "ty": {
                "Map": {
                  "hashers": [
                    "Twox64Concat"
                  ],
                  "key": 4,
                  "value": 14
                }
              },
              "default": [
                0
              ],
              "docs": [
                " Extrinsics data for the current block (maps an extrinsic's index to its data)."
              ]
            },
            {
              "name": "Number",
              "modifier": "Default",
              "ty": {
                "Plain": 4
              },
              "default": [
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The current block number being processed. Set by `execute_block`."
              ]
            },
            {
              "name": "ParentHash",
              "modifier": "Default",
              "ty": {
                "Plain": 13
              },
              "default": [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " Hash of the previous block."
              ]
            },
            {
              "name": "Digest",
              "modifier": "Default",
              "ty": {
                "Plain": 15
              },
              "default": [
                0
              ],
              "docs": [
                " Digest of the current block, also part of the block header."
              ]
            },
            {
              "name": "Events",
              "modifier": "Default",
              "ty": {
                "Plain": 19
              },
              "default": [
                0
              ],
              "docs": [
                " Events deposited for the current block.",
                "",
                " NOTE: The item is unbound and should therefore never be read on chain.",
                " It could otherwise inflate the PoV size of a block.",
                "",
                " Events have a large in-memory size. Box the events to not go out-of-memory",
                " just in case someone still reads them from within the runtime."
              ]
            },
            {
              "name": "EventCount",
              "modifier": "Default",
              "ty": {
                "Plain": 4
              },
              "default": [
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The number of events in the `Events<T>` list."
              ]
            },
            {
              "name": "EventTopics",
              "modifier": "Default",
              "ty": {
                "Map": {
                  "hashers": [
                    "Blake2_128Concat"
                  ],
                  "key": 13,
                  "value": 521
                }
              },
              "default": [
                0
              ],
              "docs": [
                " Mapping between a topic (represented by T::Hash) and a vector of indexes",
                " of events in the `<Events<T>>` list.",
                "",
                " All topic vectors have deterministic storage locations depending on the topic. This",
                " allows light-clients to leverage the changes trie storage tracking mechanism and",
                " in case of changes fetch the list of events of interest.",
                "",
                " The value has the type `(BlockNumberFor<T>, EventIndex)` because if we used only just",
                " the `EventIndex` then in case if the topic has the same contents on the next block",
                " no notification will be triggered thus the event might be lost."
              ]
            },
            {
              "name": "LastRuntimeUpgrade",
              "modifier": "Optional",
              "ty": {
                "Plain": 522
              },
              "default": [
                0
              ],
              "docs": [
                " Stores the `spec_version` and `spec_name` of when the last runtime upgrade happened."
              ]
            },
            {
              "name": "UpgradedToU32RefCount",
              "modifier": "Default",
              "ty": {
                "Plain": 8
              },
              "default": [
                0
              ],
              "docs": [
                " True if we have upgraded so that `type RefCount` is `u32`. False (default) if not."
              ]
            },
            {
              "name": "UpgradedToTripleRefCount",
              "modifier": "Default",
              "ty": {
                "Plain": 8
              },
              "default": [
                0
              ],
              "docs": [
                " True if we have upgraded so that AccountInfo contains three types of `RefCount`. False",
                " (default) if not."
              ]
            },
            {
              "name": "ExecutionPhase",
              "modifier": "Optional",
              "ty": {
                "Plain": 520
              },
              "default": [
                0
              ],
              "docs": [
                " The execution phase of the block."
              ]
            },
            {
              "name": "AuthorizedUpgrade",
              "modifier": "Optional",
              "ty": {
                "Plain": 524
              },
              "default": [
                0
              ],
              "docs": [
                " `Some` if a code upgrade has been authorized."
              ]
            }
          ]
        },
        "calls": {
          "ty": 96
        },
        "event": {
          "ty": 22
        },
        "constants": [
          {
            "name": "BlockWeights",
            "ty": 525,
            "value": [
              7,
              176,
              189,
              233,
              54,
              3,
              0,
              11,
              0,
              32,
              74,
              169,
              209,
              1,
              19,
              255,
              255,
              255,
              255,
              255,
              255,
              255,
              255,
              34,
              45,
              13,
              30,
              0,
              1,
              11,
              184,
              132,
              92,
              143,
              88,
              1,
              19,
              163,
              112,
              61,
              10,
              215,
              163,
              112,
              189,
              1,
              11,
              0,
              152,
              247,
              62,
              93,
              1,
              19,
              255,
              255,
              255,
              255,
              255,
              255,
              255,
              191,
              1,
              0,
              0,
              34,
              45,
              13,
              30,
              0,
              1,
              11,
              184,
              12,
              175,
              249,
              204,
              1,
              19,
              163,
              112,
              61,
              10,
              215,
              163,
              112,
              253,
              1,
              11,
              0,
              32,
              74,
              169,
              209,
              1,
              19,
              255,
              255,
              255,
              255,
              255,
              255,
              255,
              255,
              1,
              7,
              0,
              136,
              82,
              106,
              116,
              19,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              64,
              34,
              45,
              13,
              30,
              0,
              0,
              0,
              0
            ],
            "docs": [
              " Block & extrinsics weights: base values and limits."
            ]
          },
          {
            "name": "BlockLength",
            "ty": 528,
            "value": [
              0,
              0,
              60,
              0,
              0,
              0,
              80,
              0,
              0,
              0,
              80,
              0
            ],
            "docs": [
              " The maximum length of a block (in bytes)."
            ]
          },
          {
            "name": "BlockHashCount",
            "ty": 4,
            "value": [
              0,
              16,
              0,
              0
            ],
            "docs": [
              " Maximum number of block number to block hash mappings to keep (oldest pruned first)."
            ]
          },
          {
            "name": "DbWeight",
            "ty": 530,
            "value": [
              56,
              202,
              56,
              1,
              0,
              0,
              0,
              0,
              152,
              170,
              249,
              4,
              0,
              0,
              0,
              0
            ],
            "docs": [
              " The weight of runtime database operations the runtime can invoke."
            ]
          },
          {
            "name": "Version",
            "ty": 531,
            "value": [
              32,
              112,
              111,
              108,
              107,
              97,
              100,
              111,
              116,
              60,
              112,
              97,
              114,
              105,
              116,
              121,
              45,
              112,
              111,
              108,
              107,
              97,
              100,
              111,
              116,
              0,
              0,
              0,
              0,
              225,
              81,
              15,
              0,
              0,
              0,
              0,
              0,
              92,
              197,
              31,
              241,
              250,
              63,
              93,
              12,
              202,
              1,
              0,
              0,
              0,
              223,
              106,
              203,
              104,
              153,
              7,
              96,
              155,
              5,
              0,
              0,
              0,
              55,
              227,
              151,
              252,
              124,
              145,
              245,
              228,
              2,
              0,
              0,
              0,
              64,
              254,
              58,
              212,
              1,
              248,
              149,
              154,
              6,
              0,
              0,
              0,
              23,
              166,
              188,
              13,
              0,
              98,
              174,
              179,
              1,
              0,
              0,
              0,
              24,
              239,
              88,
              163,
              182,
              123,
              167,
              112,
              1,
              0,
              0,
              0,
              210,
              188,
              152,
              151,
              238,
              208,
              143,
              21,
              3,
              0,
              0,
              0,
              247,
              139,
              39,
              139,
              229,
              63,
              69,
              76,
              2,
              0,
              0,
              0,
              175,
              44,
              2,
              151,
              162,
              62,
              109,
              61,
              11,
              0,
              0,
              0,
              73,
              234,
              175,
              27,
              84,
              138,
              12,
              176,
              5,
              0,
              0,
              0,
              145,
              213,
              223,
              24,
              176,
              210,
              207,
              88,
              2,
              0,
              0,
              0,
              42,
              94,
              146,
              70,
              85,
              57,
              158,
              96,
              1,
              0,
              0,
              0,
              237,
              153,
              197,
              172,
              178,
              94,
              237,
              245,
              3,
              0,
              0,
              0,
              203,
              202,
              37,
              227,
              159,
              20,
              35,
              135,
              2,
              0,
              0,
              0,
              104,
              122,
              212,
              74,
              211,
              127,
              3,
              194,
              1,
              0,
              0,
              0,
              171,
              60,
              5,
              114,
              41,
              31,
              235,
              139,
              1,
              0,
              0,
              0,
              188,
              157,
              137,
              144,
              79,
              91,
              146,
              63,
              1,
              0,
              0,
              0,
              55,
              200,
              187,
              19,
              80,
              169,
              162,
              168,
              4,
              0,
              0,
              0,
              243,
              255,
              20,
              213,
              171,
              82,
              112,
              89,
              3,
              0,
              0,
              0,
              111,
              245,
              46,
              232,
              88,
              230,
              197,
              189,
              1,
              0,
              0,
              0,
              145,
              177,
              200,
              177,
              99,
              40,
              235,
              146,
              1,
              0,
              0,
              0,
              159,
              251,
              80,
              90,
              167,
              56,
              214,
              156,
              1,
              0,
              0,
              0,
              251,
              197,
              119,
              185,
              215,
              71,
              239,
              214,
              1,
              0,
              0,
              0,
              26,
              0,
              0,
              0,
              1
            ],
            "docs": [
              " Get the chain's in-code version."
            ]
          },
          {
            "name": "SS58Prefix",
            "ty": 93,
            "value": [
              0,
              0
            ],
            "docs": [
              " The designated SS58 prefix of this chain.",
              "",
              " This replaces the \"ss58Format\" property declared in the chain spec. Reason is",
              " that the runtime should know about the prefix in order to make use of it as",
              " an identifier of the chain."
            ]
          }
        ],
        "error": {
          "ty": 535
        },
        "index": 0
      },
      {
        "name": "Scheduler",
        "storage": {
          "prefix": "Scheduler",
          "entries": [
            {
              "name": "IncompleteSince",
              "modifier": "Optional",
              "ty": {
                "Plain": 4
              },
              "default": [
                0
              ],
              "docs": []
            },
            {
              "name": "Agenda",
              "modifier": "Default",
              "ty": {
                "Map": {
                  "hashers": [
                    "Twox64Concat"
                  ],
                  "key": 4,
                  "value": 536
                }
              },
              "default": [
                0
              ],
              "docs": [
                " Items to be executed, indexed by the block number that they should be executed on."
              ]
            },
            {
              "name": "Retries",
              "modifier": "Optional",
              "ty": {
                "Map": {
                  "hashers": [
                    "Blake2_128Concat"
                  ],
                  "key": 32,
                  "value": 540
                }
              },
              "default": [
                0
              ],
              "docs": [
                " Retry configurations for items to be executed, indexed by task address."
              ]
            },
            {
              "name": "Lookup",
              "modifier": "Optional",
              "ty": {
                "Map": {
                  "hashers": [
                    "Twox64Concat"
                  ],
                  "key": 1,
                  "value": 32
                }
              },
              "default": [
                0
              ],
              "docs": [
                " Lookup from a name to the block number and index of the task.",
                "",
                " For v3 -> v4 the previously unbounded identities are Blake2-256 hashed to form the v4",
                " identities."
              ]
            }
          ]
        },
        "calls": {
          "ty": 100
        },
        "event": {
          "ty": 31
        },
        "constants": [
          {
            "name": "MaximumWeight",
            "ty": 10,
            "value": [
              11,
              0,
              128,
              110,
              135,
              116,
              1,
              19,
              204,
              204,
              204,
              204,
              204,
              204,
              204,
              204
            ],
            "docs": [
              " The maximum weight that may be scheduled per block for any dispatchables."
            ]
          },
          {
            "name": "MaxScheduledPerBlock",
            "ty": 4,
            "value": [
              50,
              0,
              0,
              0
            ],
            "docs": [
              " The maximum number of scheduled calls in the queue for a single block.",
              "",
              " NOTE:",
              " + Dependent pallets' benchmarks might require a higher limit for the setting. Set a",
              " higher limit under `runtime-benchmarks` feature."
            ]
          }
        ],
        "error": {
          "ty": 541
        },
        "index": 1
      },
      {
        "name": "Preimage",
        "storage": {
          "prefix": "Preimage",
          "entries": [
            {
              "name": "StatusFor",
              "modifier": "Optional",
              "ty": {
                "Map": {
                  "hashers": [
                    "Identity"
                  ],
                  "key": 13,
                  "value": 542
                }
              },
              "default": [
                0
              ],
              "docs": [
                " The request status of a given hash."
              ]
            },
            {
              "name": "RequestStatusFor",
              "modifier": "Optional",
              "ty": {
                "Map": {
                  "hashers": [
                    "Identity"
                  ],
                  "key": 13,
                  "value": 544
                }
              },
              "default": [
                0
              ],
              "docs": [
                " The request status of a given hash."
              ]
            },
            {
              "name": "PreimageFor",
              "modifier": "Optional",
              "ty": {
                "Map": {
                  "hashers": [
                    "Identity"
                  ],
                  "key": 450,
                  "value": 548
                }
              },
              "default": [
                0
              ],
              "docs": []
            }
          ]
        },
        "calls": {
          "ty": 102
        },
        "event": {
          "ty": 36
        },
        "constants": [],
        "error": {
          "ty": 549
        },
        "index": 10
      },
      {
        "name": "Babe",
        "storage": {
          "prefix": "Babe",
          "entries": [
            {
              "name": "EpochIndex",
              "modifier": "Default",
              "ty": {
                "Plain": 12
              },
              "default": [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " Current epoch index."
              ]
            },
            {
              "name": "Authorities",
              "modifier": "Default",
              "ty": {
                "Plain": 550
              },
              "default": [
                0
              ],
              "docs": [
                " Current epoch authorities."
              ]
            },
            {
              "name": "GenesisSlot",
              "modifier": "Default",
              "ty": {
                "Plain": 108
              },
              "default": [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The slot at which the first epoch actually started. This is 0",
                " until the first block of the chain."
              ]
            },
            {
              "name": "CurrentSlot",
              "modifier": "Default",
              "ty": {
                "Plain": 108
              },
              "default": [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " Current slot number."
              ]
            },
            {
              "name": "Randomness",
              "modifier": "Default",
              "ty": {
                "Plain": 1
              },
              "default": [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The epoch randomness for the *current* epoch.",
                "",
                " # Security",
                "",
                " This MUST NOT be used for gambling, as it can be influenced by a",
                " malicious validator in the short term. It MAY be used in many",
                " cryptographic protocols, however, so long as one remembers that this",
                " (like everything else on-chain) it is public. For example, it can be",
                " used where a number is needed that cannot have been chosen by an",
                " adversary, for purposes such as public-coin zero-knowledge proofs."
              ]
            },
            {
              "name": "PendingEpochConfigChange",
              "modifier": "Optional",
              "ty": {
                "Plain": 110
              },
              "default": [
                0
              ],
              "docs": [
                " Pending epoch configuration change that will be applied when the next epoch is enacted."
              ]
            },
            {
              "name": "NextRandomness",
              "modifier": "Default",
              "ty": {
                "Plain": 1
              },
              "default": [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " Next epoch randomness."
              ]
            },
            {
              "name": "NextAuthorities",
              "modifier": "Default",
              "ty": {
                "Plain": 550
              },
              "default": [
                0
              ],
              "docs": [
                " Next epoch authorities."
              ]
            },
            {
              "name": "SegmentIndex",
              "modifier": "Default",
              "ty": {
                "Plain": 4
              },
              "default": [
                0,
                0,
                0,
                0
              ],
              "docs": [
                " Randomness under construction.",
                "",
                " We make a trade-off between storage accesses and list length.",
                " We store the under-construction randomness in segments of up to",
                " `UNDER_CONSTRUCTION_SEGMENT_LENGTH`.",
                "",
                " Once a segment reaches this length, we begin the next one.",
                " We reset all segments and return to `0` at the beginning of every",
                " epoch."
              ]
            },
            {
              "name": "UnderConstruction",
              "modifier": "Default",
              "ty": {
                "Map": {
                  "hashers": [
                    "Twox64Concat"
                  ],
                  "key": 4,
                  "value": 553
                }
              },
              "default": [
                0
              ],
              "docs": [
                " TWOX-NOTE: `SegmentIndex` is an increasing integer, so this is okay."
              ]
            },
            {
              "name": "Initialized",
              "modifier": "Optional",
              "ty": {
                "Plain": 555
              },
              "default": [
                0
              ],
              "docs": [
                " Temporary value (cleared at block finalization) which is `Some`",
                " if per-block initialization has already been called for current block."
              ]
            },
            {
              "name": "AuthorVrfRandomness",
              "modifier": "Default",
              "ty": {
                "Plain": 33
              },
              "default": [
                0
              ],
              "docs": [
                " This field should always be populated during block processing unless",
                " secondary plain slots are enabled (which don't contain a VRF output).",
                "",
                " It is set in `on_finalize`, before it will contain the value from the last block."
              ]
            },
            {
              "name": "EpochStart",
              "modifier": "Default",
              "ty": {
                "Plain": 32
              },
              "default": [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The block numbers when the last and current epoch have started, respectively `N-1` and",
                " `N`.",
                " NOTE: We track this is in order to annotate the block number when a given pool of",
                " entropy was fixed (i.e. it was known to chain observers). Since epochs are defined in",
                " slots, which may be skipped, the block numbers may not line up with the slot numbers."
              ]
            },
            {
              "name": "Lateness",
              "modifier": "Default",
              "ty": {
                "Plain": 4
              },
              "default": [
                0,
                0,
                0,
                0
              ],
              "docs": [
                " How late the current block is compared to its parent.",
                "",
                " This entry is populated as part of block execution and is cleaned up",
                " on block finalization. Querying this storage entry outside of block",
                " execution context should always yield zero."
              ]
            },
            {
              "name": "EpochConfig",
              "modifier": "Optional",
              "ty": {
                "Plain": 561
              },
              "default": [
                0
              ],
              "docs": [
                " The configuration for the current epoch. Should never be `None` as it is initialized in",
                " genesis."
              ]
            },
            {
              "name": "NextEpochConfig",
              "modifier": "Optional",
              "ty": {
                "Plain": 561
              },
              "default": [
                0
              ],
              "docs": [
                " The configuration for the next epoch, `None` if the config will not change",
                " (you can fallback to `EpochConfig` instead in that case)."
              ]
            },
            {
              "name": "SkippedEpochs",
              "modifier": "Default",
              "ty": {
                "Plain": 562
              },
              "default": [
                0
              ],
              "docs": [
                " A list of the last 100 skipped epochs and the corresponding session index",
                " when the epoch was skipped.",
                "",
                " This is only used for validating equivocation proofs. An equivocation proof",
                " must contains a key-ownership proof for a given session, therefore we need a",
                " way to tie together sessions and epoch indices, i.e. we need to validate that",
                " a validator was the owner of a given key on a given session, and what the",
                " active epoch index was during that session."
              ]
            }
          ]
        },
        "calls": {
          "ty": 104
        },
        "event": null,
        "constants": [
          {
            "name": "EpochDuration",
            "ty": 12,
            "value": [
              96,
              9,
              0,
              0,
              0,
              0,
              0,
              0
            ],
            "docs": [
              " The amount of time, in slots, that each epoch should last.",
              " NOTE: Currently it is not possible to change the epoch duration after",
              " the chain has started. Attempting to do so will brick block production."
            ]
          },
          {
            "name": "ExpectedBlockTime",
            "ty": 12,
            "value": [
              112,
              23,
              0,
              0,
              0,
              0,
              0,
              0
            ],
            "docs": [
              " The expected average block time at which BABE should be creating",
              " blocks. Since BABE is probabilistic it is not trivial to figure out",
              " what the expected average block time should be based on the slot",
              " duration and the security parameter `c` (where `1 - c` represents",
              " the probability of a slot being empty)."
            ]
          },
          {
            "name": "MaxAuthorities",
            "ty": 4,
            "value": [
              160,
              134,
              1,
              0
            ],
            "docs": [
              " Max number of authorities allowed"
            ]
          },
          {
            "name": "MaxNominators",
            "ty": 4,
            "value": [
              0,
              2,
              0,
              0
            ],
            "docs": [
              " The maximum number of nominators for each validator."
            ]
          }
        ],
        "error": {
          "ty": 565
        },
        "index": 2
      },
      {
        "name": "Timestamp",
        "storage": {
          "prefix": "Timestamp",
          "entries": [
            {
              "name": "Now",
              "modifier": "Default",
              "ty": {
                "Plain": 12
              },
              "default": [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The current time for the current block."
              ]
            },
            {
              "name": "DidUpdate",
              "modifier": "Default",
              "ty": {
                "Plain": 8
              },
              "default": [
                0
              ],
              "docs": [
                " Whether the timestamp has been updated in this block.",
                "",
                " This value is updated to `true` upon successful submission of a timestamp by a node.",
                " It is then checked at the end of each block execution in the `on_finalize` hook."
              ]
            }
          ]
        },
        "calls": {
          "ty": 113
        },
        "event": null,
        "constants": [
          {
            "name": "MinimumPeriod",
            "ty": 12,
            "value": [
              184,
              11,
              0,
              0,
              0,
              0,
              0,
              0
            ],
            "docs": [
              " The minimum period between blocks.",
              "",
              " Be aware that this is different to the *expected* period that the block production",
              " apparatus provides. Your chosen consensus system will generally work with this to",
              " determine a sensible block time. For example, in the Aura pallet it will be double this",
              " period on default settings."
            ]
          }
        ],
        "error": null,
        "index": 3
      },
      {
        "name": "Indices",
        "storage": {
          "prefix": "Indices",
          "entries": [
            {
              "name": "Accounts",
              "modifier": "Optional",
              "ty": {
                "Map": {
                  "hashers": [
                    "Blake2_128Concat"
                  ],
                  "key": 4,
                  "value": 566
                }
              },
              "default": [
                0
              ],
              "docs": [
                " The lookup from index to account."
              ]
            }
          ]
        },
        "calls": {
          "ty": 114
        },
        "event": {
          "ty": 37
        },
        "constants": [
          {
            "name": "Deposit",
            "ty": 6,
            "value": [
              0,
              232,
              118,
              72,
              23,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0
            ],
            "docs": [
              " The deposit needed for reserving an index."
            ]
          }
        ],
        "error": {
          "ty": 567
        },
        "index": 4
      },
      {
        "name": "Balances",
        "storage": {
          "prefix": "Balances",
          "entries": [
            {
              "name": "TotalIssuance",
              "modifier": "Default",
              "ty": {
                "Plain": 6
              },
              "default": [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The total units issued in the system."
              ]
            },
            {
              "name": "InactiveIssuance",
              "modifier": "Default",
              "ty": {
                "Plain": 6
              },
              "default": [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The total units of outstanding deactivated balance in the system."
              ]
            },
            {
              "name": "Account",
              "modifier": "Default",
              "ty": {
                "Map": {
                  "hashers": [
                    "Blake2_128Concat"
                  ],
                  "key": 0,
                  "value": 5
                }
              },
              "default": [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                128
              ],
              "docs": [
                " The Balances pallet example of storing the balance of an account.",
                "",
                " # Example",
                "",
                " ```nocompile",
                "  impl pallet_balances::Config for Runtime {",
                "    type AccountStore = StorageMapShim<Self::Account<Runtime>, frame_system::Provider<Runtime>, AccountId, Self::AccountData<Balance>>",
                "  }",
                " ```",
                "",
                " You can also store the balance of an account in the `System` pallet.",
                "",
                " # Example",
                "",
                " ```nocompile",
                "  impl pallet_balances::Config for Runtime {",
                "   type AccountStore = System",
                "  }",
                " ```",
                "",
                " But this comes with tradeoffs, storing account balances in the system pallet stores",
                " `frame_system` data alongside the account data contrary to storing account balances in the",
                " `Balances` pallet, which uses a `StorageMap` to store balances data only.",
                " NOTE: This is only used in the case that this pallet is used to store balances."
              ]
            },
            {
              "name": "Locks",
              "modifier": "Default",
              "ty": {
                "Map": {
                  "hashers": [
                    "Blake2_128Concat"
                  ],
                  "key": 0,
                  "value": 568
                }
              },
              "default": [
                0
              ],
              "docs": [
                " Any liquidity locks on some account balances.",
                " NOTE: Should only be accessed when setting, changing and freeing a lock.",
                "",
                " Use of locks is deprecated in favour of freezes. See `https://github.com/paritytech/substrate/pull/12951/`"
              ]
            },
            {
              "name": "Reserves",
              "modifier": "Default",
              "ty": {
                "Map": {
                  "hashers": [
                    "Blake2_128Concat"
                  ],
                  "key": 0,
                  "value": 572
                }
              },
              "default": [
                0
              ],
              "docs": [
                " Named reserves on some account balances.",
                "",
                " Use of reserves is deprecated in favour of holds. See `https://github.com/paritytech/substrate/pull/12951/`"
              ]
            },
            {
              "name": "Holds",
              "modifier": "Default",
              "ty": {
                "Map": {
                  "hashers": [
                    "Blake2_128Concat"
                  ],
                  "key": 0,
                  "value": 575
                }
              },
              "default": [
                0
              ],
              "docs": [
                " Holds on account balances."
              ]
            },
            {
              "name": "Freezes",
              "modifier": "Default",
              "ty": {
                "Map": {
                  "hashers": [
                    "Blake2_128Concat"
                  ],
                  "key": 0,
                  "value": 582
                }
              },
              "default": [
                0
              ],
              "docs": [
                " Freeze locks on account balances."
              ]
            }
          ]
        },
        "calls": {
          "ty": 117
        },
        "event": {
          "ty": 38
        },
        "constants": [
          {
            "name": "ExistentialDeposit",
            "ty": 6,
            "value": [
              0,
              228,
              11,
              84,
              2,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0
            ],
            "docs": [
              " The minimum amount required to keep an account open. MUST BE GREATER THAN ZERO!",
              "",
              " If you *really* need it to be zero, you can enable the feature `insecure_zero_ed` for",
              " this pallet. However, you do so at your own risk: this will open up a major DoS vector.",
              " In case you have multiple sources of provider references, you may also get unexpected",
              " behaviour if you set this to zero.",
              "",
              " Bottom line: Do yourself a favour and make it at least one!"
            ]
          },
          {
            "name": "MaxLocks",
            "ty": 4,
            "value": [
              50,
              0,
              0,
              0
            ],
            "docs": [
              " The maximum number of locks that should exist on an account.",
              " Not strictly enforced, but used for weight estimation.",
              "",
              " Use of locks is deprecated in favour of freezes. See `https://github.com/paritytech/substrate/pull/12951/`"
            ]
          },
          {
            "name": "MaxReserves",
            "ty": 4,
            "value": [
              50,
              0,
              0,
              0
            ],
            "docs": [
              " The maximum number of named reserves that can exist on an account.",
              "",
              " Use of reserves is deprecated in favour of holds. See `https://github.com/paritytech/substrate/pull/12951/`"
            ]
          },
          {
            "name": "MaxFreezes",
            "ty": 4,
            "value": [
              8,
              0,
              0,
              0
            ],
            "docs": [
              " The maximum number of individual freeze locks that can exist on an account at any time."
            ]
          }
        ],
        "error": {
          "ty": 587
        },
        "index": 5
      },
      {
        "name": "TransactionPayment",
        "storage": {
          "prefix": "TransactionPayment",
          "entries": [
            {
              "name": "NextFeeMultiplier",
              "modifier": "Default",
              "ty": {
                "Plain": 425
              },
              "default": [
                0,
                0,
                100,
                167,
                179,
                182,
                224,
                13,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": []
            },
            {
              "name": "StorageVersion",
              "modifier": "Default",
              "ty": {
                "Plain": 588
              },
              "default": [
                0
              ],
              "docs": []
            }
          ]
        },
        "calls": null,
        "event": {
          "ty": 40
        },
        "constants": [
          {
            "name": "OperationalFeeMultiplier",
            "ty": 2,
            "value": [
              5
            ],
            "docs": [
              " A fee multiplier for `Operational` extrinsics to compute \"virtual tip\" to boost their",
              " `priority`",
              "",
              " This value is multiplied by the `final_fee` to obtain a \"virtual tip\" that is later",
              " added to a tip component in regular `priority` calculations.",
              " It means that a `Normal` transaction can front-run a similarly-sized `Operational`",
              " extrinsic (with no tip), by including a tip value greater than the virtual tip.",
              "",
              " ```rust,ignore",
              " // For `Normal`",
              " let priority = priority_calc(tip);",
              "",
              " // For `Operational`",
              " let virtual_tip = (inclusion_fee + tip) * OperationalFeeMultiplier;",
              " let priority = priority_calc(tip + virtual_tip);",
              " ```",
              "",
              " Note that since we use `final_fee` the multiplier applies also to the regular `tip`",
              " sent with the transaction. So, not only does the transaction get a priority bump based",
              " on the `inclusion_fee`, but we also amplify the impact of tips applied to `Operational`",
              " transactions."
            ]
          }
        ],
        "error": null,
        "index": 32
      },
      {
        "name": "Authorship",
        "storage": {
          "prefix": "Authorship",
          "entries": [
            {
              "name": "Author",
              "modifier": "Optional",
              "ty": {
                "Plain": 0
              },
              "default": [
                0
              ],
              "docs": [
                " Author of current block."
              ]
            }
          ]
        },
        "calls": null,
        "event": null,
        "constants": [],
        "error": null,
        "index": 6
      },
      {
        "name": "Staking",
        "storage": {
          "prefix": "Staking",
          "entries": [
            {
              "name": "ValidatorCount",
              "modifier": "Default",
              "ty": {
                "Plain": 4
              },
              "default": [
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The ideal number of active validators."
              ]
            },
            {
              "name": "MinimumValidatorCount",
              "modifier": "Default",
              "ty": {
                "Plain": 4
              },
              "default": [
                0,
                0,
                0,
                0
              ],
              "docs": [
                " Minimum number of staking participants before emergency conditions are imposed."
              ]
            },
            {
              "name": "Invulnerables",
              "modifier": "Default",
              "ty": {
                "Plain": 118
              },
              "default": [
                0
              ],
              "docs": [
                " Any validators that may never be slashed or forcibly kicked. It's a Vec since they're",
                " easy to initialize and the performance hit is minimal (we expect no more than four",
                " invulnerables) and restricted to testnets."
              ]
            },
            {
              "name": "Bonded",
              "modifier": "Optional",
              "ty": {
                "Map": {
                  "hashers": [
                    "Twox64Concat"
                  ],
                  "key": 0,
                  "value": 0
                }
              },
              "default": [
                0
              ],
              "docs": [
                " Map from all locked \"stash\" accounts to the controller account.",
                "",
                " TWOX-NOTE: SAFE since `AccountId` is a secure hash."
              ]
            },
            {
              "name": "MinNominatorBond",
              "modifier": "Default",
              "ty": {
                "Plain": 6
              },
              "default": [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The minimum active bond to become and maintain the role of a nominator."
              ]
            },
            {
              "name": "MinValidatorBond",
              "modifier": "Default",
              "ty": {
                "Plain": 6
              },
              "default": [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The minimum active bond to become and maintain the role of a validator."
              ]
            },
            {
              "name": "MinimumActiveStake",
              "modifier": "Default",
              "ty": {
                "Plain": 6
              },
              "default": [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The minimum active nominator stake of the last successful election."
              ]
            },
            {
              "name": "MinCommission",
              "modifier": "Default",
              "ty": {
                "Plain": 43
              },
              "default": [
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The minimum amount of commission that validators can set.",
                "",
                " If set to `0`, no limit exists."
              ]
            },
            {
              "name": "Ledger",
              "modifier": "Optional",
              "ty": {
                "Map": {
                  "hashers": [
                    "Blake2_128Concat"
                  ],
                  "key": 0,
                  "value": 589
                }
              },
              "default": [
                0
              ],
              "docs": [
                " Map from all (unlocked) \"controller\" accounts to the info regarding the staking.",
                "",
                " Note: All the reads and mutations to this storage *MUST* be done through the methods exposed",
                " by [`StakingLedger`] to ensure data and lock consistency."
              ]
            },
            {
              "name": "Payee",
              "modifier": "Optional",
              "ty": {
                "Map": {
                  "hashers": [
                    "Twox64Concat"
                  ],
                  "key": 0,
                  "value": 42
                }
              },
              "default": [
                0
              ],
              "docs": [
                " Where the reward payment should be made. Keyed by stash.",
                "",
                " TWOX-NOTE: SAFE since `AccountId` is a secure hash."
              ]
            },
            {
              "name": "Validators",
              "modifier": "Default",
              "ty": {
                "Map": {
                  "hashers": [
                    "Twox64Concat"
                  ],
                  "key": 0,
                  "value": 44
                }
              },
              "default": [
                0,
                0
              ],
              "docs": [
                " The map from (wannabe) validator stash key to the preferences of that validator.",
                "",
                " TWOX-NOTE: SAFE since `AccountId` is a secure hash."
              ]
            },
            {
              "name": "CounterForValidators",
              "modifier": "Default",
              "ty": {
                "Plain": 4
              },
              "default": [
                0,
                0,
                0,
                0
              ],
              "docs": [
                "Counter for the related counted storage map"
              ]
            },
            {
              "name": "MaxValidatorsCount",
              "modifier": "Optional",
              "ty": {
                "Plain": 4
              },
              "default": [
                0
              ],
              "docs": [
                " The maximum validator count before we stop allowing new validators to join.",
                "",
                " When this value is not set, no limits are enforced."
              ]
            },
            {
              "name": "Nominators",
              "modifier": "Optional",
              "ty": {
                "Map": {
                  "hashers": [
                    "Twox64Concat"
                  ],
                  "key": 0,
                  "value": 591
                }
              },
              "default": [
                0
              ],
              "docs": [
                " The map from nominator stash key to their nomination preferences, namely the validators that",
                " they wish to support.",
                "",
                " Note that the keys of this storage map might become non-decodable in case the",
                " account's [`NominationsQuota::MaxNominations`] configuration is decreased.",
                " In this rare case, these nominators",
                " are still existent in storage, their key is correct and retrievable (i.e. `contains_key`",
                " indicates that they exist), but their value cannot be decoded. Therefore, the non-decodable",
                " nominators will effectively not-exist, until they re-submit their preferences such that it",
                " is within the bounds of the newly set `Config::MaxNominations`.",
                "",
                " This implies that `::iter_keys().count()` and `::iter().count()` might return different",
                " values for this map. Moreover, the main `::count()` is aligned with the former, namely the",
                " number of keys that exist.",
                "",
                " Lastly, if any of the nominators become non-decodable, they can be chilled immediately via",
                " [`Call::chill_other`] dispatchable by anyone.",
                "",
                " TWOX-NOTE: SAFE since `AccountId` is a secure hash."
              ]
            },
            {
              "name": "CounterForNominators",
              "modifier": "Default",
              "ty": {
                "Plain": 4
              },
              "default": [
                0,
                0,
                0,
                0
              ],
              "docs": [
                "Counter for the related counted storage map"
              ]
            },
            {
              "name": "VirtualStakers",
              "modifier": "Optional",
              "ty": {
                "Map": {
                  "hashers": [
                    "Twox64Concat"
                  ],
                  "key": 0,
                  "value": 35
                }
              },
              "default": [
                0
              ],
              "docs": [
                " Stakers whose funds are managed by other pallets.",
                "",
                " This pallet does not apply any locks on them, therefore they are only virtually bonded. They",
                " are expected to be keyless accounts and hence should not be allowed to mutate their ledger",
                " directly via this pallet. Instead, these accounts are managed by other pallets and accessed",
                " via low level apis. We keep track of them to do minimal integrity checks."
              ]
            },
            {
              "name": "CounterForVirtualStakers",
              "modifier": "Default",
              "ty": {
                "Plain": 4
              },
              "default": [
                0,
                0,
                0,
                0
              ],
              "docs": [
                "Counter for the related counted storage map"
              ]
            },
            {
              "name": "MaxNominatorsCount",
              "modifier": "Optional",
              "ty": {
                "Plain": 4
              },
              "default": [
                0
              ],
              "docs": [
                " The maximum nominator count before we stop allowing new validators to join.",
                "",
                " When this value is not set, no limits are enforced."
              ]
            },
            {
              "name": "CurrentEra",
              "modifier": "Optional",
              "ty": {
                "Plain": 4
              },
              "default": [
                0
              ],
              "docs": [
                " The current era index.",
                "",
                " This is the latest planned era, depending on how the Session pallet queues the validator",
                " set, it might be active or not."
              ]
            },
            {
              "name": "ActiveEra",
              "modifier": "Optional",
              "ty": {
                "Plain": 593
              },
              "default": [
                0
              ],
              "docs": [
                " The active era information, it holds index and start.",
                "",
                " The active era is the era being currently rewarded. Validator set of this era must be",
                " equal to [`SessionInterface::validators`]."
              ]
            },
            {
              "name": "ErasStartSessionIndex",
              "modifier": "Optional",
              "ty": {
                "Map": {
                  "hashers": [
                    "Twox64Concat"
                  ],
                  "key": 4,
                  "value": 4
                }
              },
              "default": [
                0
              ],
              "docs": [
                " The session index at which the era start for the last [`Config::HistoryDepth`] eras.",
                "",
                " Note: This tracks the starting session (i.e. session index when era start being active)",
                " for the eras in `[CurrentEra - HISTORY_DEPTH, CurrentEra]`."
              ]
            },
            {
              "name": "ErasStakers",
              "modifier": "Default",
              "ty": {
                "Map": {
                  "hashers": [
                    "Twox64Concat",
                    "Twox64Concat"
                  ],
                  "key": 594,
                  "value": 595
                }
              },
              "default": [
                0,
                0,
                0
              ],
              "docs": [
                " Exposure of validator at era.",
                "",
                " This is keyed first by the era index to allow bulk deletion and then the stash account.",
                "",
                " Is it removed after [`Config::HistoryDepth`] eras.",
                " If stakers hasn't been set or has been removed then empty exposure is returned.",
                "",
                " Note: Deprecated since v14. Use `EraInfo` instead to work with exposures."
              ]
            },
            {
              "name": "ErasStakersOverview",
              "modifier": "Optional",
              "ty": {
                "Map": {
                  "hashers": [
                    "Twox64Concat",
                    "Twox64Concat"
                  ],
                  "key": 594,
                  "value": 598
                }
              },
              "default": [
                0
              ],
              "docs": [
                " Summary of validator exposure at a given era.",
                "",
                " This contains the total stake in support of the validator and their own stake. In addition,",
                " it can also be used to get the number of nominators backing this validator and the number of",
                " exposure pages they are divided into. The page count is useful to determine the number of",
                " pages of rewards that needs to be claimed.",
                "",
                " This is keyed first by the era index to allow bulk deletion and then the stash account.",
                " Should only be accessed through `EraInfo`.",
                "",
                " Is it removed after [`Config::HistoryDepth`] eras.",
                " If stakers hasn't been set or has been removed then empty overview is returned."
              ]
            },
            {
              "name": "ErasStakersClipped",
              "modifier": "Default",
              "ty": {
                "Map": {
                  "hashers": [
                    "Twox64Concat",
                    "Twox64Concat"
                  ],
                  "key": 594,
                  "value": 595
                }
              },
              "default": [
                0,
                0,
                0
              ],
              "docs": [
                " Clipped Exposure of validator at era.",
                "",
                " Note: This is deprecated, should be used as read-only and will be removed in the future.",
                " New `Exposure`s are stored in a paged manner in `ErasStakersPaged` instead.",
                "",
                " This is similar to [`ErasStakers`] but number of nominators exposed is reduced to the",
                " `T::MaxExposurePageSize` biggest stakers.",
                " (Note: the field `total` and `own` of the exposure remains unchanged).",
                " This is used to limit the i/o cost for the nominator payout.",
                "",
                " This is keyed fist by the era index to allow bulk deletion and then the stash account.",
                "",
                " It is removed after [`Config::HistoryDepth`] eras.",
                " If stakers hasn't been set or has been removed then empty exposure is returned.",
                "",
                " Note: Deprecated since v14. Use `EraInfo` instead to work with exposures."
              ]
            },
            {
              "name": "ErasStakersPaged",
              "modifier": "Optional",
              "ty": {
                "Map": {
                  "hashers": [
                    "Twox64Concat",
                    "Twox64Concat",
                    "Twox64Concat"
                  ],
                  "key": 599,
                  "value": 600
                }
              },
              "default": [
                0
              ],
              "docs": [
                " Paginated exposure of a validator at given era.",
                "",
                " This is keyed first by the era index to allow bulk deletion, then stash account and finally",
                " the page. Should only be accessed through `EraInfo`.",
                "",
                " This is cleared after [`Config::HistoryDepth`] eras."
              ]
            },
            {
              "name": "ClaimedRewards",
              "modifier": "Default",
              "ty": {
                "Map": {
                  "hashers": [
                    "Twox64Concat",
                    "Twox64Concat"
                  ],
                  "key": 594,
                  "value": 123
                }
              },
              "default": [
                0
              ],
              "docs": [
                " History of claimed paged rewards by era and validator.",
                "",
                " This is keyed by era and validator stash which maps to the set of page indexes which have",
                " been claimed.",
                "",
                " It is removed after [`Config::HistoryDepth`] eras."
              ]
            },
            {
              "name": "ErasValidatorPrefs",
              "modifier": "Default",
              "ty": {
                "Map": {
                  "hashers": [
                    "Twox64Concat",
                    "Twox64Concat"
                  ],
                  "key": 594,
                  "value": 44
                }
              },
              "default": [
                0,
                0
              ],
              "docs": [
                " Similar to `ErasStakers`, this holds the preferences of validators.",
                "",
                " This is keyed first by the era index to allow bulk deletion and then the stash account.",
                "",
                " Is it removed after [`Config::HistoryDepth`] eras."
              ]
            },
            {
              "name": "ErasValidatorReward",
              "modifier": "Optional",
              "ty": {
                "Map": {
                  "hashers": [
                    "Twox64Concat"
                  ],
                  "key": 4,
                  "value": 6
                }
              },
              "default": [
                0
              ],
              "docs": [
                " The total validator era payout for the last [`Config::HistoryDepth`] eras.",
                "",
                " Eras that haven't finished yet or has been removed doesn't have reward."
              ]
            },
            {
              "name": "ErasRewardPoints",
              "modifier": "Default",
              "ty": {
                "Map": {
                  "hashers": [
                    "Twox64Concat"
                  ],
                  "key": 4,
                  "value": 601
                }
              },
              "default": [
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " Rewards for the last [`Config::HistoryDepth`] eras.",
                " If reward hasn't been set or has been removed then 0 reward is returned."
              ]
            },
            {
              "name": "ErasTotalStake",
              "modifier": "Default",
              "ty": {
                "Map": {
                  "hashers": [
                    "Twox64Concat"
                  ],
                  "key": 4,
                  "value": 6
                }
              },
              "default": [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The total amount staked for the last [`Config::HistoryDepth`] eras.",
                " If total hasn't been set or has been removed then 0 stake is returned."
              ]
            },
            {
              "name": "ForceEra",
              "modifier": "Default",
              "ty": {
                "Plain": 46
              },
              "default": [
                0
              ],
              "docs": [
                " Mode of era forcing."
              ]
            },
            {
              "name": "MaxStakedRewards",
              "modifier": "Optional",
              "ty": {
                "Plain": 122
              },
              "default": [
                0
              ],
              "docs": [
                " Maximum staked rewards, i.e. the percentage of the era inflation that",
                " is used for stake rewards.",
                " See [Era payout](./index.html#era-payout)."
              ]
            },
            {
              "name": "SlashRewardFraction",
              "modifier": "Default",
              "ty": {
                "Plain": 43
              },
              "default": [
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The percentage of the slash that is distributed to reporters.",
                "",
                " The rest of the slashed value is handled by the `Slash`."
              ]
            },
            {
              "name": "CanceledSlashPayout",
              "modifier": "Default",
              "ty": {
                "Plain": 6
              },
              "default": [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The amount of currency given to reporters of a slash event which was",
                " canceled by extraordinary circumstances (e.g. governance)."
              ]
            },
            {
              "name": "UnappliedSlashes",
              "modifier": "Default",
              "ty": {
                "Map": {
                  "hashers": [
                    "Twox64Concat"
                  ],
                  "key": 4,
                  "value": 605
                }
              },
              "default": [
                0
              ],
              "docs": [
                " All unapplied slashes that are queued for later."
              ]
            },
            {
              "name": "BondedEras",
              "modifier": "Default",
              "ty": {
                "Plain": 521
              },
              "default": [
                0
              ],
              "docs": [
                " A mapping from still-bonded eras to the first session index of that era.",
                "",
                " Must contains information for eras for the range:",
                " `[active_era - bounding_duration; active_era]`"
              ]
            },
            {
              "name": "ValidatorSlashInEra",
              "modifier": "Optional",
              "ty": {
                "Map": {
                  "hashers": [
                    "Twox64Concat",
                    "Twox64Concat"
                  ],
                  "key": 594,
                  "value": 607
                }
              },
              "default": [
                0
              ],
              "docs": [
                " All slashing events on validators, mapped by era to the highest slash proportion",
                " and slash value of the era."
              ]
            },
            {
              "name": "NominatorSlashInEra",
              "modifier": "Optional",
              "ty": {
                "Map": {
                  "hashers": [
                    "Twox64Concat",
                    "Twox64Concat"
                  ],
                  "key": 594,
                  "value": 6
                }
              },
              "default": [
                0
              ],
              "docs": [
                " All slashing events on nominators, mapped by era to the highest slash value of the era."
              ]
            },
            {
              "name": "SlashingSpans",
              "modifier": "Optional",
              "ty": {
                "Map": {
                  "hashers": [
                    "Twox64Concat"
                  ],
                  "key": 0,
                  "value": 608
                }
              },
              "default": [
                0
              ],
              "docs": [
                " Slashing spans for stash accounts."
              ]
            },
            {
              "name": "SpanSlash",
              "modifier": "Default",
              "ty": {
                "Map": {
                  "hashers": [
                    "Twox64Concat"
                  ],
                  "key": 604,
                  "value": 609
                }
              },
              "default": [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " Records information about the maximum slash of a stash within a slashing span,",
                " as well as how much reward has been paid out."
              ]
            },
            {
              "name": "CurrentPlannedSession",
              "modifier": "Default",
              "ty": {
                "Plain": 4
              },
              "default": [
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The last planned session scheduled by the session pallet.",
                "",
                " This is basically in sync with the call to [`pallet_session::SessionManager::new_session`]."
              ]
            },
            {
              "name": "DisabledValidators",
              "modifier": "Default",
              "ty": {
                "Plain": 123
              },
              "default": [
                0
              ],
              "docs": [
                " Indices of validators that have offended in the active era. The offenders are disabled for a",
                " whole era. For this reason they are kept here - only staking pallet knows about eras. The",
                " implementor of [`DisablingStrategy`] defines if a validator should be disabled which",
                " implicitly means that the implementor also controls the max number of disabled validators.",
                "",
                " The vec is always kept sorted so that we can find whether a given validator has previously",
                " offended using binary search."
              ]
            },
            {
              "name": "ChillThreshold",
              "modifier": "Optional",
              "ty": {
                "Plain": 122
              },
              "default": [
                0
              ],
              "docs": [
                " The threshold for when users can start calling `chill_other` for other validators /",
                " nominators. The threshold is compared to the actual number of validators / nominators",
                " (`CountFor*`) in the system compared to the configured max (`Max*Count`)."
              ]
            }
          ]
        },
        "calls": {
          "ty": 120
        },
        "event": {
          "ty": 41
        },
        "constants": [
          {
            "name": "HistoryDepth",
            "ty": 4,
            "value": [
              84,
              0,
              0,
              0
            ],
            "docs": [
              " Number of eras to keep in history.",
              "",
              " Following information is kept for eras in `[current_era -",
              " HistoryDepth, current_era]`: `ErasStakers`, `ErasStakersClipped`,",
              " `ErasValidatorPrefs`, `ErasValidatorReward`, `ErasRewardPoints`,",
              " `ErasTotalStake`, `ErasStartSessionIndex`, `ClaimedRewards`, `ErasStakersPaged`,",
              " `ErasStakersOverview`.",
              "",
              " Must be more than the number of eras delayed by session.",
              " I.e. active era must always be in history. I.e. `active_era >",
              " current_era - history_depth` must be guaranteed.",
              "",
              " If migrating an existing pallet from storage value to config value,",
              " this should be set to same value or greater as in storage.",
              "",
              " Note: `HistoryDepth` is used as the upper bound for the `BoundedVec`",
              " item `StakingLedger.legacy_claimed_rewards`. Setting this value lower than",
              " the existing value can lead to inconsistencies in the",
              " `StakingLedger` and will need to be handled properly in a migration.",
              " The test `reducing_history_depth_abrupt` shows this effect."
            ]
          },
          {
            "name": "SessionsPerEra",
            "ty": 4,
            "value": [
              6,
              0,
              0,
              0
            ],
            "docs": [
              " Number of sessions per era."
            ]
          },
          {
            "name": "BondingDuration",
            "ty": 4,
            "value": [
              28,
              0,
              0,
              0
            ],
            "docs": [
              " Number of eras that staked funds must remain bonded for."
            ]
          },
          {
            "name": "SlashDeferDuration",
            "ty": 4,
            "value": [
              27,
              0,
              0,
              0
            ],
            "docs": [
              " Number of eras that slashes are deferred by, after computation.",
              "",
              " This should be less than the bonding duration. Set to 0 if slashes",
              " should be applied immediately, without opportunity for intervention."
            ]
          },
          {
            "name": "MaxExposurePageSize",
            "ty": 4,
            "value": [
              0,
              2,
              0,
              0
            ],
            "docs": [
              " The maximum size of each `T::ExposurePage`.",
              "",
              " An `ExposurePage` is weakly bounded to a maximum of `MaxExposurePageSize`",
              " nominators.",
              "",
              " For older non-paged exposure, a reward payout was restricted to the top",
              " `MaxExposurePageSize` nominators. This is to limit the i/o cost for the",
              " nominator payout.",
              "",
              " Note: `MaxExposurePageSize` is used to bound `ClaimedRewards` and is unsafe to reduce",
              " without handling it in a migration."
            ]
          },
          {
            "name": "MaxUnlockingChunks",
            "ty": 4,
            "value": [
              32,
              0,
              0,
              0
            ],
            "docs": [
              " The maximum number of `unlocking` chunks a [`StakingLedger`] can",
              " have. Effectively determines how many unique eras a staker may be",
              " unbonding in.",
              "",
              " Note: `MaxUnlockingChunks` is used as the upper bound for the",
              " `BoundedVec` item `StakingLedger.unlocking`. Setting this value",
              " lower than the existing value can lead to inconsistencies in the",
              " `StakingLedger` and will need to be handled properly in a runtime",
              " migration. The test `reducing_max_unlocking_chunks_abrupt` shows",
              " this effect."
            ]
          }
        ],
        "error": {
          "ty": 610
        },
        "index": 7
      },
      {
        "name": "Offences",
        "storage": {
          "prefix": "Offences",
          "entries": [
            {
              "name": "Reports",
              "modifier": "Optional",
              "ty": {
                "Map": {
                  "hashers": [
                    "Twox64Concat"
                  ],
                  "key": 13,
                  "value": 611
                }
              },
              "default": [
                0
              ],
              "docs": [
                " The primary structure that holds all offence records keyed by report identifiers."
              ]
            },
            {
              "name": "ConcurrentReportsIndex",
              "modifier": "Default",
              "ty": {
                "Map": {
                  "hashers": [
                    "Twox64Concat",
                    "Twox64Concat"
                  ],
                  "key": 613,
                  "value": 103
                }
              },
              "default": [
                0
              ],
              "docs": [
                " A vector of reports of the same kind that happened at the same time slot."
              ]
            }
          ]
        },
        "calls": null,
        "event": {
          "ty": 47
        },
        "constants": [],
        "error": null,
        "index": 8
      },
      {
        "name": "Historical",
        "storage": {
          "prefix": "Historical",
          "entries": [
            {
              "name": "HistoricalSessions",
              "modifier": "Optional",
              "ty": {
                "Map": {
                  "hashers": [
                    "Twox64Concat"
                  ],
                  "key": 4,
                  "value": 450
                }
              },
              "default": [
                0
              ],
              "docs": [
                " Mapping from historical session indices to session-data root hash and validator count."
              ]
            },
            {
              "name": "StoredRange",
              "modifier": "Optional",
              "ty": {
                "Plain": 32
              },
              "default": [
                0
              ],
              "docs": [
                " The range of historical sessions we store. [first, last)"
              ]
            }
          ]
        },
        "calls": null,
        "event": null,
        "constants": [],
        "error": null,
        "index": 33
      },
      {
        "name": "Session",
        "storage": {
          "prefix": "Session",
          "entries": [
            {
              "name": "Validators",
              "modifier": "Default",
              "ty": {
                "Plain": 118
              },
              "default": [
                0
              ],
              "docs": [
                " The current set of validators."
              ]
            },
            {
              "name": "CurrentIndex",
              "modifier": "Default",
              "ty": {
                "Plain": 4
              },
              "default": [
                0,
                0,
                0,
                0
              ],
              "docs": [
                " Current index of the session."
              ]
            },
            {
              "name": "QueuedChanged",
              "modifier": "Default",
              "ty": {
                "Plain": 8
              },
              "default": [
                0
              ],
              "docs": [
                " True if the underlying economic identities or weighting behind the validators",
                " has changed in the queued validator set."
              ]
            },
            {
              "name": "QueuedKeys",
              "modifier": "Default",
              "ty": {
                "Plain": 614
              },
              "default": [
                0
              ],
              "docs": [
                " The queued keys for the next session. When the next session begins, these keys",
                " will be used to determine the validator's session keys."
              ]
            },
            {
              "name": "DisabledValidators",
              "modifier": "Default",
              "ty": {
                "Plain": 123
              },
              "default": [
                0
              ],
              "docs": [
                " Indices of disabled validators.",
                "",
                " The vec is always kept sorted so that we can find whether a given validator is",
                " disabled using binary search. It gets cleared when `on_session_ending` returns",
                " a new set of identities."
              ]
            },
            {
              "name": "NextKeys",
              "modifier": "Optional",
              "ty": {
                "Map": {
                  "hashers": [
                    "Twox64Concat"
                  ],
                  "key": 0,
                  "value": 136
                }
              },
              "default": [
                0
              ],
              "docs": [
                " The next session keys for a validator."
              ]
            },
            {
              "name": "KeyOwner",
              "modifier": "Optional",
              "ty": {
                "Map": {
                  "hashers": [
                    "Twox64Concat"
                  ],
                  "key": 616,
                  "value": 0
                }
              },
              "default": [
                0
              ],
              "docs": [
                " The owner of a key. The key is the `KeyTypeId` + the encoded key."
              ]
            }
          ]
        },
        "calls": {
          "ty": 135
        },
        "event": {
          "ty": 49
        },
        "constants": [],
        "error": {
          "ty": 618
        },
        "index": 9
      },
      {
        "name": "Grandpa",
        "storage": {
          "prefix": "Grandpa",
          "entries": [
            {
              "name": "State",
              "modifier": "Default",
              "ty": {
                "Plain": 619
              },
              "default": [
                0
              ],
              "docs": [
                " State of the current authority set."
              ]
            },
            {
              "name": "PendingChange",
              "modifier": "Optional",
              "ty": {
                "Plain": 620
              },
              "default": [
                0
              ],
              "docs": [
                " Pending change: (signaled at, scheduled change)."
              ]
            },
            {
              "name": "NextForced",
              "modifier": "Optional",
              "ty": {
                "Plain": 4
              },
              "default": [
                0
              ],
              "docs": [
                " next block number where we can force a change."
              ]
            },
            {
              "name": "Stalled",
              "modifier": "Optional",
              "ty": {
                "Plain": 32
              },
              "default": [
                0
              ],
              "docs": [
                " `true` if we are currently stalled."
              ]
            },
            {
              "name": "CurrentSetId",
              "modifier": "Default",
              "ty": {
                "Plain": 12
              },
              "default": [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The number of changes (both in terms of keys and underlying economic responsibilities)",
                " in the \"set\" of Grandpa validators from genesis."
              ]
            },
            {
              "name": "SetIdSession",
              "modifier": "Optional",
              "ty": {
                "Map": {
                  "hashers": [
                    "Twox64Concat"
                  ],
                  "key": 12,
                  "value": 4
                }
              },
              "default": [
                0
              ],
              "docs": [
                " A mapping from grandpa set ID to the index of the *most recent* session for which its",
                " members were responsible.",
                "",
                " This is only used for validating equivocation proofs. An equivocation proof must",
                " contains a key-ownership proof for a given session, therefore we need a way to tie",
                " together sessions and GRANDPA set ids, i.e. we need to validate that a validator",
                " was the owner of a given key on a given session, and what the active set ID was",
                " during that session.",
                "",
                " TWOX-NOTE: `SetId` is not under user control."
              ]
            },
            {
              "name": "Authorities",
              "modifier": "Default",
              "ty": {
                "Plain": 621
              },
              "default": [
                0
              ],
              "docs": [
                " The current list of authorities."
              ]
            }
          ]
        },
        "calls": {
          "ty": 142
        },
        "event": {
          "ty": 50
        },
        "constants": [
          {
            "name": "MaxAuthorities",
            "ty": 4,
            "value": [
              160,
              134,
              1,
              0
            ],
            "docs": [
              " Max Authorities in use"
            ]
          },
          {
            "name": "MaxNominators",
            "ty": 4,
            "value": [
              0,
              2,
              0,
              0
            ],
            "docs": [
              " The maximum number of nominators for each validator."
            ]
          },
          {
            "name": "MaxSetIdSessionEntries",
            "ty": 12,
            "value": [
              168,
              0,
              0,
              0,
              0,
              0,
              0,
              0
            ],
            "docs": [
              " The maximum number of entries to keep in the set id to session index mapping.",
              "",
              " Since the `SetIdSession` map is only used for validating equivocations this",
              " value should relate to the bonding duration of whatever staking system is",
              " being used (if any). If equivocation handling is not enabled then this value",
              " can be zero."
            ]
          }
        ],
        "error": {
          "ty": 622
        },
        "index": 11
      },
      {
        "name": "AuthorityDiscovery",
        "storage": {
          "prefix": "AuthorityDiscovery",
          "entries": [
            {
              "name": "Keys",
              "modifier": "Default",
              "ty": {
                "Plain": 623
              },
              "default": [
                0
              ],
              "docs": [
                " Keys of the current authority set."
              ]
            },
            {
              "name": "NextKeys",
              "modifier": "Default",
              "ty": {
                "Plain": 623
              },
              "default": [
                0
              ],
              "docs": [
                " Keys of the next authority set."
              ]
            }
          ]
        },
        "calls": null,
        "event": null,
        "constants": [],
        "error": null,
        "index": 13
      },
      {
        "name": "Treasury",
        "storage": {
          "prefix": "Treasury",
          "entries": [
            {
              "name": "ProposalCount",
              "modifier": "Default",
              "ty": {
                "Plain": 4
              },
              "default": [
                0,
                0,
                0,
                0
              ],
              "docs": [
                " Number of proposals that have been made."
              ]
            },
            {
              "name": "Proposals",
              "modifier": "Optional",
              "ty": {
                "Map": {
                  "hashers": [
                    "Twox64Concat"
                  ],
                  "key": 4,
                  "value": 625
                }
              },
              "default": [
                0
              ],
              "docs": [
                " Proposals that have been made."
              ]
            },
            {
              "name": "Deactivated",
              "modifier": "Default",
              "ty": {
                "Plain": 6
              },
              "default": [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The amount which has been reported as inactive to Currency."
              ]
            },
            {
              "name": "Approvals",
              "modifier": "Default",
              "ty": {
                "Plain": 626
              },
              "default": [
                0
              ],
              "docs": [
                " Proposal indices that have been approved but not yet awarded."
              ]
            },
            {
              "name": "SpendCount",
              "modifier": "Default",
              "ty": {
                "Plain": 4
              },
              "default": [
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The count of spends that have been made."
              ]
            },
            {
              "name": "Spends",
              "modifier": "Optional",
              "ty": {
                "Map": {
                  "hashers": [
                    "Twox64Concat"
                  ],
                  "key": 4,
                  "value": 627
                }
              },
              "default": [
                0
              ],
              "docs": [
                " Spends that have been approved and being processed."
              ]
            }
          ]
        },
        "calls": {
          "ty": 153
        },
        "event": {
          "ty": 54
        },
        "constants": [
          {
            "name": "SpendPeriod",
            "ty": 4,
            "value": [
              0,
              70,
              5,
              0
            ],
            "docs": [
              " Period between successive spends."
            ]
          },
          {
            "name": "Burn",
            "ty": 629,
            "value": [
              16,
              39,
              0,
              0
            ],
            "docs": [
              " Percentage of spare funds (if any) that are burnt per spend period."
            ]
          },
          {
            "name": "PalletId",
            "ty": 630,
            "value": [
              112,
              121,
              47,
              116,
              114,
              115,
              114,
              121
            ],
            "docs": [
              " The treasury's pallet id, used for deriving its sovereign account ID."
            ]
          },
          {
            "name": "MaxApprovals",
            "ty": 4,
            "value": [
              100,
              0,
              0,
              0
            ],
            "docs": [
              " The maximum number of approvals that can wait in the spending queue.",
              "",
              " NOTE: This parameter is also used within the Bounties Pallet extension if enabled."
            ]
          },
          {
            "name": "PayoutPeriod",
            "ty": 4,
            "value": [
              128,
              151,
              6,
              0
            ],
            "docs": [
              " The period during which an approved treasury spend has to be claimed."
            ]
          }
        ],
        "error": {
          "ty": 631
        },
        "index": 19
      },
      {
        "name": "ConvictionVoting",
        "storage": {
          "prefix": "ConvictionVoting",
          "entries": [
            {
              "name": "VotingFor",
              "modifier": "Default",
              "ty": {
                "Map": {
                  "hashers": [
                    "Twox64Concat",
                    "Twox64Concat"
                  ],
                  "key": 466,
                  "value": 632
                }
              },
              "default": [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " All voting for a particular voter in a particular voting class. We store the balance for the",
                " number of votes that we have recorded."
              ]
            },
            {
              "name": "ClassLocksFor",
              "modifier": "Default",
              "ty": {
                "Map": {
                  "hashers": [
                    "Twox64Concat"
                  ],
                  "key": 0,
                  "value": 640
                }
              },
              "default": [
                0
              ],
              "docs": [
                " The voting classes which have a non-zero lock requirement and the lock amounts which they",
                " require. The actual amount locked on behalf of this pallet should always be the maximum of",
                " this list."
              ]
            }
          ]
        },
        "calls": {
          "ty": 155
        },
        "event": {
          "ty": 89
        },
        "constants": [
          {
            "name": "MaxVotes",
            "ty": 4,
            "value": [
              0,
              2,
              0,
              0
            ],
            "docs": [
              " The maximum number of concurrent votes an account may have.",
              "",
              " Also used to compute weight, an overly large value can lead to extrinsics with large",
              " weight estimation: see `delegate` for instance."
            ]
          },
          {
            "name": "VoteLockingPeriod",
            "ty": 4,
            "value": [
              192,
              137,
              1,
              0
            ],
            "docs": [
              " The minimum period of vote locking.",
              "",
              " It should be no shorter than enactment period to ensure that in the case of an approval,",
              " those successful voters are locked into the consequences that their votes entail."
            ]
          }
        ],
        "error": {
          "ty": 643
        },
        "index": 20
      },
      {
        "name": "Referenda",
        "storage": {
          "prefix": "Referenda",
          "entries": [
            {
              "name": "ReferendumCount",
              "modifier": "Default",
              "ty": {
                "Plain": 4
              },
              "default": [
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The next free referendum index, aka the number of referenda started so far."
              ]
            },
            {
              "name": "ReferendumInfoFor",
              "modifier": "Optional",
              "ty": {
                "Map": {
                  "hashers": [
                    "Blake2_128Concat"
                  ],
                  "key": 4,
                  "value": 644
                }
              },
              "default": [
                0
              ],
              "docs": [
                " Information concerning any given referendum."
              ]
            },
            {
              "name": "TrackQueue",
              "modifier": "Default",
              "ty": {
                "Map": {
                  "hashers": [
                    "Twox64Concat"
                  ],
                  "key": 93,
                  "value": 652
                }
              },
              "default": [
                0
              ],
              "docs": [
                " The sorted list of referenda ready to be decided but not yet being decided, ordered by",
                " conviction-weighted approvals.",
                "",
                " This should be empty if `DecidingCount` is less than `TrackInfo::max_deciding`."
              ]
            },
            {
              "name": "DecidingCount",
              "modifier": "Default",
              "ty": {
                "Map": {
                  "hashers": [
                    "Twox64Concat"
                  ],
                  "key": 93,
                  "value": 4
                }
              },
              "default": [
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The number of referenda being decided currently."
              ]
            },
            {
              "name": "MetadataOf",
              "modifier": "Optional",
              "ty": {
                "Map": {
                  "hashers": [
                    "Blake2_128Concat"
                  ],
                  "key": 4,
                  "value": 13
                }
              },
              "default": [
                0
              ],
              "docs": [
                " The metadata is a general information concerning the referendum.",
                " The `Hash` refers to the preimage of the `Preimages` provider which can be a JSON",
                " dump or IPFS hash of a JSON file.",
                "",
                " Consider a garbage collection for a metadata of finished referendums to `unrequest` (remove)",
                " large preimages."
              ]
            }
          ]
        },
        "calls": {
          "ty": 158
        },
        "event": {
          "ty": 92
        },
        "constants": [
          {
            "name": "SubmissionDeposit",
            "ty": 6,
            "value": [
              0,
              228,
              11,
              84,
              2,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0
            ],
            "docs": [
              " The minimum amount to be used as a deposit for a public referendum proposal."
            ]
          },
          {
            "name": "MaxQueued",
            "ty": 4,
            "value": [
              100,
              0,
              0,
              0
            ],
            "docs": [
              " Maximum size of the referendum queue for a single track."
            ]
          },
          {
            "name": "UndecidingTimeout",
            "ty": 4,
            "value": [
              128,
              19,
              3,
              0
            ],
            "docs": [
              " The number of blocks after submission that a referendum must begin being decided by.",
              " Once this passes, then anyone may cancel the referendum."
            ]
          },
          {
            "name": "AlarmInterval",
            "ty": 4,
            "value": [
              1,
              0,
              0,
              0
            ],
            "docs": [
              " Quantization level for the referendum wakeup scheduler. A higher number will result in",
              " fewer storage reads/writes needed for smaller voters, but also result in delays to the",
              " automatic referendum status changes. Explicit servicing instructions are unaffected."
            ]
          },
          {
            "name": "Tracks",
            "ty": 655,
            "value": [
              64,
              0,
              0,
              16,
              114,
              111,
              111,
              116,
              1,
              0,
              0,
              0,
              0,
              128,
              198,
              164,
              126,
              141,
              3,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              176,
              4,
              0,
              0,
              0,
              39,
              6,
              0,
              64,
              56,
              0,
              0,
              64,
              56,
              0,
              0,
              2,
              144,
              215,
              62,
              13,
              0,
              0,
              0,
              0,
              87,
              67,
              222,
              19,
              0,
              0,
              0,
              0,
              84,
              67,
              222,
              19,
              0,
              0,
              0,
              0,
              0,
              0,
              202,
              154,
              59,
              0,
              0,
              0,
              0,
              0,
              101,
              205,
              29,
              1,
              0,
              72,
              119,
              104,
              105,
              116,
              101,
              108,
              105,
              115,
              116,
              101,
              100,
              95,
              99,
              97,
              108,
              108,
              101,
              114,
              100,
              0,
              0,
              0,
              0,
              64,
              122,
              16,
              243,
              90,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              44,
              1,
              0,
              0,
              0,
              39,
              6,
              0,
              100,
              0,
              0,
              0,
              100,
              0,
              0,
              0,
              2,
              236,
              151,
              37,
              16,
              0,
              0,
              0,
              0,
              123,
              87,
              60,
              23,
              0,
              0,
              0,
              0,
              66,
              57,
              47,
              18,
              0,
              0,
              0,
              0,
              2,
              14,
              0,
              132,
              0,
              0,
              0,
              0,
              0,
              214,
              230,
              31,
              1,
              0,
              0,
              0,
              0,
              57,
              98,
              121,
              2,
              0,
              0,
              0,
              0,
              2,
              0,
              60,
              119,
              105,
              115,
              104,
              95,
              102,
              111,
              114,
              95,
              99,
              104,
              97,
              110,
              103,
              101,
              10,
              0,
              0,
              0,
              0,
              128,
              244,
              32,
              230,
              181,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              176,
              4,
              0,
              0,
              0,
              39,
              6,
              0,
              64,
              56,
              0,
              0,
              100,
              0,
              0,
              0,
              2,
              144,
              215,
              62,
              13,
              0,
              0,
              0,
              0,
              87,
              67,
              222,
              19,
              0,
              0,
              0,
              0,
              84,
              67,
              222,
              19,
              0,
              0,
              0,
              0,
              0,
              0,
              202,
              154,
              59,
              0,
              0,
              0,
              0,
              0,
              101,
              205,
              29,
              10,
              0,
              52,
              115,
              116,
              97,
              107,
              105,
              110,
              103,
              95,
              97,
              100,
              109,
              105,
              110,
              10,
              0,
              0,
              0,
              0,
              32,
              61,
              136,
              121,
              45,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              176,
              4,
              0,
              0,
              0,
              39,
              6,
              0,
              8,
              7,
              0,
              0,
              100,
              0,
              0,
              0,
              0,
              201,
              67,
              48,
              36,
              0,
              101,
              205,
              29,
              0,
              202,
              154,
              59,
              2,
              93,
              111,
              120,
              0,
              0,
              0,
              0,
              0,
              232,
              46,
              237,
              0,
              0,
              0,
              0,
              0,
              140,
              104,
              137,
              255,
              255,
              255,
              255,
              255,
              11,
              0,
              36,
              116,
              114,
              101,
              97,
              115,
              117,
              114,
              101,
              114,
              10,
              0,
              0,
              0,
              0,
              160,
              114,
              78,
              24,
              9,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              176,
              4,
              0,
              0,
              0,
              39,
              6,
              0,
              192,
              137,
              1,
              0,
              64,
              56,
              0,
              0,
              2,
              144,
              215,
              62,
              13,
              0,
              0,
              0,
              0,
              87,
              67,
              222,
              19,
              0,
              0,
              0,
              0,
              84,
              67,
              222,
              19,
              0,
              0,
              0,
              0,
              0,
              0,
              202,
              154,
              59,
              0,
              0,
              0,
              0,
              0,
              101,
              205,
              29,
              12,
              0,
              44,
              108,
              101,
              97,
              115,
              101,
              95,
              97,
              100,
              109,
              105,
              110,
              10,
              0,
              0,
              0,
              0,
              32,
              61,
              136,
              121,
              45,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              176,
              4,
              0,
              0,
              0,
              39,
              6,
              0,
              8,
              7,
              0,
              0,
              100,
              0,
              0,
              0,
              0,
              201,
              67,
              48,
              36,
              0,
              101,
              205,
              29,
              0,
              202,
              154,
              59,
              2,
              93,
              111,
              120,
              0,
              0,
              0,
              0,
              0,
              232,
              46,
              237,
              0,
              0,
              0,
              0,
              0,
              140,
              104,
              137,
              255,
              255,
              255,
              255,
              255,
              13,
              0,
              64,
              102,
              101,
              108,
              108,
              111,
              119,
              115,
              104,
              105,
              112,
              95,
              97,
              100,
              109,
              105,
              110,
              10,
              0,
              0,
              0,
              0,
              32,
              61,
              136,
              121,
              45,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              176,
              4,
              0,
              0,
              0,
              39,
              6,
              0,
              8,
              7,
              0,
              0,
              100,
              0,
              0,
              0,
              0,
              201,
              67,
              48,
              36,
              0,
              101,
              205,
              29,
              0,
              202,
              154,
              59,
              2,
              93,
              111,
              120,
              0,
              0,
              0,
              0,
              0,
              232,
              46,
              237,
              0,
              0,
              0,
              0,
              0,
              140,
              104,
              137,
              255,
              255,
              255,
              255,
              255,
              14,
              0,
              52,
              103,
              101,
              110,
              101,
              114,
              97,
              108,
              95,
              97,
              100,
              109,
              105,
              110,
              10,
              0,
              0,
              0,
              0,
              32,
              61,
              136,
              121,
              45,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              176,
              4,
              0,
              0,
              0,
              39,
              6,
              0,
              8,
              7,
              0,
              0,
              100,
              0,
              0,
              0,
              2,
              144,
              215,
              62,
              13,
              0,
              0,
              0,
              0,
              87,
              67,
              222,
              19,
              0,
              0,
              0,
              0,
              84,
              67,
              222,
              19,
              0,
              0,
              0,
              0,
              2,
              89,
              162,
              244,
              2,
              0,
              0,
              0,
              0,
              163,
              41,
              107,
              5,
              0,
              0,
              0,
              0,
              46,
              107,
              74,
              253,
              255,
              255,
              255,
              255,
              15,
              0,
              52,
              97,
              117,
              99,
              116,
              105,
              111,
              110,
              95,
              97,
              100,
              109,
              105,
              110,
              10,
              0,
              0,
              0,
              0,
              32,
              61,
              136,
              121,
              45,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              176,
              4,
              0,
              0,
              0,
              39,
              6,
              0,
              8,
              7,
              0,
              0,
              100,
              0,
              0,
              0,
              2,
              144,
              215,
              62,
              13,
              0,
              0,
              0,
              0,
              87,
              67,
              222,
              19,
              0,
              0,
              0,
              0,
              84,
              67,
              222,
              19,
              0,
              0,
              0,
              0,
              2,
              89,
              162,
              244,
              2,
              0,
              0,
              0,
              0,
              163,
              41,
              107,
              5,
              0,
              0,
              0,
              0,
              46,
              107,
              74,
              253,
              255,
              255,
              255,
              255,
              20,
              0,
              80,
              114,
              101,
              102,
              101,
              114,
              101,
              110,
              100,
              117,
              109,
              95,
              99,
              97,
              110,
              99,
              101,
              108,
              108,
              101,
              114,
              232,
              3,
              0,
              0,
              0,
              64,
              122,
              16,
              243,
              90,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              176,
              4,
              0,
              0,
              192,
              137,
              1,
              0,
              8,
              7,
              0,
              0,
              100,
              0,
              0,
              0,
              0,
              201,
              67,
              48,
              36,
              0,
              101,
              205,
              29,
              0,
              202,
              154,
              59,
              2,
              93,
              111,
              120,
              0,
              0,
              0,
              0,
              0,
              232,
              46,
              237,
              0,
              0,
              0,
              0,
              0,
              140,
              104,
              137,
              255,
              255,
              255,
              255,
              255,
              21,
              0,
              68,
              114,
              101,
              102,
              101,
              114,
              101,
              110,
              100,
              117,
              109,
              95,
              107,
              105,
              108,
              108,
              101,
              114,
              232,
              3,
              0,
              0,
              0,
              64,
              99,
              82,
              191,
              198,
              1,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              176,
              4,
              0,
              0,
              0,
              39,
              6,
              0,
              8,
              7,
              0,
              0,
              100,
              0,
              0,
              0,
              0,
              201,
              67,
              48,
              36,
              0,
              101,
              205,
              29,
              0,
              202,
              154,
              59,
              2,
              93,
              111,
              120,
              0,
              0,
              0,
              0,
              0,
              232,
              46,
              237,
              0,
              0,
              0,
              0,
              0,
              140,
              104,
              137,
              255,
              255,
              255,
              255,
              255,
              30,
              0,
              48,
              115,
              109,
              97,
              108,
              108,
              95,
              116,
              105,
              112,
              112,
              101,
              114,
              200,
              0,
              0,
              0,
              0,
              228,
              11,
              84,
              2,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              10,
              0,
              0,
              0,
              192,
              137,
              1,
              0,
              100,
              0,
              0,
              0,
              10,
              0,
              0,
              0,
              0,
              73,
              145,
              73,
              21,
              0,
              101,
              205,
              29,
              0,
              202,
              154,
              59,
              2,
              249,
              186,
              24,
              0,
              0,
              0,
              0,
              0,
              42,
              77,
              49,
              0,
              0,
              0,
              0,
              0,
              107,
              89,
              231,
              255,
              255,
              255,
              255,
              255,
              31,
              0,
              40,
              98,
              105,
              103,
              95,
              116,
              105,
              112,
              112,
              101,
              114,
              100,
              0,
              0,
              0,
              0,
              232,
              118,
              72,
              23,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              100,
              0,
              0,
              0,
              192,
              137,
              1,
              0,
              88,
              2,
              0,
              0,
              100,
              0,
              0,
              0,
              0,
              73,
              145,
              73,
              21,
              0,
              101,
              205,
              29,
              0,
              202,
              154,
              59,
              2,
              105,
              79,
              63,
              0,
              0,
              0,
              0,
              0,
              53,
              150,
              125,
              0,
              0,
              0,
              0,
              0,
              229,
              52,
              193,
              255,
              255,
              255,
              255,
              255,
              32,
              0,
              52,
              115,
              109,
              97,
              108,
              108,
              95,
              115,
              112,
              101,
              110,
              100,
              101,
              114,
              50,
              0,
              0,
              0,
              0,
              16,
              165,
              212,
              232,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              96,
              9,
              0,
              0,
              0,
              39,
              6,
              0,
              128,
              112,
              0,
              0,
              64,
              56,
              0,
              0,
              0,
              201,
              67,
              48,
              36,
              0,
              101,
              205,
              29,
              0,
              202,
              154,
              59,
              2,
              93,
              111,
              120,
              0,
              0,
              0,
              0,
              0,
              232,
              46,
              237,
              0,
              0,
              0,
              0,
              0,
              140,
              104,
              137,
              255,
              255,
              255,
              255,
              255,
              33,
              0,
              56,
              109,
              101,
              100,
              105,
              117,
              109,
              95,
              115,
              112,
              101,
              110,
              100,
              101,
              114,
              50,
              0,
              0,
              0,
              0,
              32,
              74,
              169,
              209,
              1,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              96,
              9,
              0,
              0,
              0,
              39,
              6,
              0,
              0,
              225,
              0,
              0,
              64,
              56,
              0,
              0,
              0,
              91,
              1,
              246,
              48,
              0,
              101,
              205,
              29,
              0,
              202,
              154,
              59,
              2,
              17,
              97,
              219,
              0,
              0,
              0,
              0,
              0,
              191,
              209,
              170,
              1,
              0,
              0,
              0,
              0,
              32,
              151,
              42,
              255,
              255,
              255,
              255,
              255,
              34,
              0,
              44,
              98,
              105,
              103,
              95,
              115,
              112,
              101,
              110,
              100,
              101,
              114,
              50,
              0,
              0,
              0,
              0,
              64,
              148,
              82,
              163,
              3,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              96,
              9,
              0,
              0,
              0,
              39,
              6,
              0,
              192,
              137,
              1,
              0,
              64,
              56,
              0,
              0,
              0,
              0,
              202,
              154,
              59,
              0,
              101,
              205,
              29,
              0,
              202,
              154,
              59,
              2,
              65,
              60,
              176,
              1,
              0,
              0,
              0,
              0,
              117,
              93,
              52,
              3,
              0,
              0,
              0,
              0,
              69,
              209,
              101,
              254,
              255,
              255,
              255,
              255
            ],
            "docs": [
              " Information concerning the different referendum tracks."
            ]
          }
        ],
        "error": {
          "ty": 661
        },
        "index": 21
      },
      {
        "name": "Origins",
        "storage": null,
        "calls": null,
        "event": null,
        "constants": [],
        "error": null,
        "index": 22
      },
      {
        "name": "Whitelist",
        "storage": {
          "prefix": "Whitelist",
          "entries": [
            {
              "name": "WhitelistedCall",
              "modifier": "Optional",
              "ty": {
                "Map": {
                  "hashers": [
                    "Twox64Concat"
                  ],
                  "key": 13,
                  "value": 35
                }
              },
              "default": [
                0
              ],
              "docs": []
            }
          ]
        },
        "calls": {
          "ty": 168
        },
        "event": {
          "ty": 476
        },
        "constants": [],
        "error": {
          "ty": 662
        },
        "index": 23
      },
      {
        "name": "Claims",
        "storage": {
          "prefix": "Claims",
          "entries": [
            {
              "name": "Claims",
              "modifier": "Optional",
              "ty": {
                "Map": {
                  "hashers": [
                    "Identity"
                  ],
                  "key": 172,
                  "value": 6
                }
              },
              "default": [
                0
              ],
              "docs": []
            },
            {
              "name": "Total",
              "modifier": "Default",
              "ty": {
                "Plain": 6
              },
              "default": [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": []
            },
            {
              "name": "Vesting",
              "modifier": "Optional",
              "ty": {
                "Map": {
                  "hashers": [
                    "Identity"
                  ],
                  "key": 172,
                  "value": 174
                }
              },
              "default": [
                0
              ],
              "docs": [
                " Vesting schedule for a claim.",
                " First balance is the total amount that should be held for vesting.",
                " Second balance is how much should be unlocked per block.",
                " The block number is when the vesting should start."
              ]
            },
            {
              "name": "Signing",
              "modifier": "Optional",
              "ty": {
                "Map": {
                  "hashers": [
                    "Identity"
                  ],
                  "key": 172,
                  "value": 176
                }
              },
              "default": [
                0
              ],
              "docs": [
                " The statement kind that must be signed, if any."
              ]
            },
            {
              "name": "Preclaims",
              "modifier": "Optional",
              "ty": {
                "Map": {
                  "hashers": [
                    "Identity"
                  ],
                  "key": 0,
                  "value": 172
                }
              },
              "default": [
                0
              ],
              "docs": [
                " Pre-claimed Ethereum accounts, by the Account ID that they are claimed to."
              ]
            }
          ]
        },
        "calls": {
          "ty": 169
        },
        "event": {
          "ty": 481
        },
        "constants": [
          {
            "name": "Prefix",
            "ty": 14,
            "value": [
              132,
              80,
              97,
              121,
              32,
              68,
              79,
              84,
              115,
              32,
              116,
              111,
              32,
              116,
              104,
              101,
              32,
              80,
              111,
              108,
              107,
              97,
              100,
              111,
              116,
              32,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              58
            ],
            "docs": []
          }
        ],
        "error": {
          "ty": 663
        },
        "index": 24
      },
      {
        "name": "Vesting",
        "storage": {
          "prefix": "Vesting",
          "entries": [
            {
              "name": "Vesting",
              "modifier": "Optional",
              "ty": {
                "Map": {
                  "hashers": [
                    "Blake2_128Concat"
                  ],
                  "key": 0,
                  "value": 664
                }
              },
              "default": [
                0
              ],
              "docs": [
                " Information regarding the vesting of a given account."
              ]
            },
            {
              "name": "StorageVersion",
              "modifier": "Default",
              "ty": {
                "Plain": 666
              },
              "default": [
                0
              ],
              "docs": [
                " Storage version of the pallet.",
                "",
                " New networks start with latest version, as determined by the genesis build."
              ]
            }
          ]
        },
        "calls": {
          "ty": 177
        },
        "event": {
          "ty": 482
        },
        "constants": [
          {
            "name": "MinVestedTransfer",
            "ty": 6,
            "value": [
              0,
              228,
              11,
              84,
              2,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0
            ],
            "docs": [
              " The minimum amount transferred to call `vested_transfer`."
            ]
          },
          {
            "name": "MaxVestingSchedules",
            "ty": 4,
            "value": [
              28,
              0,
              0,
              0
            ],
            "docs": []
          }
        ],
        "error": {
          "ty": 667
        },
        "index": 25
      },
      {
        "name": "Utility",
        "storage": null,
        "calls": {
          "ty": 179
        },
        "event": {
          "ty": 483
        },
        "constants": [
          {
            "name": "batched_calls_limit",
            "ty": 4,
            "value": [
              85,
              21,
              0,
              0
            ],
            "docs": [
              " The limit on the number of batched calls."
            ]
          }
        ],
        "error": {
          "ty": 668
        },
        "index": 26
      },
      {
        "name": "Proxy",
        "storage": {
          "prefix": "Proxy",
          "entries": [
            {
              "name": "Proxies",
              "modifier": "Default",
              "ty": {
                "Map": {
                  "hashers": [
                    "Twox64Concat"
                  ],
                  "key": 0,
                  "value": 669
                }
              },
              "default": [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The set of account proxies. Maps the account which has delegated to the accounts",
                " which are being delegated to, together with the amount held on deposit."
              ]
            },
            {
              "name": "Announcements",
              "modifier": "Default",
              "ty": {
                "Map": {
                  "hashers": [
                    "Twox64Concat"
                  ],
                  "key": 0,
                  "value": 673
                }
              },
              "default": [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The announcements made by the proxy (key)."
              ]
            }
          ]
        },
        "calls": {
          "ty": 181
        },
        "event": {
          "ty": 484
        },
        "constants": [
          {
            "name": "ProxyDepositBase",
            "ty": 6,
            "value": [
              0,
              132,
              178,
              149,
              46,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0
            ],
            "docs": [
              " The base amount of currency needed to reserve for creating a proxy.",
              "",
              " This is held for an additional storage item whose value size is",
              " `sizeof(Balance)` bytes and whose key size is `sizeof(AccountId)` bytes."
            ]
          },
          {
            "name": "ProxyDepositFactor",
            "ty": 6,
            "value": [
              128,
              102,
              171,
              19,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0
            ],
            "docs": [
              " The amount of currency needed per proxy added.",
              "",
              " This is held for adding 32 bytes plus an instance of `ProxyType` more into a",
              " pre-existing storage value. Thus, when configuring `ProxyDepositFactor` one should take",
              " into account `32 + proxy_type.encode().len()` bytes of data."
            ]
          },
          {
            "name": "MaxProxies",
            "ty": 4,
            "value": [
              32,
              0,
              0,
              0
            ],
            "docs": [
              " The maximum amount of proxies allowed for a single account."
            ]
          },
          {
            "name": "MaxPending",
            "ty": 4,
            "value": [
              32,
              0,
              0,
              0
            ],
            "docs": [
              " The maximum amount of time-delayed announcements that are allowed to be pending."
            ]
          },
          {
            "name": "AnnouncementDepositBase",
            "ty": 6,
            "value": [
              0,
              132,
              178,
              149,
              46,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0
            ],
            "docs": [
              " The base amount of currency needed to reserve for creating an announcement.",
              "",
              " This is held when a new storage item holding a `Balance` is created (typically 16",
              " bytes)."
            ]
          },
          {
            "name": "AnnouncementDepositFactor",
            "ty": 6,
            "value": [
              0,
              205,
              86,
              39,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0
            ],
            "docs": [
              " The amount of currency needed per announcement made.",
              "",
              " This is held for adding an `AccountId`, `Hash` and `BlockNumber` (typically 68 bytes)",
              " into a pre-existing storage value."
            ]
          }
        ],
        "error": {
          "ty": 677
        },
        "index": 29
      },
      {
        "name": "Multisig",
        "storage": {
          "prefix": "Multisig",
          "entries": [
            {
              "name": "Multisigs",
              "modifier": "Optional",
              "ty": {
                "Map": {
                  "hashers": [
                    "Twox64Concat",
                    "Blake2_128Concat"
                  ],
                  "key": 443,
                  "value": 678
                }
              },
              "default": [
                0
              ],
              "docs": [
                " The set of open multisig operations."
              ]
            }
          ]
        },
        "calls": {
          "ty": 184
        },
        "event": {
          "ty": 485
        },
        "constants": [
          {
            "name": "DepositBase",
            "ty": 6,
            "value": [
              0,
              140,
              97,
              197,
              46,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0
            ],
            "docs": [
              " The base amount of currency needed to reserve for creating a multisig execution or to",
              " store a dispatch call for later.",
              "",
              " This is held for an additional storage item whose value size is",
              " `4 + sizeof((BlockNumber, Balance, AccountId))` bytes and whose key size is",
              " `32 + sizeof(AccountId)` bytes."
            ]
          },
          {
            "name": "DepositFactor",
            "ty": 6,
            "value": [
              0,
              208,
              18,
              19,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0
            ],
            "docs": [
              " The amount of currency needed per unit threshold when creating a multisig execution.",
              "",
              " This is held for adding 32 bytes more into a pre-existing storage value."
            ]
          },
          {
            "name": "MaxSignatories",
            "ty": 4,
            "value": [
              100,
              0,
              0,
              0
            ],
            "docs": [
              " The maximum amount of signatories allowed in the multisig."
            ]
          }
        ],
        "error": {
          "ty": 680
        },
        "index": 30
      },
      {
        "name": "Bounties",
        "storage": {
          "prefix": "Bounties",
          "entries": [
            {
              "name": "BountyCount",
              "modifier": "Default",
              "ty": {
                "Plain": 4
              },
              "default": [
                0,
                0,
                0,
                0
              ],
              "docs": [
                " Number of bounty proposals that have been made."
              ]
            },
            {
              "name": "Bounties",
              "modifier": "Optional",
              "ty": {
                "Map": {
                  "hashers": [
                    "Twox64Concat"
                  ],
                  "key": 4,
                  "value": 681
                }
              },
              "default": [
                0
              ],
              "docs": [
                " Bounties that have been made."
              ]
            },
            {
              "name": "BountyDescriptions",
              "modifier": "Optional",
              "ty": {
                "Map": {
                  "hashers": [
                    "Twox64Concat"
                  ],
                  "key": 4,
                  "value": 683
                }
              },
              "default": [
                0
              ],
              "docs": [
                " The description of each bounty."
              ]
            },
            {
              "name": "BountyApprovals",
              "modifier": "Default",
              "ty": {
                "Plain": 626
              },
              "default": [
                0
              ],
              "docs": [
                " Bounty indices that have been approved but not yet funded."
              ]
            }
          ]
        },
        "calls": {
          "ty": 187
        },
        "event": {
          "ty": 486
        },
        "constants": [
          {
            "name": "BountyDepositBase",
            "ty": 6,
            "value": [
              0,
              228,
              11,
              84,
              2,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0
            ],
            "docs": [
              " The amount held on deposit for placing a bounty proposal."
            ]
          },
          {
            "name": "BountyDepositPayoutDelay",
            "ty": 4,
            "value": [
              0,
              0,
              0,
              0
            ],
            "docs": [
              " The delay period for which a bounty beneficiary need to wait before claim the payout."
            ]
          },
          {
            "name": "BountyUpdatePeriod",
            "ty": 4,
            "value": [
              128,
              198,
              19,
              0
            ],
            "docs": [
              " Bounty duration in blocks."
            ]
          },
          {
            "name": "CuratorDepositMultiplier",
            "ty": 629,
            "value": [
              32,
              161,
              7,
              0
            ],
            "docs": [
              " The curator deposit is calculated as a percentage of the curator fee.",
              "",
              " This deposit has optional upper and lower bounds with `CuratorDepositMax` and",
              " `CuratorDepositMin`."
            ]
          },
          {
            "name": "CuratorDepositMax",
            "ty": 130,
            "value": [
              1,
              0,
              32,
              74,
              169,
              209,
              1,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0
            ],
            "docs": [
              " Maximum amount of funds that should be placed in a deposit for making a proposal."
            ]
          },
          {
            "name": "CuratorDepositMin",
            "ty": 130,
            "value": [
              1,
              0,
              232,
              118,
              72,
              23,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0
            ],
            "docs": [
              " Minimum amount of funds that should be placed in a deposit for making a proposal."
            ]
          },
          {
            "name": "BountyValueMinimum",
            "ty": 6,
            "value": [
              0,
              232,
              118,
              72,
              23,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0
            ],
            "docs": [
              " Minimum value for a bounty."
            ]
          },
          {
            "name": "DataDepositPerByte",
            "ty": 6,
            "value": [
              0,
              225,
              245,
              5,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0
            ],
            "docs": [
              " The amount held on deposit per byte within the tip report reason or bounty description."
            ]
          },
          {
            "name": "MaximumReasonLength",
            "ty": 4,
            "value": [
              0,
              64,
              0,
              0
            ],
            "docs": [
              " Maximum acceptable reason length.",
              "",
              " Benchmarks depend on this value, be sure to update weights file when changing this value"
            ]
          }
        ],
        "error": {
          "ty": 684
        },
        "index": 34
      },
      {
        "name": "ChildBounties",
        "storage": {
          "prefix": "ChildBounties",
          "entries": [
            {
              "name": "ChildBountyCount",
              "modifier": "Default",
              "ty": {
                "Plain": 4
              },
              "default": [
                0,
                0,
                0,
                0
              ],
              "docs": [
                " Number of total child bounties."
              ]
            },
            {
              "name": "ParentChildBounties",
              "modifier": "Default",
              "ty": {
                "Map": {
                  "hashers": [
                    "Twox64Concat"
                  ],
                  "key": 4,
                  "value": 4
                }
              },
              "default": [
                0,
                0,
                0,
                0
              ],
              "docs": [
                " Number of child bounties per parent bounty.",
                " Map of parent bounty index to number of child bounties."
              ]
            },
            {
              "name": "ChildBounties",
              "modifier": "Optional",
              "ty": {
                "Map": {
                  "hashers": [
                    "Twox64Concat",
                    "Twox64Concat"
                  ],
                  "key": 32,
                  "value": 685
                }
              },
              "default": [
                0
              ],
              "docs": [
                " Child bounties that have been added."
              ]
            },
            {
              "name": "ChildBountyDescriptions",
              "modifier": "Optional",
              "ty": {
                "Map": {
                  "hashers": [
                    "Twox64Concat"
                  ],
                  "key": 4,
                  "value": 683
                }
              },
              "default": [
                0
              ],
              "docs": [
                " The description of each child-bounty."
              ]
            },
            {
              "name": "ChildrenCuratorFees",
              "modifier": "Default",
              "ty": {
                "Map": {
                  "hashers": [
                    "Twox64Concat"
                  ],
                  "key": 4,
                  "value": 6
                }
              },
              "default": [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The cumulative child-bounty curator fee for each parent bounty."
              ]
            }
          ]
        },
        "calls": {
          "ty": 188
        },
        "event": {
          "ty": 487
        },
        "constants": [
          {
            "name": "MaxActiveChildBountyCount",
            "ty": 4,
            "value": [
              100,
              0,
              0,
              0
            ],
            "docs": [
              " Maximum number of child bounties that can be added to a parent bounty."
            ]
          },
          {
            "name": "ChildBountyValueMinimum",
            "ty": 6,
            "value": [
              0,
              228,
              11,
              84,
              2,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0
            ],
            "docs": [
              " Minimum value for a child-bounty."
            ]
          }
        ],
        "error": {
          "ty": 687
        },
        "index": 38
      },
      {
        "name": "ElectionProviderMultiPhase",
        "storage": {
          "prefix": "ElectionProviderMultiPhase",
          "entries": [
            {
              "name": "Round",
              "modifier": "Default",
              "ty": {
                "Plain": 4
              },
              "default": [
                1,
                0,
                0,
                0
              ],
              "docs": [
                " Internal counter for the number of rounds.",
                "",
                " This is useful for de-duplication of transactions submitted to the pool, and general",
                " diagnostics of the pallet.",
                "",
                " This is merely incremented once per every time that an upstream `elect` is called."
              ]
            },
            {
              "name": "CurrentPhase",
              "modifier": "Default",
              "ty": {
                "Plain": 490
              },
              "default": [
                0
              ],
              "docs": [
                " Current phase."
              ]
            },
            {
              "name": "QueuedSolution",
              "modifier": "Optional",
              "ty": {
                "Plain": 688
              },
              "default": [
                0
              ],
              "docs": [
                " Current best solution, signed or unsigned, queued to be returned upon `elect`.",
                "",
                " Always sorted by score."
              ]
            },
            {
              "name": "Snapshot",
              "modifier": "Optional",
              "ty": {
                "Plain": 690
              },
              "default": [
                0
              ],
              "docs": [
                " Snapshot data of the round.",
                "",
                " This is created at the beginning of the signed phase and cleared upon calling `elect`.",
                " Note: This storage type must only be mutated through [`SnapshotWrapper`]."
              ]
            },
            {
              "name": "DesiredTargets",
              "modifier": "Optional",
              "ty": {
                "Plain": 4
              },
              "default": [
                0
              ],
              "docs": [
                " Desired number of targets to elect for this round.",
                "",
                " Only exists when [`Snapshot`] is present.",
                " Note: This storage type must only be mutated through [`SnapshotWrapper`]."
              ]
            },
            {
              "name": "SnapshotMetadata",
              "modifier": "Optional",
              "ty": {
                "Plain": 243
              },
              "default": [
                0
              ],
              "docs": [
                " The metadata of the [`RoundSnapshot`]",
                "",
                " Only exists when [`Snapshot`] is present.",
                " Note: This storage type must only be mutated through [`SnapshotWrapper`]."
              ]
            },
            {
              "name": "SignedSubmissionNextIndex",
              "modifier": "Default",
              "ty": {
                "Plain": 4
              },
              "default": [
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The next index to be assigned to an incoming signed submission.",
                "",
                " Every accepted submission is assigned a unique index; that index is bound to that particular",
                " submission for the duration of the election. On election finalization, the next index is",
                " reset to 0.",
                "",
                " We can't just use `SignedSubmissionIndices.len()`, because that's a bounded set; past its",
                " capacity, it will simply saturate. We can't just iterate over `SignedSubmissionsMap`,",
                " because iteration is slow. Instead, we store the value here."
              ]
            },
            {
              "name": "SignedSubmissionIndices",
              "modifier": "Default",
              "ty": {
                "Plain": 693
              },
              "default": [
                0
              ],
              "docs": [
                " A sorted, bounded vector of `(score, block_number, index)`, where each `index` points to a",
                " value in `SignedSubmissions`.",
                "",
                " We never need to process more than a single signed submission at a time. Signed submissions",
                " can be quite large, so we're willing to pay the cost of multiple database accesses to access",
                " them one at a time instead of reading and decoding all of them at once."
              ]
            },
            {
              "name": "SignedSubmissionsMap",
              "modifier": "Optional",
              "ty": {
                "Map": {
                  "hashers": [
                    "Twox64Concat"
                  ],
                  "key": 4,
                  "value": 696
                }
              },
              "default": [
                0
              ],
              "docs": [
                " Unchecked, signed solutions.",
                "",
                " Together with `SubmissionIndices`, this stores a bounded set of `SignedSubmissions` while",
                " allowing us to keep only a single one in memory at a time.",
                "",
                " Twox note: the key of the map is an auto-incrementing index which users cannot inspect or",
                " affect; we shouldn't need a cryptographically secure hasher."
              ]
            },
            {
              "name": "MinimumUntrustedScore",
              "modifier": "Optional",
              "ty": {
                "Plain": 242
              },
              "default": [
                0
              ],
              "docs": [
                " The minimum score that each 'untrusted' solution must attain in order to be considered",
                " feasible.",
                "",
                " Can be set via `set_minimum_untrusted_score`."
              ]
            }
          ]
        },
        "calls": {
          "ty": 189
        },
        "event": {
          "ty": 488
        },
        "constants": [
          {
            "name": "BetterSignedThreshold",
            "ty": 43,
            "value": [
              0,
              0,
              0,
              0
            ],
            "docs": [
              " The minimum amount of improvement to the solution score that defines a solution as",
              " \"better\" in the Signed phase."
            ]
          },
          {
            "name": "OffchainRepeat",
            "ty": 4,
            "value": [
              18,
              0,
              0,
              0
            ],
            "docs": [
              " The repeat threshold of the offchain worker.",
              "",
              " For example, if it is 5, that means that at least 5 blocks will elapse between attempts",
              " to submit the worker's solution."
            ]
          },
          {
            "name": "MinerTxPriority",
            "ty": 12,
            "value": [
              101,
              102,
              102,
              102,
              102,
              102,
              102,
              230
            ],
            "docs": [
              " The priority of the unsigned transaction submitted in the unsigned-phase"
            ]
          },
          {
            "name": "SignedMaxSubmissions",
            "ty": 4,
            "value": [
              16,
              0,
              0,
              0
            ],
            "docs": [
              " Maximum number of signed submissions that can be queued.",
              "",
              " It is best to avoid adjusting this during an election, as it impacts downstream data",
              " structures. In particular, `SignedSubmissionIndices<T>` is bounded on this value. If you",
              " update this value during an election, you _must_ ensure that",
              " `SignedSubmissionIndices.len()` is less than or equal to the new value. Otherwise,",
              " attempts to submit new solutions may cause a runtime panic."
            ]
          },
          {
            "name": "SignedMaxWeight",
            "ty": 10,
            "value": [
              11,
              8,
              199,
              114,
              88,
              85,
              1,
              19,
              163,
              112,
              61,
              10,
              215,
              163,
              112,
              189
            ],
            "docs": [
              " Maximum weight of a signed solution.",
              "",
              " If [`Config::MinerConfig`] is being implemented to submit signed solutions (outside of",
              " this pallet), then [`MinerConfig::solution_weight`] is used to compare against",
              " this value."
            ]
          },
          {
            "name": "SignedMaxRefunds",
            "ty": 4,
            "value": [
              4,
              0,
              0,
              0
            ],
            "docs": [
              " The maximum amount of unchecked solutions to refund the call fee for."
            ]
          },
          {
            "name": "SignedRewardBase",
            "ty": 6,
            "value": [
              0,
              228,
              11,
              84,
              2,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0
            ],
            "docs": [
              " Base reward for a signed solution"
            ]
          },
          {
            "name": "SignedDepositByte",
            "ty": 6,
            "value": [
              120,
              125,
              1,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0
            ],
            "docs": [
              " Per-byte deposit for a signed solution."
            ]
          },
          {
            "name": "SignedDepositWeight",
            "ty": 6,
            "value": [
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0
            ],
            "docs": [
              " Per-weight deposit for a signed solution."
            ]
          },
          {
            "name": "MaxWinners",
            "ty": 4,
            "value": [
              176,
              4,
              0,
              0
            ],
            "docs": [
              " The maximum number of winners that can be elected by this `ElectionProvider`",
              " implementation.",
              "",
              " Note: This must always be greater or equal to `T::DataProvider::desired_targets()`."
            ]
          },
          {
            "name": "MinerMaxLength",
            "ty": 4,
            "value": [
              0,
              0,
              54,
              0
            ],
            "docs": []
          },
          {
            "name": "MinerMaxWeight",
            "ty": 10,
            "value": [
              11,
              8,
              199,
              114,
              88,
              85,
              1,
              19,
              163,
              112,
              61,
              10,
              215,
              163,
              112,
              189
            ],
            "docs": []
          },
          {
            "name": "MinerMaxVotesPerVoter",
            "ty": 4,
            "value": [
              16,
              0,
              0,
              0
            ],
            "docs": []
          },
          {
            "name": "MinerMaxWinners",
            "ty": 4,
            "value": [
              176,
              4,
              0,
              0
            ],
            "docs": []
          }
        ],
        "error": {
          "ty": 697
        },
        "index": 36
      },
      {
        "name": "VoterList",
        "storage": {
          "prefix": "VoterList",
          "entries": [
            {
              "name": "ListNodes",
              "modifier": "Optional",
              "ty": {
                "Map": {
                  "hashers": [
                    "Twox64Concat"
                  ],
                  "key": 0,
                  "value": 698
                }
              },
              "default": [
                0
              ],
              "docs": [
                " A single node, within some bag.",
                "",
                " Nodes store links forward and back within their respective bags."
              ]
            },
            {
              "name": "CounterForListNodes",
              "modifier": "Default",
              "ty": {
                "Plain": 4
              },
              "default": [
                0,
                0,
                0,
                0
              ],
              "docs": [
                "Counter for the related counted storage map"
              ]
            },
            {
              "name": "ListBags",
              "modifier": "Optional",
              "ty": {
                "Map": {
                  "hashers": [
                    "Twox64Concat"
                  ],
                  "key": 12,
                  "value": 699
                }
              },
              "default": [
                0
              ],
              "docs": [
                " A bag stored in storage.",
                "",
                " Stores a `Bag` struct, which stores head and tail pointers to itself."
              ]
            }
          ]
        },
        "calls": {
          "ty": 250
        },
        "event": {
          "ty": 492
        },
        "constants": [
          {
            "name": "BagThresholds",
            "ty": 700,
            "value": [
              33,
              3,
              0,
              228,
              11,
              84,
              2,
              0,
              0,
              0,
              243,
              158,
              128,
              151,
              2,
              0,
              0,
              0,
              168,
              177,
              151,
              226,
              2,
              0,
              0,
              0,
              148,
              73,
              46,
              54,
              3,
              0,
              0,
              0,
              39,
              156,
              58,
              147,
              3,
              0,
              0,
              0,
              3,
              188,
              206,
              250,
              3,
              0,
              0,
              0,
              66,
              192,
              27,
              110,
              4,
              0,
              0,
              0,
              27,
              71,
              117,
              238,
              4,
              0,
              0,
              0,
              56,
              94,
              85,
              125,
              5,
              0,
              0,
              0,
              70,
              220,
              96,
              28,
              6,
              0,
              0,
              0,
              137,
              56,
              108,
              205,
              6,
              0,
              0,
              0,
              182,
              238,
              128,
              146,
              7,
              0,
              0,
              0,
              254,
              126,
              227,
              109,
              8,
              0,
              0,
              0,
              232,
              27,
              26,
              98,
              9,
              0,
              0,
              0,
              176,
              25,
              244,
              113,
              10,
              0,
              0,
              0,
              16,
              53,
              146,
              160,
              11,
              0,
              0,
              0,
              207,
              201,
              111,
              241,
              12,
              0,
              0,
              0,
              65,
              20,
              109,
              104,
              14,
              0,
              0,
              0,
              231,
              155,
              218,
              9,
              16,
              0,
              0,
              0,
              206,
              232,
              133,
              218,
              17,
              0,
              0,
              0,
              40,
              169,
              199,
              223,
              19,
              0,
              0,
              0,
              187,
              112,
              147,
              31,
              22,
              0,
              0,
              0,
              142,
              64,
              137,
              160,
              24,
              0,
              0,
              0,
              129,
              10,
              9,
              106,
              27,
              0,
              0,
              0,
              54,
              106,
              72,
              132,
              30,
              0,
              0,
              0,
              91,
              211,
              106,
              248,
              33,
              0,
              0,
              0,
              128,
              124,
              156,
              208,
              37,
              0,
              0,
              0,
              201,
              85,
              48,
              24,
              42,
              0,
              0,
              0,
              189,
              99,
              193,
              219,
              46,
              0,
              0,
              0,
              113,
              224,
              87,
              41,
              52,
              0,
              0,
              0,
              104,
              144,
              146,
              16,
              58,
              0,
              0,
              0,
              237,
              196,
              212,
              162,
              64,
              0,
              0,
              0,
              105,
              147,
              121,
              243,
              71,
              0,
              0,
              0,
              143,
              216,
              12,
              24,
              80,
              0,
              0,
              0,
              75,
              175,
              138,
              40,
              89,
              0,
              0,
              0,
              106,
              22,
              166,
              63,
              99,
              0,
              0,
              0,
              9,
              149,
              23,
              123,
              110,
              0,
              0,
              0,
              120,
              197,
              244,
              251,
              122,
              0,
              0,
              0,
              98,
              200,
              17,
              231,
              136,
              0,
              0,
              0,
              81,
              191,
              109,
              101,
              152,
              0,
              0,
              0,
              4,
              142,
              171,
              164,
              169,
              0,
              0,
              0,
              84,
              70,
              152,
              215,
              188,
              0,
              0,
              0,
              145,
              202,
              192,
              54,
              210,
              0,
              0,
              0,
              23,
              95,
              24,
              1,
              234,
              0,
              0,
              0,
              189,
              21,
              178,
              124,
              4,
              1,
              0,
              0,
              67,
              53,
              143,
              247,
              33,
              1,
              0,
              0,
              184,
              252,
              132,
              200,
              66,
              1,
              0,
              0,
              153,
              103,
              60,
              80,
              103,
              1,
              0,
              0,
              7,
              228,
              78,
              250,
              143,
              1,
              0,
              0,
              179,
              65,
              131,
              62,
              189,
              1,
              0,
              0,
              2,
              127,
              46,
              162,
              239,
              1,
              0,
              0,
              152,
              131,
              188,
              185,
              39,
              2,
              0,
              0,
              22,
              77,
              101,
              42,
              102,
              2,
              0,
              0,
              180,
              149,
              19,
              172,
              171,
              2,
              0,
              0,
              45,
              142,
              130,
              11,
              249,
              2,
              0,
              0,
              161,
              230,
              152,
              44,
              79,
              3,
              0,
              0,
              166,
              22,
              8,
              13,
              175,
              3,
              0,
              0,
              204,
              157,
              55,
              199,
              25,
              4,
              0,
              0,
              160,
              213,
              132,
              149,
              144,
              4,
              0,
              0,
              66,
              231,
              224,
              213,
              20,
              5,
              0,
              0,
              2,
              140,
              215,
              13,
              168,
              5,
              0,
              0,
              15,
              117,
              10,
              239,
              75,
              6,
              0,
              0,
              234,
              141,
              46,
              92,
              2,
              7,
              0,
              0,
              195,
              203,
              153,
              110,
              205,
              7,
              0,
              0,
              177,
              229,
              113,
              124,
              175,
              8,
              0,
              0,
              170,
              43,
              142,
              31,
              171,
              9,
              0,
              0,
              181,
              193,
              32,
              61,
              195,
              10,
              0,
              0,
              38,
              208,
              61,
              14,
              251,
              11,
              0,
              0,
              112,
              199,
              89,
              41,
              86,
              13,
              0,
              0,
              235,
              173,
              218,
              140,
              216,
              14,
              0,
              0,
              247,
              151,
              219,
              170,
              134,
              16,
              0,
              0,
              207,
              240,
              68,
              118,
              101,
              18,
              0,
              0,
              31,
              38,
              96,
              113,
              122,
              20,
              0,
              0,
              9,
              166,
              17,
              190,
              203,
              22,
              0,
              0,
              29,
              251,
              232,
              47,
              96,
              25,
              0,
              0,
              148,
              58,
              60,
              96,
              63,
              28,
              0,
              0,
              138,
              254,
              137,
              196,
              113,
              31,
              0,
              0,
              206,
              217,
              99,
              199,
              0,
              35,
              0,
              0,
              3,
              169,
              42,
              228,
              246,
              38,
              0,
              0,
              254,
              114,
              238,
              197,
              95,
              43,
              0,
              0,
              54,
              201,
              204,
              105,
              72,
              48,
              0,
              0,
              218,
              227,
              50,
              69,
              191,
              53,
              0,
              0,
              6,
              42,
              116,
              112,
              212,
              59,
              0,
              0,
              124,
              151,
              50,
              214,
              153,
              66,
              0,
              0,
              132,
              163,
              36,
              104,
              35,
              74,
              0,
              0,
              87,
              26,
              212,
              89,
              135,
              82,
              0,
              0,
              231,
              241,
              2,
              98,
              222,
              91,
              0,
              0,
              13,
              184,
              118,
              3,
              68,
              102,
              0,
              0,
              174,
              4,
              1,
              222,
              214,
              113,
              0,
              0,
              125,
              158,
              179,
              8,
              185,
              126,
              0,
              0,
              30,
              4,
              74,
              118,
              16,
              141,
              0,
              0,
              58,
              29,
              240,
              100,
              7,
              157,
              0,
              0,
              224,
              79,
              175,
              218,
              204,
              174,
              0,
              0,
              86,
              121,
              240,
              47,
              149,
              194,
              0,
              0,
              149,
              195,
              170,
              169,
              154,
              216,
              0,
              0,
              150,
              124,
              5,
              37,
              30,
              241,
              0,
              0,
              23,
              122,
              102,
              214,
              103,
              12,
              1,
              0,
              40,
              203,
              31,
              30,
              200,
              42,
              1,
              0,
              250,
              40,
              47,
              117,
              152,
              76,
              1,
              0,
              213,
              125,
              200,
              116,
              60,
              114,
              1,
              0,
              125,
              196,
              179,
              251,
              34,
              156,
              1,
              0,
              54,
              92,
              222,
              116,
              199,
              202,
              1,
              0,
              158,
              184,
              225,
              66,
              179,
              254,
              1,
              0,
              12,
              49,
              174,
              84,
              127,
              56,
              2,
              0,
              95,
              225,
              1,
              232,
              213,
              120,
              2,
              0,
              99,
              115,
              218,
              126,
              116,
              192,
              2,
              0,
              81,
              209,
              166,
              13,
              46,
              16,
              3,
              0,
              199,
              233,
              164,
              104,
              237,
              104,
              3,
              0,
              97,
              192,
              145,
              247,
              183,
              203,
              3,
              0,
              191,
              39,
              161,
              183,
              176,
              57,
              4,
              0,
              123,
              20,
              153,
              148,
              27,
              180,
              4,
              0,
              133,
              35,
              237,
              34,
              97,
              60,
              5,
              0,
              105,
              165,
              212,
              197,
              18,
              212,
              5,
              0,
              236,
              140,
              147,
              77,
              239,
              124,
              6,
              0,
              245,
              170,
              144,
              27,
              232,
              56,
              7,
              0,
              140,
              190,
              93,
              219,
              38,
              10,
              8,
              0,
              2,
              151,
              140,
              225,
              19,
              243,
              8,
              0,
              250,
              227,
              20,
              67,
              93,
              246,
              9,
              0,
              221,
              241,
              45,
              186,
              254,
              22,
              11,
              0,
              46,
              186,
              220,
              111,
              74,
              88,
              12,
              0,
              12,
              85,
              24,
              196,
              242,
              189,
              13,
              0,
              240,
              187,
              84,
              49,
              21,
              76,
              15,
              0,
              73,
              142,
              134,
              107,
              70,
              7,
              17,
              0,
              178,
              193,
              83,
              222,
              159,
              244,
              18,
              0,
              39,
              138,
              47,
              178,
              206,
              25,
              21,
              0,
              178,
              57,
              159,
              132,
              36,
              125,
              23,
              0,
              225,
              153,
              231,
              4,
              170,
              37,
              26,
              0,
              186,
              19,
              245,
              171,
              51,
              27,
              29,
              0,
              38,
              71,
              133,
              204,
              120,
              102,
              32,
              0,
              136,
              191,
              128,
              63,
              45,
              17,
              36,
              0,
              28,
              152,
              35,
              248,
              29,
              38,
              40,
              0,
              204,
              196,
              34,
              212,
              80,
              177,
              44,
              0,
              240,
              136,
              130,
              5,
              40,
              192,
              49,
              0,
              54,
              124,
              109,
              126,
              137,
              97,
              55,
              0,
              110,
              147,
              41,
              211,
              10,
              166,
              61,
              0,
              140,
              188,
              108,
              19,
              34,
              160,
              68,
              0,
              0,
              112,
              243,
              42,
              92,
              100,
              76,
              0,
              180,
              59,
              132,
              105,
              153,
              9,
              85,
              0,
              128,
              180,
              171,
              228,
              80,
              169,
              94,
              0,
              160,
              205,
              169,
              121,
              219,
              95,
              105,
              0,
              76,
              194,
              127,
              76,
              199,
              76,
              117,
              0,
              208,
              172,
              14,
              186,
              52,
              147,
              130,
              0,
              72,
              62,
              12,
              207,
              61,
              90,
              145,
              0,
              104,
              198,
              142,
              116,
              105,
              205,
              161,
              0,
              40,
              30,
              111,
              165,
              43,
              29,
              180,
              0,
              152,
              169,
              35,
              38,
              116,
              127,
              200,
              0,
              240,
              154,
              116,
              99,
              77,
              48,
              223,
              0,
              128,
              205,
              252,
              75,
              141,
              114,
              248,
              0,
              144,
              20,
              96,
              45,
              154,
              144,
              20,
              1,
              240,
              180,
              19,
              217,
              69,
              221,
              51,
              1,
              32,
              151,
              53,
              150,
              193,
              180,
              86,
              1,
              80,
              220,
              251,
              174,
              173,
              125,
              125,
              1,
              224,
              17,
              152,
              185,
              71,
              170,
              168,
              1,
              48,
              199,
              238,
              22,
              187,
              185,
              216,
              1,
              32,
              110,
              72,
              134,
              151,
              57,
              14,
              2,
              160,
              250,
              75,
              29,
              114,
              199,
              73,
              2,
              192,
              17,
              113,
              112,
              181,
              18,
              140,
              2,
              128,
              138,
              22,
              67,
              166,
              222,
              213,
              2,
              192,
              248,
              35,
              177,
              162,
              4,
              40,
              3,
              128,
              175,
              89,
              112,
              162,
              118,
              131,
              3,
              192,
              111,
              45,
              135,
              255,
              65,
              233,
              3,
              64,
              147,
              127,
              172,
              143,
              146,
              90,
              4,
              0,
              145,
              9,
              113,
              23,
              182,
              216,
              4,
              64,
              15,
              223,
              91,
              33,
              32,
              101,
              5,
              0,
              73,
              193,
              73,
              68,
              110,
              1,
              6,
              0,
              142,
              188,
              166,
              229,
              108,
              175,
              6,
              0,
              89,
              86,
              134,
              133,
              28,
              113,
              7,
              128,
              104,
              170,
              52,
              164,
              183,
              72,
              8,
              128,
              161,
              226,
              158,
              82,
              185,
              56,
              9,
              0,
              189,
              171,
              232,
              128,
              228,
              67,
              10,
              0,
              42,
              114,
              180,
              32,
              76,
              109,
              11,
              128,
              241,
              192,
              19,
              51,
              92,
              184,
              12,
              0,
              160,
              60,
              203,
              220,
              227,
              40,
              14,
              128,
              184,
              98,
              154,
              158,
              32,
              195,
              15,
              0,
              222,
              86,
              147,
              210,
              202,
              139,
              17,
              0,
              93,
              127,
              76,
              147,
              35,
              136,
              19,
              0,
              26,
              135,
              223,
              53,
              4,
              190,
              21,
              0,
              167,
              206,
              75,
              132,
              239,
              51,
              24,
              0,
              1,
              16,
              251,
              234,
              36,
              241,
              26,
              0,
              128,
              42,
              229,
              209,
              181,
              253,
              29,
              0,
              34,
              161,
              52,
              96,
              157,
              98,
              33,
              0,
              68,
              33,
              107,
              240,
              218,
              41,
              37,
              0,
              2,
              97,
              241,
              130,
              143,
              94,
              41,
              0,
              102,
              32,
              207,
              133,
              30,
              13,
              46,
              0,
              132,
              16,
              25,
              82,
              82,
              67,
              51,
              0,
              160,
              193,
              143,
              202,
              132,
              16,
              57,
              0,
              38,
              173,
              20,
              147,
              204,
              133,
              63,
              0,
              208,
              205,
              36,
              102,
              47,
              182,
              70,
              0,
              156,
              225,
              154,
              28,
              218,
              182,
              78,
              0,
              88,
              204,
              194,
              12,
              95,
              159,
              87,
              0,
              32,
              10,
              117,
              120,
              251,
              137,
              97,
              0,
              48,
              187,
              187,
              214,
              228,
              147,
              108,
              0,
              96,
              203,
              167,
              220,
              158,
              221,
              120,
              0,
              184,
              59,
              192,
              66,
              91,
              139,
              134,
              0,
              184,
              134,
              35,
              97,
              100,
              197,
              149,
              0,
              248,
              241,
              95,
              220,
              147,
              184,
              166,
              0,
              32,
              106,
              145,
              192,
              214,
              150,
              185,
              0,
              216,
              239,
              226,
              143,
              192,
              151,
              206,
              0,
              104,
              41,
              155,
              245,
              46,
              249,
              229,
              255,
              255,
              255,
              255,
              255,
              255,
              255,
              255
            ],
            "docs": [
              " The list of thresholds separating the various bags.",
              "",
              " Ids are separated into unsorted bags according to their score. This specifies the",
              " thresholds separating the bags. An id's bag is the largest bag for which the id's score",
              " is less than or equal to its upper threshold.",
              "",
              " When ids are iterated, higher bags are iterated completely before lower bags. This means",
              " that iteration is _semi-sorted_: ids of higher score tend to come before ids of lower",
              " score, but peer ids within a particular bag are sorted in insertion order.",
              "",
              " # Expressing the constant",
              "",
              " This constant must be sorted in strictly increasing order. Duplicate items are not",
              " permitted.",
              "",
              " There is an implied upper limit of `Score::MAX`; that value does not need to be",
              " specified within the bag. For any two threshold lists, if one ends with",
              " `Score::MAX`, the other one does not, and they are otherwise equal, the two",
              " lists will behave identically.",
              "",
              " # Calculation",
              "",
              " It is recommended to generate the set of thresholds in a geometric series, such that",
              " there exists some constant ratio such that `threshold[k + 1] == (threshold[k] *",
              " constant_ratio).max(threshold[k] + 1)` for all `k`.",
              "",
              " The helpers in the `/utils/frame/generate-bags` module can simplify this calculation.",
              "",
              " # Examples",
              "",
              " - If `BagThresholds::get().is_empty()`, then all ids are put into the same bag, and",
              "   iteration is strictly in insertion order.",
              " - If `BagThresholds::get().len() == 64`, and the thresholds are determined according to",
              "   the procedure given above, then the constant ratio is equal to 2.",
              " - If `BagThresholds::get().len() == 200`, and the thresholds are determined according to",
              "   the procedure given above, then the constant ratio is approximately equal to 1.248.",
              " - If the threshold list begins `[1, 2, 3, ...]`, then an id with score 0 or 1 will fall",
              "   into bag 0, an id with score 2 will fall into bag 1, etc.",
              "",
              " # Migration",
              "",
              " In the event that this list ever changes, a copy of the old bags list must be retained.",
              " With that `List::migrate` can be called, which will perform the appropriate migration."
            ]
          }
        ],
        "error": {
          "ty": 701
        },
        "index": 37
      },
      {
        "name": "NominationPools",
        "storage": {
          "prefix": "NominationPools",
          "entries": [
            {
              "name": "TotalValueLocked",
              "modifier": "Default",
              "ty": {
                "Plain": 6
              },
              "default": [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The sum of funds across all pools.",
                "",
                " This might be lower but never higher than the sum of `total_balance` of all [`PoolMembers`]",
                " because calling `pool_withdraw_unbonded` might decrease the total stake of the pool's",
                " `bonded_account` without adjusting the pallet-internal `UnbondingPool`'s."
              ]
            },
            {
              "name": "MinJoinBond",
              "modifier": "Default",
              "ty": {
                "Plain": 6
              },
              "default": [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " Minimum amount to bond to join a pool."
              ]
            },
            {
              "name": "MinCreateBond",
              "modifier": "Default",
              "ty": {
                "Plain": 6
              },
              "default": [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " Minimum bond required to create a pool.",
                "",
                " This is the amount that the depositor must put as their initial stake in the pool, as an",
                " indication of \"skin in the game\".",
                "",
                " This is the value that will always exist in the staking ledger of the pool bonded account",
                " while all other accounts leave."
              ]
            },
            {
              "name": "MaxPools",
              "modifier": "Optional",
              "ty": {
                "Plain": 4
              },
              "default": [
                0
              ],
              "docs": [
                " Maximum number of nomination pools that can exist. If `None`, then an unbounded number of",
                " pools can exist."
              ]
            },
            {
              "name": "MaxPoolMembers",
              "modifier": "Optional",
              "ty": {
                "Plain": 4
              },
              "default": [
                0
              ],
              "docs": [
                " Maximum number of members that can exist in the system. If `None`, then the count",
                " members are not bound on a system wide basis."
              ]
            },
            {
              "name": "MaxPoolMembersPerPool",
              "modifier": "Optional",
              "ty": {
                "Plain": 4
              },
              "default": [
                0
              ],
              "docs": [
                " Maximum number of members that may belong to pool. If `None`, then the count of",
                " members is not bound on a per pool basis."
              ]
            },
            {
              "name": "GlobalMaxCommission",
              "modifier": "Optional",
              "ty": {
                "Plain": 43
              },
              "default": [
                0
              ],
              "docs": [
                " The maximum commission that can be charged by a pool. Used on commission payouts to bound",
                " pool commissions that are > `GlobalMaxCommission`, necessary if a future",
                " `GlobalMaxCommission` is lower than some current pool commissions."
              ]
            },
            {
              "name": "PoolMembers",
              "modifier": "Optional",
              "ty": {
                "Map": {
                  "hashers": [
                    "Twox64Concat"
                  ],
                  "key": 0,
                  "value": 703
                }
              },
              "default": [
                0
              ],
              "docs": [
                " Active members.",
                "",
                " TWOX-NOTE: SAFE since `AccountId` is a secure hash."
              ]
            },
            {
              "name": "CounterForPoolMembers",
              "modifier": "Default",
              "ty": {
                "Plain": 4
              },
              "default": [
                0,
                0,
                0,
                0
              ],
              "docs": [
                "Counter for the related counted storage map"
              ]
            },
            {
              "name": "BondedPools",
              "modifier": "Optional",
              "ty": {
                "Map": {
                  "hashers": [
                    "Twox64Concat"
                  ],
                  "key": 4,
                  "value": 706
                }
              },
              "default": [
                0
              ],
              "docs": [
                " Storage for bonded pools."
              ]
            },
            {
              "name": "CounterForBondedPools",
              "modifier": "Default",
              "ty": {
                "Plain": 4
              },
              "default": [
                0,
                0,
                0,
                0
              ],
              "docs": [
                "Counter for the related counted storage map"
              ]
            },
            {
              "name": "RewardPools",
              "modifier": "Optional",
              "ty": {
                "Map": {
                  "hashers": [
                    "Twox64Concat"
                  ],
                  "key": 4,
                  "value": 711
                }
              },
              "default": [
                0
              ],
              "docs": [
                " Reward pools. This is where there rewards for each pool accumulate. When a members payout is",
                " claimed, the balance comes out of the reward pool. Keyed by the bonded pools account."
              ]
            },
            {
              "name": "CounterForRewardPools",
              "modifier": "Default",
              "ty": {
                "Plain": 4
              },
              "default": [
                0,
                0,
                0,
                0
              ],
              "docs": [
                "Counter for the related counted storage map"
              ]
            },
            {
              "name": "SubPoolsStorage",
              "modifier": "Optional",
              "ty": {
                "Map": {
                  "hashers": [
                    "Twox64Concat"
                  ],
                  "key": 4,
                  "value": 712
                }
              },
              "default": [
                0
              ],
              "docs": [
                " Groups of unbonding pools. Each group of unbonding pools belongs to a",
                " bonded pool, hence the name sub-pools. Keyed by the bonded pools account."
              ]
            },
            {
              "name": "CounterForSubPoolsStorage",
              "modifier": "Default",
              "ty": {
                "Plain": 4
              },
              "default": [
                0,
                0,
                0,
                0
              ],
              "docs": [
                "Counter for the related counted storage map"
              ]
            },
            {
              "name": "Metadata",
              "modifier": "Default",
              "ty": {
                "Map": {
                  "hashers": [
                    "Twox64Concat"
                  ],
                  "key": 4,
                  "value": 718
                }
              },
              "default": [
                0
              ],
              "docs": [
                " Metadata for the pool."
              ]
            },
            {
              "name": "CounterForMetadata",
              "modifier": "Default",
              "ty": {
                "Plain": 4
              },
              "default": [
                0,
                0,
                0,
                0
              ],
              "docs": [
                "Counter for the related counted storage map"
              ]
            },
            {
              "name": "LastPoolId",
              "modifier": "Default",
              "ty": {
                "Plain": 4
              },
              "default": [
                0,
                0,
                0,
                0
              ],
              "docs": [
                " Ever increasing number of all pools created so far."
              ]
            },
            {
              "name": "ReversePoolIdLookup",
              "modifier": "Optional",
              "ty": {
                "Map": {
                  "hashers": [
                    "Twox64Concat"
                  ],
                  "key": 0,
                  "value": 4
                }
              },
              "default": [
                0
              ],
              "docs": [
                " A reverse lookup from the pool's account id to its id.",
                "",
                " This is only used for slashing and on automatic withdraw update. In all other instances, the",
                " pool id is used, and the accounts are deterministically derived from it."
              ]
            },
            {
              "name": "CounterForReversePoolIdLookup",
              "modifier": "Default",
              "ty": {
                "Plain": 4
              },
              "default": [
                0,
                0,
                0,
                0
              ],
              "docs": [
                "Counter for the related counted storage map"
              ]
            },
            {
              "name": "ClaimPermissions",
              "modifier": "Default",
              "ty": {
                "Map": {
                  "hashers": [
                    "Twox64Concat"
                  ],
                  "key": 0,
                  "value": 258
                }
              },
              "default": [
                2
              ],
              "docs": [
                " Map from a pool member account to their opted claim permission."
              ]
            }
          ]
        },
        "calls": {
          "ty": 251
        },
        "event": {
          "ty": 493
        },
        "constants": [
          {
            "name": "PalletId",
            "ty": 630,
            "value": [
              112,
              121,
              47,
              110,
              111,
              112,
              108,
              115
            ],
            "docs": [
              " The nomination pool's pallet id."
            ]
          },
          {
            "name": "MaxPointsToBalance",
            "ty": 2,
            "value": [
              10
            ],
            "docs": [
              " The maximum pool points-to-balance ratio that an `open` pool can have.",
              "",
              " This is important in the event slashing takes place and the pool's points-to-balance",
              " ratio becomes disproportional.",
              "",
              " Moreover, this relates to the `RewardCounter` type as well, as the arithmetic operations",
              " are a function of number of points, and by setting this value to e.g. 10, you ensure",
              " that the total number of points in the system are at most 10 times the total_issuance of",
              " the chain, in the absolute worse case.",
              "",
              " For a value of 10, the threshold would be a pool points-to-balance ratio of 10:1.",
              " Such a scenario would also be the equivalent of the pool being 90% slashed."
            ]
          },
          {
            "name": "MaxUnbonding",
            "ty": 4,
            "value": [
              32,
              0,
              0,
              0
            ],
            "docs": [
              " The maximum number of simultaneous unbonding chunks that can exist per member."
            ]
          }
        ],
        "error": {
          "ty": 719
        },
        "index": 39
      },
      {
        "name": "FastUnstake",
        "storage": {
          "prefix": "FastUnstake",
          "entries": [
            {
              "name": "Head",
              "modifier": "Optional",
              "ty": {
                "Plain": 721
              },
              "default": [
                0
              ],
              "docs": [
                " The current \"head of the queue\" being unstaked.",
                "",
                " The head in itself can be a batch of up to [`Config::BatchSize`] stakers."
              ]
            },
            {
              "name": "Queue",
              "modifier": "Optional",
              "ty": {
                "Map": {
                  "hashers": [
                    "Twox64Concat"
                  ],
                  "key": 0,
                  "value": 6
                }
              },
              "default": [
                0
              ],
              "docs": [
                " The map of all accounts wishing to be unstaked.",
                "",
                " Keeps track of `AccountId` wishing to unstake and it's corresponding deposit."
              ]
            },
            {
              "name": "CounterForQueue",
              "modifier": "Default",
              "ty": {
                "Plain": 4
              },
              "default": [
                0,
                0,
                0,
                0
              ],
              "docs": [
                "Counter for the related counted storage map"
              ]
            },
            {
              "name": "ErasToCheckPerBlock",
              "modifier": "Default",
              "ty": {
                "Plain": 4
              },
              "default": [
                0,
                0,
                0,
                0
              ],
              "docs": [
                " Number of eras to check per block.",
                "",
                " If set to 0, this pallet does absolutely nothing. Cannot be set to more than",
                " [`Config::MaxErasToCheckPerBlock`].",
                "",
                " Based on the amount of weight available at [`Pallet::on_idle`], up to this many eras are",
                " checked. The checking is represented by updating [`UnstakeRequest::checked`], which is",
                " stored in [`Head`]."
              ]
            }
          ]
        },
        "calls": {
          "ty": 264
        },
        "event": {
          "ty": 494
        },
        "constants": [
          {
            "name": "Deposit",
            "ty": 6,
            "value": [
              0,
              228,
              11,
              84,
              2,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0
            ],
            "docs": [
              " Deposit to take for unstaking, to make sure we're able to slash the it in order to cover",
              " the costs of resources on unsuccessful unstake."
            ]
          }
        ],
        "error": {
          "ty": 724
        },
        "index": 40
      },
      {
        "name": "DelegatedStaking",
        "storage": {
          "prefix": "DelegatedStaking",
          "entries": [
            {
              "name": "Delegators",
              "modifier": "Optional",
              "ty": {
                "Map": {
                  "hashers": [
                    "Twox64Concat"
                  ],
                  "key": 0,
                  "value": 725
                }
              },
              "default": [
                0
              ],
              "docs": [
                " Map of Delegators to their `Delegation`.",
                "",
                " Implementation note: We are not using a double map with `delegator` and `agent` account",
                " as keys since we want to restrict delegators to delegate only to one account at a time."
              ]
            },
            {
              "name": "CounterForDelegators",
              "modifier": "Default",
              "ty": {
                "Plain": 4
              },
              "default": [
                0,
                0,
                0,
                0
              ],
              "docs": [
                "Counter for the related counted storage map"
              ]
            },
            {
              "name": "Agents",
              "modifier": "Optional",
              "ty": {
                "Map": {
                  "hashers": [
                    "Twox64Concat"
                  ],
                  "key": 0,
                  "value": 726
                }
              },
              "default": [
                0
              ],
              "docs": [
                " Map of `Agent` to their `Ledger`."
              ]
            },
            {
              "name": "CounterForAgents",
              "modifier": "Default",
              "ty": {
                "Plain": 4
              },
              "default": [
                0,
                0,
                0,
                0
              ],
              "docs": [
                "Counter for the related counted storage map"
              ]
            }
          ]
        },
        "calls": null,
        "event": {
          "ty": 495
        },
        "constants": [
          {
            "name": "PalletId",
            "ty": 630,
            "value": [
              112,
              121,
              47,
              100,
              108,
              115,
              116,
              107
            ],
            "docs": [
              " Injected identifier for the pallet."
            ]
          },
          {
            "name": "SlashRewardFraction",
            "ty": 43,
            "value": [
              128,
              150,
              152,
              0
            ],
            "docs": [
              " Fraction of the slash that is rewarded to the caller of pending slash to the agent."
            ]
          }
        ],
        "error": {
          "ty": 727
        },
        "index": 41
      },
      {
        "name": "ParachainsOrigin",
        "storage": null,
        "calls": null,
        "event": null,
        "constants": [],
        "error": null,
        "index": 50
      },
      {
        "name": "Configuration",
        "storage": {
          "prefix": "Configuration",
          "entries": [
            {
              "name": "ActiveConfig",
              "modifier": "Default",
              "ty": {
                "Plain": 728
              },
              "default": [
                0,
                0,
                48,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                2,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                6,
                0,
                0,
                0,
                100,
                0,
                0,
                0,
                1,
                0,
                0,
                0,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                2,
                0,
                0,
                0,
                2,
                0,
                0,
                0,
                2,
                0,
                0,
                0,
                0,
                1,
                0,
                0,
                0,
                1,
                0,
                0,
                0,
                1,
                0,
                0,
                0,
                0,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                16,
                39,
                0,
                0,
                128,
                178,
                230,
                14,
                128,
                195,
                201,
                1,
                128,
                150,
                152,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                5,
                0,
                0,
                0
              ],
              "docs": [
                " The active configuration for the current session."
              ]
            },
            {
              "name": "PendingConfigs",
              "modifier": "Default",
              "ty": {
                "Plain": 729
              },
              "default": [
                0
              ],
              "docs": [
                " Pending configuration changes.",
                "",
                " This is a list of configuration changes, each with a session index at which it should",
                " be applied.",
                "",
                " The list is sorted ascending by session index. Also, this list can only contain at most",
                " 2 items: for the next session and for the `scheduled_session`."
              ]
            },
            {
              "name": "BypassConsistencyCheck",
              "modifier": "Default",
              "ty": {
                "Plain": 8
              },
              "default": [
                0
              ],
              "docs": [
                " If this is set, then the configuration setters will bypass the consistency checks. This",
                " is meant to be used only as the last resort."
              ]
            }
          ]
        },
        "calls": {
          "ty": 265
        },
        "event": null,
        "constants": [],
        "error": {
          "ty": 731
        },
        "index": 51
      },
      {
        "name": "ParasShared",
        "storage": {
          "prefix": "ParasShared",
          "entries": [
            {
              "name": "CurrentSessionIndex",
              "modifier": "Default",
              "ty": {
                "Plain": 4
              },
              "default": [
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The current session index."
              ]
            },
            {
              "name": "ActiveValidatorIndices",
              "modifier": "Default",
              "ty": {
                "Plain": 732
              },
              "default": [
                0
              ],
              "docs": [
                " All the validators actively participating in parachain consensus.",
                " Indices are into the broader validator set."
              ]
            },
            {
              "name": "ActiveValidatorKeys",
              "modifier": "Default",
              "ty": {
                "Plain": 733
              },
              "default": [
                0
              ],
              "docs": [
                " The parachain attestation keys of the validators actively participating in parachain",
                " consensus. This should be the same length as `ActiveValidatorIndices`."
              ]
            },
            {
              "name": "AllowedRelayParents",
              "modifier": "Default",
              "ty": {
                "Plain": 734
              },
              "default": [
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " All allowed relay-parents."
              ]
            }
          ]
        },
        "calls": {
          "ty": 274
        },
        "event": null,
        "constants": [],
        "error": null,
        "index": 52
      },
      {
        "name": "ParaInclusion",
        "storage": {
          "prefix": "ParaInclusion",
          "entries": [
            {
              "name": "V1",
              "modifier": "Optional",
              "ty": {
                "Map": {
                  "hashers": [
                    "Twox64Concat"
                  ],
                  "key": 163,
                  "value": 737
                }
              },
              "default": [
                0
              ],
              "docs": [
                " Candidates pending availability by `ParaId`. They form a chain starting from the latest",
                " included head of the para.",
                " Use a different prefix post-migration to v1, since the v0 `PendingAvailability` storage",
                " would otherwise have the exact same prefix which could cause undefined behaviour when doing",
                " the migration."
              ]
            }
          ]
        },
        "calls": {
          "ty": 275
        },
        "event": {
          "ty": 496
        },
        "constants": [],
        "error": {
          "ty": 739
        },
        "index": 53
      },
      {
        "name": "ParaInherent",
        "storage": {
          "prefix": "ParaInherent",
          "entries": [
            {
              "name": "Included",
              "modifier": "Optional",
              "ty": {
                "Plain": 35
              },
              "default": [
                0
              ],
              "docs": [
                " Whether the paras inherent was included within this block.",
                "",
                " The `Option<()>` is effectively a `bool`, but it never hits storage in the `None` variant",
                " due to the guarantees of FRAME's storage APIs.",
                "",
                " If this is `None` at the end of the block, we panic and render the block invalid."
              ]
            },
            {
              "name": "OnChainVotes",
              "modifier": "Optional",
              "ty": {
                "Plain": 740
              },
              "default": [
                0
              ],
              "docs": [
                " Scraped on chain data for extracting resolved disputes as well as backing votes."
              ]
            }
          ]
        },
        "calls": {
          "ty": 276
        },
        "event": null,
        "constants": [],
        "error": {
          "ty": 745
        },
        "index": 54
      },
      {
        "name": "ParaScheduler",
        "storage": {
          "prefix": "ParaScheduler",
          "entries": [
            {
              "name": "ValidatorGroups",
              "modifier": "Default",
              "ty": {
                "Plain": 746
              },
              "default": [
                0
              ],
              "docs": [
                " All the validator groups. One for each core. Indices are into `ActiveValidators` - not the",
                " broader set of Polkadot validators, but instead just the subset used for parachains during",
                " this session.",
                "",
                " Bound: The number of cores is the sum of the numbers of parachains and parathread",
                " multiplexers. Reasonably, 100-1000. The dominant factor is the number of validators: safe",
                " upper bound at 10k."
              ]
            },
            {
              "name": "AvailabilityCores",
              "modifier": "Default",
              "ty": {
                "Plain": 747
              },
              "default": [
                0
              ],
              "docs": [
                " One entry for each availability core. The i'th parachain belongs to the i'th core, with the",
                " remaining cores all being on demand parachain multiplexers.",
                "",
                " Bounded by the maximum of either of these two values:",
                "   * The number of parachains and parathread multiplexers",
                "   * The number of validators divided by `configuration.max_validators_per_core`."
              ]
            },
            {
              "name": "SessionStartBlock",
              "modifier": "Default",
              "ty": {
                "Plain": 4
              },
              "default": [
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The block number where the session start occurred. Used to track how many group rotations",
                " have occurred.",
                "",
                " Note that in the context of parachains modules the session change is signaled during",
                " the block and enacted at the end of the block (at the finalization stage, to be exact).",
                " Thus for all intents and purposes the effect of the session change is observed at the",
                " block following the session change, block number of which we save in this storage value."
              ]
            },
            {
              "name": "ClaimQueue",
              "modifier": "Default",
              "ty": {
                "Plain": 751
              },
              "default": [
                0
              ],
              "docs": [
                " One entry for each availability core. The `VecDeque` represents the assignments to be",
                " scheduled on that core. The value contained here will not be valid after the end of",
                " a block. Runtime APIs should be used to determine scheduled cores for the upcoming block."
              ]
            }
          ]
        },
        "calls": null,
        "event": null,
        "constants": [],
        "error": null,
        "index": 55
      },
      {
        "name": "Paras",
        "storage": {
          "prefix": "Paras",
          "entries": [
            {
              "name": "PvfActiveVoteMap",
              "modifier": "Optional",
              "ty": {
                "Map": {
                  "hashers": [
                    "Twox64Concat"
                  ],
                  "key": 291,
                  "value": 755
                }
              },
              "default": [
                0
              ],
              "docs": [
                " All currently active PVF pre-checking votes.",
                "",
                " Invariant:",
                " - There are no PVF pre-checking votes that exists in list but not in the set and vice versa."
              ]
            },
            {
              "name": "PvfActiveVoteList",
              "modifier": "Default",
              "ty": {
                "Plain": 759
              },
              "default": [
                0
              ],
              "docs": [
                " The list of all currently active PVF votes. Auxiliary to `PvfActiveVoteMap`."
              ]
            },
            {
              "name": "Parachains",
              "modifier": "Default",
              "ty": {
                "Plain": 760
              },
              "default": [
                0
              ],
              "docs": [
                " All lease holding parachains. Ordered ascending by `ParaId`. On demand parachains are not",
                " included.",
                "",
                " Consider using the [`ParachainsCache`] type of modifying."
              ]
            },
            {
              "name": "ParaLifecycles",
              "modifier": "Optional",
              "ty": {
                "Map": {
                  "hashers": [
                    "Twox64Concat"
                  ],
                  "key": 163,
                  "value": 761
                }
              },
              "default": [
                0
              ],
              "docs": [
                " The current lifecycle of a all known Para IDs."
              ]
            },
            {
              "name": "Heads",
              "modifier": "Optional",
              "ty": {
                "Map": {
                  "hashers": [
                    "Twox64Concat"
                  ],
                  "key": 163,
                  "value": 299
                }
              },
              "default": [
                0
              ],
              "docs": [
                " The head-data of every registered para."
              ]
            },
            {
              "name": "MostRecentContext",
              "modifier": "Optional",
              "ty": {
                "Map": {
                  "hashers": [
                    "Twox64Concat"
                  ],
                  "key": 163,
                  "value": 4
                }
              },
              "default": [
                0
              ],
              "docs": [
                " The context (relay-chain block number) of the most recent parachain head."
              ]
            },
            {
              "name": "CurrentCodeHash",
              "modifier": "Optional",
              "ty": {
                "Map": {
                  "hashers": [
                    "Twox64Concat"
                  ],
                  "key": 163,
                  "value": 291
                }
              },
              "default": [
                0
              ],
              "docs": [
                " The validation code hash of every live para.",
                "",
                " Corresponding code can be retrieved with [`CodeByHash`]."
              ]
            },
            {
              "name": "PastCodeHash",
              "modifier": "Optional",
              "ty": {
                "Map": {
                  "hashers": [
                    "Twox64Concat"
                  ],
                  "key": 762,
                  "value": 291
                }
              },
              "default": [
                0
              ],
              "docs": [
                " Actual past code hash, indicated by the para id as well as the block number at which it",
                " became outdated.",
                "",
                " Corresponding code can be retrieved with [`CodeByHash`]."
              ]
            },
            {
              "name": "PastCodeMeta",
              "modifier": "Default",
              "ty": {
                "Map": {
                  "hashers": [
                    "Twox64Concat"
                  ],
                  "key": 163,
                  "value": 763
                }
              },
              "default": [
                0,
                0
              ],
              "docs": [
                " Past code of parachains. The parachains themselves may not be registered anymore,",
                " but we also keep their code on-chain for the same amount of time as outdated code",
                " to keep it available for approval checkers."
              ]
            },
            {
              "name": "PastCodePruning",
              "modifier": "Default",
              "ty": {
                "Plain": 766
              },
              "default": [
                0
              ],
              "docs": [
                " Which paras have past code that needs pruning and the relay-chain block at which the code",
                " was replaced. Note that this is the actual height of the included block, not the expected",
                " height at which the code upgrade would be applied, although they may be equal.",
                " This is to ensure the entire acceptance period is covered, not an offset acceptance period",
                " starting from the time at which the parachain perceives a code upgrade as having occurred.",
                " Multiple entries for a single para are permitted. Ordered ascending by block number."
              ]
            },
            {
              "name": "FutureCodeUpgrades",
              "modifier": "Optional",
              "ty": {
                "Map": {
                  "hashers": [
                    "Twox64Concat"
                  ],
                  "key": 163,
                  "value": 4
                }
              },
              "default": [
                0
              ],
              "docs": [
                " The block number at which the planned code change is expected for a parachain.",
                "",
                " The change will be applied after the first parablock for this ID included which executes",
                " in the context of a relay chain block with a number >= `expected_at`."
              ]
            },
            {
              "name": "FutureCodeUpgradesAt",
              "modifier": "Default",
              "ty": {
                "Plain": 766
              },
              "default": [
                0
              ],
              "docs": [
                " The list of upcoming future code upgrades.",
                "",
                " Each item is a pair of the parachain and the expected block at which the upgrade should be",
                " applied. The upgrade will be applied at the given relay chain block. In contrast to",
                " [`FutureCodeUpgrades`] this code upgrade will be applied regardless the parachain making any",
                " progress or not.",
                "",
                " Ordered ascending by block number."
              ]
            },
            {
              "name": "FutureCodeHash",
              "modifier": "Optional",
              "ty": {
                "Map": {
                  "hashers": [
                    "Twox64Concat"
                  ],
                  "key": 163,
                  "value": 291
                }
              },
              "default": [
                0
              ],
              "docs": [
                " The actual future code hash of a para.",
                "",
                " Corresponding code can be retrieved with [`CodeByHash`]."
              ]
            },
            {
              "name": "UpgradeGoAheadSignal",
              "modifier": "Optional",
              "ty": {
                "Map": {
                  "hashers": [
                    "Twox64Concat"
                  ],
                  "key": 163,
                  "value": 767
                }
              },
              "default": [
                0
              ],
              "docs": [
                " This is used by the relay-chain to communicate to a parachain a go-ahead with in the upgrade",
                " procedure.",
                "",
                " This value is absent when there are no upgrades scheduled or during the time the relay chain",
                " performs the checks. It is set at the first relay-chain block when the corresponding",
                " parachain can switch its upgrade function. As soon as the parachain's block is included, the",
                " value gets reset to `None`.",
                "",
                " NOTE that this field is used by parachains via merkle storage proofs, therefore changing",
                " the format will require migration of parachains."
              ]
            },
            {
              "name": "UpgradeRestrictionSignal",
              "modifier": "Optional",
              "ty": {
                "Map": {
                  "hashers": [
                    "Twox64Concat"
                  ],
                  "key": 163,
                  "value": 768
                }
              },
              "default": [
                0
              ],
              "docs": [
                " This is used by the relay-chain to communicate that there are restrictions for performing",
                " an upgrade for this parachain.",
                "",
                " This may be a because the parachain waits for the upgrade cooldown to expire. Another",
                " potential use case is when we want to perform some maintenance (such as storage migration)",
                " we could restrict upgrades to make the process simpler.",
                "",
                " NOTE that this field is used by parachains via merkle storage proofs, therefore changing",
                " the format will require migration of parachains."
              ]
            },
            {
              "name": "UpgradeCooldowns",
              "modifier": "Default",
              "ty": {
                "Plain": 766
              },
              "default": [
                0
              ],
              "docs": [
                " The list of parachains that are awaiting for their upgrade restriction to cooldown.",
                "",
                " Ordered ascending by block number."
              ]
            },
            {
              "name": "UpcomingUpgrades",
              "modifier": "Default",
              "ty": {
                "Plain": 766
              },
              "default": [
                0
              ],
              "docs": [
                " The list of upcoming code upgrades.",
                "",
                " Each item is a pair of which para performs a code upgrade and at which relay-chain block it",
                " is expected at.",
                "",
                " Ordered ascending by block number."
              ]
            },
            {
              "name": "ActionsQueue",
              "modifier": "Default",
              "ty": {
                "Map": {
                  "hashers": [
                    "Twox64Concat"
                  ],
                  "key": 4,
                  "value": 760
                }
              },
              "default": [
                0
              ],
              "docs": [
                " The actions to perform during the start of a specific session index."
              ]
            },
            {
              "name": "UpcomingParasGenesis",
              "modifier": "Optional",
              "ty": {
                "Map": {
                  "hashers": [
                    "Twox64Concat"
                  ],
                  "key": 163,
                  "value": 769
                }
              },
              "default": [
                0
              ],
              "docs": [
                " Upcoming paras instantiation arguments.",
                "",
                " NOTE that after PVF pre-checking is enabled the para genesis arg will have it's code set",
                " to empty. Instead, the code will be saved into the storage right away via `CodeByHash`."
              ]
            },
            {
              "name": "CodeByHashRefs",
              "modifier": "Default",
              "ty": {
                "Map": {
                  "hashers": [
                    "Identity"
                  ],
                  "key": 291,
                  "value": 4
                }
              },
              "default": [
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The number of reference on the validation code in [`CodeByHash`] storage."
              ]
            },
            {
              "name": "CodeByHash",
              "modifier": "Optional",
              "ty": {
                "Map": {
                  "hashers": [
                    "Identity"
                  ],
                  "key": 291,
                  "value": 298
                }
              },
              "default": [
                0
              ],
              "docs": [
                " Validation code stored by its hash.",
                "",
                " This storage is consistent with [`FutureCodeHash`], [`CurrentCodeHash`] and",
                " [`PastCodeHash`]."
              ]
            }
          ]
        },
        "calls": {
          "ty": 311
        },
        "event": {
          "ty": 500
        },
        "constants": [
          {
            "name": "UnsignedPriority",
            "ty": 12,
            "value": [
              255,
              255,
              255,
              255,
              255,
              255,
              255,
              255
            ],
            "docs": []
          }
        ],
        "error": {
          "ty": 770
        },
        "index": 56
      },
      {
        "name": "Initializer",
        "storage": {
          "prefix": "Initializer",
          "entries": [
            {
              "name": "HasInitialized",
              "modifier": "Optional",
              "ty": {
                "Plain": 35
              },
              "default": [
                0
              ],
              "docs": [
                " Whether the parachains modules have been initialized within this block.",
                "",
                " Semantically a `bool`, but this guarantees it should never hit the trie,",
                " as this is cleared in `on_finalize` and Frame optimizes `None` values to be empty values.",
                "",
                " As a `bool`, `set(false)` and `remove()` both lead to the next `get()` being false, but one",
                " of them writes to the trie and one does not. This confusion makes `Option<()>` more suitable",
                " for the semantics of this variable."
              ]
            },
            {
              "name": "BufferedSessionChanges",
              "modifier": "Default",
              "ty": {
                "Plain": 771
              },
              "default": [
                0
              ],
              "docs": [
                " Buffered session changes along with the block number at which they should be applied.",
                "",
                " Typically this will be empty or one element long. Apart from that this item never hits",
                " the storage.",
                "",
                " However this is a `Vec` regardless to handle various edge cases that may occur at runtime",
                " upgrade boundaries or if governance intervenes."
              ]
            }
          ]
        },
        "calls": {
          "ty": 313
        },
        "event": null,
        "constants": [],
        "error": null,
        "index": 57
      },
      {
        "name": "Dmp",
        "storage": {
          "prefix": "Dmp",
          "entries": [
            {
              "name": "DownwardMessageQueues",
              "modifier": "Default",
              "ty": {
                "Map": {
                  "hashers": [
                    "Twox64Concat"
                  ],
                  "key": 163,
                  "value": 773
                }
              },
              "default": [
                0
              ],
              "docs": [
                " The downward messages addressed for a certain para."
              ]
            },
            {
              "name": "DownwardMessageQueueHeads",
              "modifier": "Default",
              "ty": {
                "Map": {
                  "hashers": [
                    "Twox64Concat"
                  ],
                  "key": 163,
                  "value": 13
                }
              },
              "default": [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " A mapping that stores the downward message queue MQC head for each para.",
                "",
                " Each link in this chain has a form:",
                " `(prev_head, B, H(M))`, where",
                " - `prev_head`: is the previous head hash or zero if none.",
                " - `B`: is the relay-chain block number in which a message was appended.",
                " - `H(M)`: is the hash of the message being appended."
              ]
            },
            {
              "name": "DeliveryFeeFactor",
              "modifier": "Default",
              "ty": {
                "Map": {
                  "hashers": [
                    "Twox64Concat"
                  ],
                  "key": 163,
                  "value": 425
                }
              },
              "default": [
                0,
                0,
                100,
                167,
                179,
                182,
                224,
                13,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The factor to multiply the base delivery fee by."
              ]
            }
          ]
        },
        "calls": null,
        "event": null,
        "constants": [],
        "error": null,
        "index": 58
      },
      {
        "name": "Hrmp",
        "storage": {
          "prefix": "Hrmp",
          "entries": [
            {
              "name": "HrmpOpenChannelRequests",
              "modifier": "Optional",
              "ty": {
                "Map": {
                  "hashers": [
                    "Twox64Concat"
                  ],
                  "key": 315,
                  "value": 775
                }
              },
              "default": [
                0
              ],
              "docs": [
                " The set of pending HRMP open channel requests.",
                "",
                " The set is accompanied by a list for iteration.",
                "",
                " Invariant:",
                " - There are no channels that exists in list but not in the set and vice versa."
              ]
            },
            {
              "name": "HrmpOpenChannelRequestsList",
              "modifier": "Default",
              "ty": {
                "Plain": 776
              },
              "default": [
                0
              ],
              "docs": []
            },
            {
              "name": "HrmpOpenChannelRequestCount",
              "modifier": "Default",
              "ty": {
                "Map": {
                  "hashers": [
                    "Twox64Concat"
                  ],
                  "key": 163,
                  "value": 4
                }
              },
              "default": [
                0,
                0,
                0,
                0
              ],
              "docs": [
                " This mapping tracks how many open channel requests are initiated by a given sender para.",
                " Invariant: `HrmpOpenChannelRequests` should contain the same number of items that has",
                " `(X, _)` as the number of `HrmpOpenChannelRequestCount` for `X`."
              ]
            },
            {
              "name": "HrmpAcceptedChannelRequestCount",
              "modifier": "Default",
              "ty": {
                "Map": {
                  "hashers": [
                    "Twox64Concat"
                  ],
                  "key": 163,
                  "value": 4
                }
              },
              "default": [
                0,
                0,
                0,
                0
              ],
              "docs": [
                " This mapping tracks how many open channel requests were accepted by a given recipient para.",
                " Invariant: `HrmpOpenChannelRequests` should contain the same number of items `(_, X)` with",
                " `confirmed` set to true, as the number of `HrmpAcceptedChannelRequestCount` for `X`."
              ]
            },
            {
              "name": "HrmpCloseChannelRequests",
              "modifier": "Optional",
              "ty": {
                "Map": {
                  "hashers": [
                    "Twox64Concat"
                  ],
                  "key": 315,
                  "value": 35
                }
              },
              "default": [
                0
              ],
              "docs": [
                " A set of pending HRMP close channel requests that are going to be closed during the session",
                " change. Used for checking if a given channel is registered for closure.",
                "",
                " The set is accompanied by a list for iteration.",
                "",
                " Invariant:",
                " - There are no channels that exists in list but not in the set and vice versa."
              ]
            },
            {
              "name": "HrmpCloseChannelRequestsList",
              "modifier": "Default",
              "ty": {
                "Plain": 776
              },
              "default": [
                0
              ],
              "docs": []
            },
            {
              "name": "HrmpWatermarks",
              "modifier": "Optional",
              "ty": {
                "Map": {
                  "hashers": [
                    "Twox64Concat"
                  ],
                  "key": 163,
                  "value": 4
                }
              },
              "default": [
                0
              ],
              "docs": [
                " The HRMP watermark associated with each para.",
                " Invariant:",
                " - each para `P` used here as a key should satisfy `Paras::is_valid_para(P)` within a",
                "   session."
              ]
            },
            {
              "name": "HrmpChannels",
              "modifier": "Optional",
              "ty": {
                "Map": {
                  "hashers": [
                    "Twox64Concat"
                  ],
                  "key": 315,
                  "value": 777
                }
              },
              "default": [
                0
              ],
              "docs": [
                " HRMP channel data associated with each para.",
                " Invariant:",
                " - each participant in the channel should satisfy `Paras::is_valid_para(P)` within a session."
              ]
            },
            {
              "name": "HrmpIngressChannelsIndex",
              "modifier": "Default",
              "ty": {
                "Map": {
                  "hashers": [
                    "Twox64Concat"
                  ],
                  "key": 163,
                  "value": 760
                }
              },
              "default": [
                0
              ],
              "docs": [
                " Ingress/egress indexes allow to find all the senders and receivers given the opposite side.",
                " I.e.",
                "",
                " (a) ingress index allows to find all the senders for a given recipient.",
                " (b) egress index allows to find all the recipients for a given sender.",
                "",
                " Invariants:",
                " - for each ingress index entry for `P` each item `I` in the index should present in",
                "   `HrmpChannels` as `(I, P)`.",
                " - for each egress index entry for `P` each item `E` in the index should present in",
                "   `HrmpChannels` as `(P, E)`.",
                " - there should be no other dangling channels in `HrmpChannels`.",
                " - the vectors are sorted."
              ]
            },
            {
              "name": "HrmpEgressChannelsIndex",
              "modifier": "Default",
              "ty": {
                "Map": {
                  "hashers": [
                    "Twox64Concat"
                  ],
                  "key": 163,
                  "value": 760
                }
              },
              "default": [
                0
              ],
              "docs": []
            },
            {
              "name": "HrmpChannelContents",
              "modifier": "Default",
              "ty": {
                "Map": {
                  "hashers": [
                    "Twox64Concat"
                  ],
                  "key": 315,
                  "value": 778
                }
              },
              "default": [
                0
              ],
              "docs": [
                " Storage for the messages for each channel.",
                " Invariant: cannot be non-empty if the corresponding channel in `HrmpChannels` is `None`."
              ]
            },
            {
              "name": "HrmpChannelDigests",
              "modifier": "Default",
              "ty": {
                "Map": {
                  "hashers": [
                    "Twox64Concat"
                  ],
                  "key": 163,
                  "value": 780
                }
              },
              "default": [
                0
              ],
              "docs": [
                " Maintains a mapping that can be used to answer the question: What paras sent a message at",
                " the given block number for a given receiver. Invariants:",
                " - The inner `Vec<ParaId>` is never empty.",
                " - The inner `Vec<ParaId>` cannot store two same `ParaId`.",
                " - The outer vector is sorted ascending by block number and cannot store two items with the",
                "   same block number."
              ]
            }
          ]
        },
        "calls": {
          "ty": 314
        },
        "event": {
          "ty": 501
        },
        "constants": [],
        "error": {
          "ty": 782
        },
        "index": 60
      },
      {
        "name": "ParaSessionInfo",
        "storage": {
          "prefix": "ParaSessionInfo",
          "entries": [
            {
              "name": "AssignmentKeysUnsafe",
              "modifier": "Default",
              "ty": {
                "Plain": 783
              },
              "default": [
                0
              ],
              "docs": [
                " Assignment keys for the current session.",
                " Note that this API is private due to it being prone to 'off-by-one' at session boundaries.",
                " When in doubt, use `Sessions` API instead."
              ]
            },
            {
              "name": "EarliestStoredSession",
              "modifier": "Default",
              "ty": {
                "Plain": 4
              },
              "default": [
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The earliest session for which previous session info is stored."
              ]
            },
            {
              "name": "Sessions",
              "modifier": "Optional",
              "ty": {
                "Map": {
                  "hashers": [
                    "Identity"
                  ],
                  "key": 4,
                  "value": 784
                }
              },
              "default": [
                0
              ],
              "docs": [
                " Session information in a rolling window.",
                " Should have an entry in range `EarliestStoredSession..=CurrentSessionIndex`.",
                " Does not have any entries before the session index in the first session change notification."
              ]
            },
            {
              "name": "AccountKeys",
              "modifier": "Optional",
              "ty": {
                "Map": {
                  "hashers": [
                    "Identity"
                  ],
                  "key": 4,
                  "value": 118
                }
              },
              "default": [
                0
              ],
              "docs": [
                " The validator account keys of the validators actively participating in parachain consensus."
              ]
            },
            {
              "name": "SessionExecutorParams",
              "modifier": "Optional",
              "ty": {
                "Map": {
                  "hashers": [
                    "Identity"
                  ],
                  "key": 4,
                  "value": 267
                }
              },
              "default": [
                0
              ],
              "docs": [
                " Executor parameter set for a given session index"
              ]
            }
          ]
        },
        "calls": null,
        "event": null,
        "constants": [],
        "error": null,
        "index": 61
      },
      {
        "name": "ParasDisputes",
        "storage": {
          "prefix": "ParasDisputes",
          "entries": [
            {
              "name": "LastPrunedSession",
              "modifier": "Optional",
              "ty": {
                "Plain": 4
              },
              "default": [
                0
              ],
              "docs": [
                " The last pruned session, if any. All data stored by this module",
                " references sessions."
              ]
            },
            {
              "name": "Disputes",
              "modifier": "Optional",
              "ty": {
                "Map": {
                  "hashers": [
                    "Twox64Concat",
                    "Blake2_128Concat"
                  ],
                  "key": 787,
                  "value": 788
                }
              },
              "default": [
                0
              ],
              "docs": [
                " All ongoing or concluded disputes for the last several sessions."
              ]
            },
            {
              "name": "BackersOnDisputes",
              "modifier": "Optional",
              "ty": {
                "Map": {
                  "hashers": [
                    "Twox64Concat",
                    "Blake2_128Concat"
                  ],
                  "key": 787,
                  "value": 789
                }
              },
              "default": [
                0
              ],
              "docs": [
                " Backing votes stored for each dispute.",
                " This storage is used for slashing."
              ]
            },
            {
              "name": "Included",
              "modifier": "Optional",
              "ty": {
                "Map": {
                  "hashers": [
                    "Twox64Concat",
                    "Blake2_128Concat"
                  ],
                  "key": 787,
                  "value": 4
                }
              },
              "default": [
                0
              ],
              "docs": [
                " All included blocks on the chain, as well as the block number in this chain that",
                " should be reverted back to if the candidate is disputed and determined to be invalid."
              ]
            },
            {
              "name": "Frozen",
              "modifier": "Default",
              "ty": {
                "Plain": 154
              },
              "default": [
                0
              ],
              "docs": [
                " Whether the chain is frozen. Starts as `None`. When this is `Some`,",
                " the chain will not accept any new parachain blocks for backing or inclusion,",
                " and its value indicates the last valid block number in the chain.",
                " It can only be set back to `None` by governance intervention."
              ]
            }
          ]
        },
        "calls": {
          "ty": 316
        },
        "event": {
          "ty": 502
        },
        "constants": [],
        "error": {
          "ty": 790
        },
        "index": 62
      },
      {
        "name": "ParasSlashing",
        "storage": {
          "prefix": "ParasSlashing",
          "entries": [
            {
              "name": "UnappliedSlashes",
              "modifier": "Optional",
              "ty": {
                "Map": {
                  "hashers": [
                    "Twox64Concat",
                    "Blake2_128Concat"
                  ],
                  "key": 787,
                  "value": 791
                }
              },
              "default": [
                0
              ],
              "docs": [
                " Validators pending dispute slashes."
              ]
            },
            {
              "name": "ValidatorSetCounts",
              "modifier": "Optional",
              "ty": {
                "Map": {
                  "hashers": [
                    "Twox64Concat"
                  ],
                  "key": 4,
                  "value": 4
                }
              },
              "default": [
                0
              ],
              "docs": [
                " `ValidatorSetCount` per session."
              ]
            }
          ]
        },
        "calls": {
          "ty": 317
        },
        "event": null,
        "constants": [],
        "error": {
          "ty": 795
        },
        "index": 63
      },
      {
        "name": "OnDemand",
        "storage": {
          "prefix": "OnDemand",
          "entries": [
            {
              "name": "ParaIdAffinity",
              "modifier": "Optional",
              "ty": {
                "Map": {
                  "hashers": [
                    "Twox64Concat"
                  ],
                  "key": 163,
                  "value": 796
                }
              },
              "default": [
                0
              ],
              "docs": [
                " Maps a `ParaId` to `CoreIndex` and keeps track of how many assignments the scheduler has in",
                " it's lookahead. Keeping track of this affinity prevents parallel execution of the same",
                " `ParaId` on two or more `CoreIndex`es."
              ]
            },
            {
              "name": "QueueStatus",
              "modifier": "Default",
              "ty": {
                "Plain": 797
              },
              "default": [
                0,
                0,
                100,
                167,
                179,
                182,
                224,
                13,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " Overall status of queue (both free + affinity entries)"
              ]
            },
            {
              "name": "FreeEntries",
              "modifier": "Default",
              "ty": {
                "Plain": 802
              },
              "default": [
                0
              ],
              "docs": [
                " Priority queue for all orders which don't yet (or not any more) have any core affinity."
              ]
            },
            {
              "name": "AffinityEntries",
              "modifier": "Default",
              "ty": {
                "Map": {
                  "hashers": [
                    "Twox64Concat"
                  ],
                  "key": 498,
                  "value": 802
                }
              },
              "default": [
                0
              ],
              "docs": [
                " Queue entries that are currently bound to a particular core due to core affinity."
              ]
            },
            {
              "name": "Revenue",
              "modifier": "Default",
              "ty": {
                "Plain": 805
              },
              "default": [
                0
              ],
              "docs": [
                " Keeps track of accumulated revenue from on demand order sales."
              ]
            }
          ]
        },
        "calls": {
          "ty": 321
        },
        "event": {
          "ty": 505
        },
        "constants": [
          {
            "name": "TrafficDefaultValue",
            "ty": 425,
            "value": [
              0,
              0,
              100,
              167,
              179,
              182,
              224,
              13,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0
            ],
            "docs": [
              " The default value for the spot traffic multiplier."
            ]
          },
          {
            "name": "MaxHistoricalRevenue",
            "ty": 4,
            "value": [
              160,
              0,
              0,
              0
            ],
            "docs": [
              " The maximum number of blocks some historical revenue",
              " information stored for."
            ]
          },
          {
            "name": "PalletId",
            "ty": 630,
            "value": [
              112,
              121,
              47,
              111,
              110,
              100,
              109,
              100
            ],
            "docs": [
              " Identifier for the internal revenue balance."
            ]
          }
        ],
        "error": {
          "ty": 807
        },
        "index": 64
      },
      {
        "name": "CoretimeAssignmentProvider",
        "storage": {
          "prefix": "CoretimeAssignmentProvider",
          "entries": [
            {
              "name": "CoreSchedules",
              "modifier": "Optional",
              "ty": {
                "Map": {
                  "hashers": [
                    "Twox256"
                  ],
                  "key": 808,
                  "value": 809
                }
              },
              "default": [
                0
              ],
              "docs": [
                " Scheduled assignment sets.",
                "",
                " Assignments as of the given block number. They will go into state once the block number is",
                " reached (and replace whatever was in there before)."
              ]
            },
            {
              "name": "CoreDescriptors",
              "modifier": "Default",
              "ty": {
                "Map": {
                  "hashers": [
                    "Twox256"
                  ],
                  "key": 498,
                  "value": 810
                }
              },
              "default": [
                0,
                0
              ],
              "docs": [
                " Assignments which are currently active.",
                "",
                " They will be picked from `PendingAssignments` once we reach the scheduled block number in",
                " `PendingAssignments`."
              ]
            }
          ]
        },
        "calls": null,
        "event": null,
        "constants": [],
        "error": {
          "ty": 818
        },
        "index": 65
      },
      {
        "name": "Registrar",
        "storage": {
          "prefix": "Registrar",
          "entries": [
            {
              "name": "PendingSwap",
              "modifier": "Optional",
              "ty": {
                "Map": {
                  "hashers": [
                    "Twox64Concat"
                  ],
                  "key": 163,
                  "value": 163
                }
              },
              "default": [
                0
              ],
              "docs": [
                " Pending swap operations."
              ]
            },
            {
              "name": "Paras",
              "modifier": "Optional",
              "ty": {
                "Map": {
                  "hashers": [
                    "Twox64Concat"
                  ],
                  "key": 163,
                  "value": 819
                }
              },
              "default": [
                0
              ],
              "docs": [
                " Amount held on deposit for each para and the original depositor.",
                "",
                " The given account ID is responsible for registering the code and initial head data, but may",
                " only do so if it isn't yet registered. (After that, it's up to governance to do so.)"
              ]
            },
            {
              "name": "NextFreeParaId",
              "modifier": "Default",
              "ty": {
                "Plain": 163
              },
              "default": [
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The next free `ParaId`."
              ]
            }
          ]
        },
        "calls": {
          "ty": 322
        },
        "event": {
          "ty": 506
        },
        "constants": [
          {
            "name": "ParaDeposit",
            "ty": 6,
            "value": [
              0,
              16,
              165,
              212,
              232,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0
            ],
            "docs": [
              " The deposit to be paid to run a on-demand parachain.",
              " This should include the cost for storing the genesis head and validation code."
            ]
          },
          {
            "name": "DataDepositPerByte",
            "ty": 6,
            "value": [
              128,
              150,
              152,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0
            ],
            "docs": [
              " The deposit to be paid per byte stored on chain."
            ]
          }
        ],
        "error": {
          "ty": 821
        },
        "index": 70
      },
      {
        "name": "Slots",
        "storage": {
          "prefix": "Slots",
          "entries": [
            {
              "name": "Leases",
              "modifier": "Default",
              "ty": {
                "Map": {
                  "hashers": [
                    "Twox64Concat"
                  ],
                  "key": 163,
                  "value": 822
                }
              },
              "default": [
                0
              ],
              "docs": [
                " Amounts held on deposit for each (possibly future) leased parachain.",
                "",
                " The actual amount locked on its behalf by any account at any time is the maximum of the",
                " second values of the items in this list whose first value is the account.",
                "",
                " The first item in the list is the amount locked for the current Lease Period. Following",
                " items are for the subsequent lease periods.",
                "",
                " The default value (an empty list) implies that the parachain no longer exists (or never",
                " existed) as far as this pallet is concerned.",
                "",
                " If a parachain doesn't exist *yet* but is scheduled to exist in the future, then it",
                " will be left-padded with one or more `None`s to denote the fact that nothing is held on",
                " deposit for the non-existent chain currently, but is held at some point in the future.",
                "",
                " It is illegal for a `None` value to trail in the list."
              ]
            }
          ]
        },
        "calls": {
          "ty": 323
        },
        "event": {
          "ty": 507
        },
        "constants": [
          {
            "name": "LeasePeriod",
            "ty": 4,
            "value": [
              0,
              117,
              18,
              0
            ],
            "docs": [
              " The number of blocks over which a single period lasts."
            ]
          },
          {
            "name": "LeaseOffset",
            "ty": 4,
            "value": [
              0,
              16,
              14,
              0
            ],
            "docs": [
              " The number of blocks to offset each lease period by."
            ]
          }
        ],
        "error": {
          "ty": 823
        },
        "index": 71
      },
      {
        "name": "Auctions",
        "storage": {
          "prefix": "Auctions",
          "entries": [
            {
              "name": "AuctionCounter",
              "modifier": "Default",
              "ty": {
                "Plain": 4
              },
              "default": [
                0,
                0,
                0,
                0
              ],
              "docs": [
                " Number of auctions started so far."
              ]
            },
            {
              "name": "AuctionInfo",
              "modifier": "Optional",
              "ty": {
                "Plain": 32
              },
              "default": [
                0
              ],
              "docs": [
                " Information relating to the current auction, if there is one.",
                "",
                " The first item in the tuple is the lease period index that the first of the four",
                " contiguous lease periods on auction is for. The second is the block number when the",
                " auction will \"begin to end\", i.e. the first block of the Ending Period of the auction."
              ]
            },
            {
              "name": "ReservedAmounts",
              "modifier": "Optional",
              "ty": {
                "Map": {
                  "hashers": [
                    "Twox64Concat"
                  ],
                  "key": 824,
                  "value": 6
                }
              },
              "default": [
                0
              ],
              "docs": [
                " Amounts currently reserved in the accounts of the bidders currently winning",
                " (sub-)ranges."
              ]
            },
            {
              "name": "Winning",
              "modifier": "Optional",
              "ty": {
                "Map": {
                  "hashers": [
                    "Twox64Concat"
                  ],
                  "key": 4,
                  "value": 825
                }
              },
              "default": [
                0
              ],
              "docs": [
                " The winning bids for each of the 10 ranges at each sample in the final Ending Period of",
                " the current auction. The map's key is the 0-based index into the Sample Size. The",
                " first sample of the ending period is 0; the last is `Sample Size - 1`."
              ]
            }
          ]
        },
        "calls": {
          "ty": 324
        },
        "event": {
          "ty": 508
        },
        "constants": [
          {
            "name": "EndingPeriod",
            "ty": 4,
            "value": [
              64,
              25,
              1,
              0
            ],
            "docs": [
              " The number of blocks over which an auction may be retroactively ended."
            ]
          },
          {
            "name": "SampleLength",
            "ty": 4,
            "value": [
              20,
              0,
              0,
              0
            ],
            "docs": [
              " The length of each sample to take during the ending period.",
              "",
              " `EndingPeriod` / `SampleLength` = Total # of Samples"
            ]
          },
          {
            "name": "SlotRangeCount",
            "ty": 4,
            "value": [
              36,
              0,
              0,
              0
            ],
            "docs": []
          },
          {
            "name": "LeasePeriodsPerSlot",
            "ty": 4,
            "value": [
              8,
              0,
              0,
              0
            ],
            "docs": []
          }
        ],
        "error": {
          "ty": 828
        },
        "index": 72
      },
      {
        "name": "Crowdloan",
        "storage": {
          "prefix": "Crowdloan",
          "entries": [
            {
              "name": "Funds",
              "modifier": "Optional",
              "ty": {
                "Map": {
                  "hashers": [
                    "Twox64Concat"
                  ],
                  "key": 163,
                  "value": 829
                }
              },
              "default": [
                0
              ],
              "docs": [
                " Info on all of the funds."
              ]
            },
            {
              "name": "NewRaise",
              "modifier": "Default",
              "ty": {
                "Plain": 760
              },
              "default": [
                0
              ],
              "docs": [
                " The funds that have had additional contributions during the last block. This is used",
                " in order to determine which funds should submit new or updated bids."
              ]
            },
            {
              "name": "EndingsCount",
              "modifier": "Default",
              "ty": {
                "Plain": 4
              },
              "default": [
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The number of auctions that have entered into their ending period so far."
              ]
            },
            {
              "name": "NextFundIndex",
              "modifier": "Default",
              "ty": {
                "Plain": 4
              },
              "default": [
                0,
                0,
                0,
                0
              ],
              "docs": [
                " Tracker for the next available fund index"
              ]
            }
          ]
        },
        "calls": {
          "ty": 326
        },
        "event": {
          "ty": 509
        },
        "constants": [
          {
            "name": "PalletId",
            "ty": 630,
            "value": [
              112,
              121,
              47,
              99,
              102,
              117,
              110,
              100
            ],
            "docs": [
              " `PalletId` for the crowdloan pallet. An appropriate value could be",
              " `PalletId(*b\"py/cfund\")`"
            ]
          },
          {
            "name": "MinContribution",
            "ty": 6,
            "value": [
              0,
              116,
              59,
              164,
              11,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0
            ],
            "docs": [
              " The minimum amount that may be contributed into a crowdloan. Should almost certainly be",
              " at least `ExistentialDeposit`."
            ]
          },
          {
            "name": "RemoveKeysLimit",
            "ty": 4,
            "value": [
              232,
              3,
              0,
              0
            ],
            "docs": [
              " Max number of storage keys to remove per extrinsic call."
            ]
          }
        ],
        "error": {
          "ty": 831
        },
        "index": 73
      },
      {
        "name": "Coretime",
        "storage": null,
        "calls": {
          "ty": 331
        },
        "event": {
          "ty": 510
        },
        "constants": [
          {
            "name": "BrokerId",
            "ty": 4,
            "value": [
              237,
              3,
              0,
              0
            ],
            "docs": [
              " The ParaId of the coretime chain."
            ]
          },
          {
            "name": "BrokerPotLocation",
            "ty": 68,
            "value": [
              1,
              1,
              0,
              109,
              111,
              100,
              108,
              112,
              121,
              47,
              98,
              114,
              111,
              107,
              101,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0
            ],
            "docs": [
              " The coretime chain pot location."
            ]
          }
        ],
        "error": {
          "ty": 832
        },
        "index": 74
      },
      {
        "name": "StateTrieMigration",
        "storage": {
          "prefix": "StateTrieMigration",
          "entries": [
            {
              "name": "MigrationProcess",
              "modifier": "Default",
              "ty": {
                "Plain": 339
              },
              "default": [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " Migration progress.",
                "",
                " This stores the snapshot of the last migrated keys. It can be set into motion and move",
                " forward by any of the means provided by this pallet."
              ]
            },
            {
              "name": "AutoLimits",
              "modifier": "Default",
              "ty": {
                "Plain": 337
              },
              "default": [
                0
              ],
              "docs": [
                " The limits that are imposed on automatic migrations.",
                "",
                " If set to None, then no automatic migration happens."
              ]
            },
            {
              "name": "SignedMigrationMaxLimits",
              "modifier": "Optional",
              "ty": {
                "Plain": 338
              },
              "default": [
                0
              ],
              "docs": [
                " The maximum limits that the signed migration could use.",
                "",
                " If not set, no signed submission is allowed."
              ]
            }
          ]
        },
        "calls": {
          "ty": 336
        },
        "event": {
          "ty": 511
        },
        "constants": [
          {
            "name": "MaxKeyLen",
            "ty": 4,
            "value": [
              0,
              2,
              0,
              0
            ],
            "docs": [
              " Maximal number of bytes that a key can have.",
              "",
              " FRAME itself does not limit the key length.",
              " The concrete value must therefore depend on your storage usage.",
              " A [`frame_support::storage::StorageNMap`] for example can have an arbitrary number of",
              " keys which are then hashed and concatenated, resulting in arbitrarily long keys.",
              "",
              " Use the *state migration RPC* to retrieve the length of the longest key in your",
              " storage: <https://github.com/paritytech/substrate/issues/11642>",
              "",
              " The migration will halt with a `Halted` event if this value is too small.",
              " Since there is no real penalty from over-estimating, it is advised to use a large",
              " value. The default is 512 byte.",
              "",
              " Some key lengths for reference:",
              " - [`frame_support::storage::StorageValue`]: 32 byte",
              " - [`frame_support::storage::StorageMap`]: 64 byte",
              " - [`frame_support::storage::StorageDoubleMap`]: 96 byte",
              "",
              " For more info see",
              " <https://www.shawntabrizi.com/blog/substrate/querying-substrate-storage-via-rpc/>"
            ]
          }
        ],
        "error": {
          "ty": 513
        },
        "index": 98
      },
      {
        "name": "XcmPallet",
        "storage": {
          "prefix": "XcmPallet",
          "entries": [
            {
              "name": "QueryCounter",
              "modifier": "Default",
              "ty": {
                "Plain": 12
              },
              "default": [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The latest available query index."
              ]
            },
            {
              "name": "Queries",
              "modifier": "Optional",
              "ty": {
                "Map": {
                  "hashers": [
                    "Blake2_128Concat"
                  ],
                  "key": 12,
                  "value": 833
                }
              },
              "default": [
                0
              ],
              "docs": [
                " The ongoing queries."
              ]
            },
            {
              "name": "AssetTraps",
              "modifier": "Default",
              "ty": {
                "Map": {
                  "hashers": [
                    "Identity"
                  ],
                  "key": 13,
                  "value": 4
                }
              },
              "default": [
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The existing asset traps.",
                "",
                " Key is the blake2 256 hash of (origin, versioned `Assets`) pair. Value is the number of",
                " times this pair has been trapped (usually just 1 if it exists at all)."
              ]
            },
            {
              "name": "SafeXcmVersion",
              "modifier": "Optional",
              "ty": {
                "Plain": 4
              },
              "default": [
                0
              ],
              "docs": [
                " Default version to encode XCM when latest version of destination is unknown. If `None`,",
                " then the destinations whose XCM version is unknown are considered unreachable."
              ]
            },
            {
              "name": "SupportedVersion",
              "modifier": "Optional",
              "ty": {
                "Map": {
                  "hashers": [
                    "Twox64Concat",
                    "Blake2_128Concat"
                  ],
                  "key": 838,
                  "value": 4
                }
              },
              "default": [
                0
              ],
              "docs": [
                " The Latest versions that we know various locations support."
              ]
            },
            {
              "name": "VersionNotifiers",
              "modifier": "Optional",
              "ty": {
                "Map": {
                  "hashers": [
                    "Twox64Concat",
                    "Blake2_128Concat"
                  ],
                  "key": 838,
                  "value": 12
                }
              },
              "default": [
                0
              ],
              "docs": [
                " All locations that we have requested version notifications from."
              ]
            },
            {
              "name": "VersionNotifyTargets",
              "modifier": "Optional",
              "ty": {
                "Map": {
                  "hashers": [
                    "Twox64Concat",
                    "Blake2_128Concat"
                  ],
                  "key": 838,
                  "value": 839
                }
              },
              "default": [
                0
              ],
              "docs": [
                " The target locations that are subscribed to our version changes, as well as the most recent",
                " of our versions we informed them of."
              ]
            },
            {
              "name": "VersionDiscoveryQueue",
              "modifier": "Default",
              "ty": {
                "Plain": 840
              },
              "default": [
                0
              ],
              "docs": [
                " Destinations whose latest XCM version we would like to know. Duplicates not allowed, and",
                " the `u32` counter is the number of times that a send to the destination has been attempted,",
                " which is used as a prioritization."
              ]
            },
            {
              "name": "CurrentMigration",
              "modifier": "Optional",
              "ty": {
                "Plain": 843
              },
              "default": [
                0
              ],
              "docs": [
                " The current migration's stage, if any."
              ]
            },
            {
              "name": "RemoteLockedFungibles",
              "modifier": "Optional",
              "ty": {
                "Map": {
                  "hashers": [
                    "Twox64Concat",
                    "Blake2_128Concat",
                    "Blake2_128Concat"
                  ],
                  "key": 845,
                  "value": 846
                }
              },
              "default": [
                0
              ],
              "docs": [
                " Fungible assets which we know are locked on a remote chain."
              ]
            },
            {
              "name": "LockedFungibles",
              "modifier": "Optional",
              "ty": {
                "Map": {
                  "hashers": [
                    "Blake2_128Concat"
                  ],
                  "key": 0,
                  "value": 850
                }
              },
              "default": [
                0
              ],
              "docs": [
                " Fungible assets which we know are locked on this chain."
              ]
            },
            {
              "name": "XcmExecutionSuspended",
              "modifier": "Default",
              "ty": {
                "Plain": 8
              },
              "default": [
                0
              ],
              "docs": [
                " Global suspension state of the XCM executor."
              ]
            },
            {
              "name": "ShouldRecordXcm",
              "modifier": "Default",
              "ty": {
                "Plain": 8
              },
              "default": [
                0
              ],
              "docs": [
                " Whether or not incoming XCMs (both executed locally and received) should be recorded.",
                " Only one XCM program will be recorded at a time.",
                " This is meant to be used in runtime APIs, and it's advised it stays false",
                " for all other use cases, so as to not degrade regular performance.",
                "",
                " Only relevant if this pallet is being used as the [`xcm_executor::traits::RecordXcm`]",
                " implementation in the XCM executor configuration."
              ]
            },
            {
              "name": "RecordedXcm",
              "modifier": "Optional",
              "ty": {
                "Plain": 389
              },
              "default": [
                0
              ],
              "docs": [
                " If [`ShouldRecordXcm`] is set to true, then the last XCM program executed locally",
                " will be stored here.",
                " Runtime APIs can fetch the XCM that was executed by accessing this value.",
                "",
                " Only relevant if this pallet is being used as the [`xcm_executor::traits::RecordXcm`]",
                " implementation in the XCM executor configuration."
              ]
            }
          ]
        },
        "calls": {
          "ty": 342
        },
        "event": {
          "ty": 514
        },
        "constants": [],
        "error": {
          "ty": 853
        },
        "index": 99
      },
      {
        "name": "MessageQueue",
        "storage": {
          "prefix": "MessageQueue",
          "entries": [
            {
              "name": "BookStateFor",
              "modifier": "Default",
              "ty": {
                "Map": {
                  "hashers": [
                    "Twox64Concat"
                  ],
                  "key": 422,
                  "value": 854
                }
              },
              "default": [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The index of the first and last (non-empty) pages."
              ]
            },
            {
              "name": "ServiceHead",
              "modifier": "Optional",
              "ty": {
                "Plain": 422
              },
              "default": [
                0
              ],
              "docs": [
                " The origin at which we should begin servicing."
              ]
            },
            {
              "name": "Pages",
              "modifier": "Optional",
              "ty": {
                "Map": {
                  "hashers": [
                    "Twox64Concat",
                    "Twox64Concat"
                  ],
                  "key": 857,
                  "value": 858
                }
              },
              "default": [
                0
              ],
              "docs": [
                " The map of page indices to pages."
              ]
            }
          ]
        },
        "calls": {
          "ty": 421
        },
        "event": {
          "ty": 516
        },
        "constants": [
          {
            "name": "HeapSize",
            "ty": 4,
            "value": [
              0,
              0,
              1,
              0
            ],
            "docs": [
              " The size of the page; this implies the maximum message size which can be sent.",
              "",
              " A good value depends on the expected message sizes, their weights, the weight that is",
              " available for processing them and the maximal needed message size. The maximal message",
              " size is slightly lower than this as defined by [`MaxMessageLenOf`]."
            ]
          },
          {
            "name": "MaxStale",
            "ty": 4,
            "value": [
              8,
              0,
              0,
              0
            ],
            "docs": [
              " The maximum number of stale pages (i.e. of overweight messages) allowed before culling",
              " can happen. Once there are more stale pages than this, then historical pages may be",
              " dropped, even if they contain unprocessed overweight messages."
            ]
          },
          {
            "name": "ServiceWeight",
            "ty": 479,
            "value": [
              1,
              7,
              0,
              160,
              219,
              33,
              93,
              19,
              51,
              51,
              51,
              51,
              51,
              51,
              51,
              51
            ],
            "docs": [
              " The amount of weight (if any) which should be provided to the message queue for",
              " servicing enqueued items `on_initialize`.",
              "",
              " This may be legitimately `None` in the case that you will call",
              " `ServiceQueues::service_queues` manually or set [`Self::IdleMaxServiceWeight`] to have",
              " it run in `on_idle`."
            ]
          },
          {
            "name": "IdleMaxServiceWeight",
            "ty": 479,
            "value": [
              1,
              7,
              0,
              160,
              219,
              33,
              93,
              19,
              51,
              51,
              51,
              51,
              51,
              51,
              51,
              51
            ],
            "docs": [
              " The maximum amount of weight (if any) to be used from remaining weight `on_idle` which",
              " should be provided to the message queue for servicing enqueued items `on_idle`.",
              " Useful for parachains to process messages at the same block they are received.",
              "",
              " If `None`, it will not call `ServiceQueues::service_queues` in `on_idle`."
            ]
          }
        ],
        "error": {
          "ty": 860
        },
        "index": 100
      },
      {
        "name": "AssetRate",
        "storage": {
          "prefix": "AssetRate",
          "entries": [
            {
              "name": "ConversionRateToNative",
              "modifier": "Optional",
              "ty": {
                "Map": {
                  "hashers": [
                    "Blake2_128Concat"
                  ],
                  "key": 55,
                  "value": 425
                }
              },
              "default": [
                0
              ],
              "docs": [
                " Maps an asset to its fixed point representation in the native balance.",
                "",
                " E.g. `native_amount = asset_amount * ConversionRateToNative::<T>::get(asset_kind)`"
              ]
            }
          ]
        },
        "calls": {
          "ty": 424
        },
        "event": {
          "ty": 518
        },
        "constants": [],
        "error": {
          "ty": 861
        },
        "index": 101
      },
      {
        "name": "Beefy",
        "storage": {
          "prefix": "Beefy",
          "entries": [
            {
              "name": "Authorities",
              "modifier": "Default",
              "ty": {
                "Plain": 862
              },
              "default": [
                0
              ],
              "docs": [
                " The current authorities set"
              ]
            },
            {
              "name": "ValidatorSetId",
              "modifier": "Default",
              "ty": {
                "Plain": 12
              },
              "default": [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The current validator set id"
              ]
            },
            {
              "name": "NextAuthorities",
              "modifier": "Default",
              "ty": {
                "Plain": 862
              },
              "default": [
                0
              ],
              "docs": [
                " Authorities set scheduled to be used with the next session"
              ]
            },
            {
              "name": "SetIdSession",
              "modifier": "Optional",
              "ty": {
                "Map": {
                  "hashers": [
                    "Twox64Concat"
                  ],
                  "key": 12,
                  "value": 4
                }
              },
              "default": [
                0
              ],
              "docs": [
                " A mapping from BEEFY set ID to the index of the *most recent* session for which its",
                " members were responsible.",
                "",
                " This is only used for validating equivocation proofs. An equivocation proof must",
                " contains a key-ownership proof for a given session, therefore we need a way to tie",
                " together sessions and BEEFY set ids, i.e. we need to validate that a validator",
                " was the owner of a given key on a given session, and what the active set ID was",
                " during that session.",
                "",
                " TWOX-NOTE: `ValidatorSetId` is not under user control."
              ]
            },
            {
              "name": "GenesisBlock",
              "modifier": "Default",
              "ty": {
                "Plain": 154
              },
              "default": [
                0
              ],
              "docs": [
                " Block number where BEEFY consensus is enabled/started.",
                " By changing this (through privileged `set_new_genesis()`), BEEFY consensus is effectively",
                " restarted from the newly set block number."
              ]
            }
          ]
        },
        "calls": {
          "ty": 426
        },
        "event": null,
        "constants": [
          {
            "name": "MaxAuthorities",
            "ty": 4,
            "value": [
              160,
              134,
              1,
              0
            ],
            "docs": [
              " The maximum number of authorities that can be added."
            ]
          },
          {
            "name": "MaxNominators",
            "ty": 4,
            "value": [
              0,
              2,
              0,
              0
            ],
            "docs": [
              " The maximum number of nominators for each validator."
            ]
          },
          {
            "name": "MaxSetIdSessionEntries",
            "ty": 12,
            "value": [
              168,
              0,
              0,
              0,
              0,
              0,
              0,
              0
            ],
            "docs": [
              " The maximum number of entries to keep in the set id to session index mapping.",
              "",
              " Since the `SetIdSession` map is only used for validating equivocations this",
              " value should relate to the bonding duration of whatever staking system is",
              " being used (if any). If equivocation handling is not enabled then this value",
              " can be zero."
            ]
          }
        ],
        "error": {
          "ty": 864
        },
        "index": 200
      },
      {
        "name": "Mmr",
        "storage": {
          "prefix": "Mmr",
          "entries": [
            {
              "name": "RootHash",
              "modifier": "Default",
              "ty": {
                "Plain": 13
              },
              "default": [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " Latest MMR Root hash."
              ]
            },
            {
              "name": "NumberOfLeaves",
              "modifier": "Default",
              "ty": {
                "Plain": 12
              },
              "default": [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " Current size of the MMR (number of leaves)."
              ]
            },
            {
              "name": "Nodes",
              "modifier": "Optional",
              "ty": {
                "Map": {
                  "hashers": [
                    "Identity"
                  ],
                  "key": 12,
                  "value": 13
                }
              },
              "default": [
                0
              ],
              "docs": [
                " Hashes of the nodes in the MMR.",
                "",
                " Note this collection only contains MMR peaks, the inner nodes (and leaves)",
                " are pruned and only stored in the Offchain DB."
              ]
            }
          ]
        },
        "calls": null,
        "event": null,
        "constants": [],
        "error": null,
        "index": 201
      },
      {
        "name": "BeefyMmrLeaf",
        "storage": {
          "prefix": "BeefyMmrLeaf",
          "entries": [
            {
              "name": "BeefyAuthorities",
              "modifier": "Default",
              "ty": {
                "Plain": 865
              },
              "default": [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " Details of current BEEFY authority set."
              ]
            },
            {
              "name": "BeefyNextAuthorities",
              "modifier": "Default",
              "ty": {
                "Plain": 865
              },
              "default": [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " Details of next BEEFY authority set.",
                "",
                " This storage entry is used as cache for calls to `update_beefy_next_authority_set`."
              ]
            }
          ]
        },
        "calls": null,
        "event": null,
        "constants": [],
        "error": null,
        "index": 202
      },
      {
        "name": "RcMigrator",
        "storage": {
          "prefix": "RcMigrator",
          "entries": [
            {
              "name": "RcMigrationStage",
              "modifier": "Default",
              "ty": {
                "Plain": 441
              },
              "default": [
                0
              ],
              "docs": [
                " The Relay Chain migration state."
              ]
            },
            {
              "name": "RcAccounts",
              "modifier": "Optional",
              "ty": {
                "Map": {
                  "hashers": [
                    "Twox64Concat"
                  ],
                  "key": 0,
                  "value": 866
                }
              },
              "default": [
                0
              ],
              "docs": [
                " Helper storage item to obtain and store the known accounts that should be kept partially or",
                " fully on Relay Chain."
              ]
            },
            {
              "name": "RcBalanceKept",
              "modifier": "Default",
              "ty": {
                "Plain": 6
              },
              "default": [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " Helper storage item to store the total balance that should be kept on Relay Chain."
              ]
            },
            {
              "name": "DmpDataMessageCounts",
              "modifier": "Default",
              "ty": {
                "Plain": 32
              },
              "default": [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The total number of XCM data messages sent to the Asset Hub and the number of XCM messages",
                " the Asset Hub has confirmed as processed.",
                "",
                " The difference between these two numbers are the messages that are \"in-flight\". We aim to",
                " keep this number low to not accidentally overload the asset hub."
              ]
            }
          ]
        },
        "calls": {
          "ty": 440
        },
        "event": {
          "ty": 519
        },
        "constants": [],
        "error": {
          "ty": 867
        },
        "index": 255
      }
    ],
    "extrinsic": {
      "ty": 868,
      "version": 4,
      "signed_extensions": [
        {
          "identifier": "CheckNonZeroSender",
          "ty": 870,
          "additional_signed": 35
        },
        {
          "identifier": "CheckSpecVersion",
          "ty": 871,
          "additional_signed": 4
        },
        {
          "identifier": "CheckTxVersion",
          "ty": 872,
          "additional_signed": 4
        },
        {
          "identifier": "CheckGenesis",
          "ty": 873,
          "additional_signed": 13
        },
        {
          "identifier": "CheckMortality",
          "ty": 874,
          "additional_signed": 13
        },
        {
          "identifier": "CheckNonce",
          "ty": 876,
          "additional_signed": 35
        },
        {
          "identifier": "CheckWeight",
          "ty": 877,
          "additional_signed": 35
        },
        {
          "identifier": "ChargeTransactionPayment",
          "ty": 878,
          "additional_signed": 35
        },
        {
          "identifier": "PrevalidateAttests",
          "ty": 879,
          "additional_signed": 35
        },
        {
          "identifier": "CheckMetadataHash",
          "ty": 880,
          "additional_signed": 33
        }
      ]
    },
    "ty": 882
  }
}
